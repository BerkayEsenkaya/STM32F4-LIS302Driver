
STM32F4-LIS302Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080090c4  080090c4  000190c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090e0  080090e0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080090e0  080090e0  000190e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090e8  080090e8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090e8  080090e8  000190e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090ec  080090ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080090f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000964  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009e0  200009e0  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017190  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f01  00000000  00000000  0003727f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001260  00000000  00000000  0003b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000df8  00000000  00000000  0003c3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004ffb  00000000  00000000  0003d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019e04  00000000  00000000  000421d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc2d5  00000000  00000000  0005bfd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ef8  00000000  00000000  001282ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0012d1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080090ac 	.word	0x080090ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080090ac 	.word	0x080090ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <LIS3DSH_Init>:
/******************************************************************************
 *** FUNCTIONS
 ******************************************************************************/
/** \brief
 */
uint8_t LIS3DSH_Init(){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
	uint8_t whoIam[1];
	LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_WHOIAM, whoIam, 1);
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2201      	movs	r2, #1
 80004ce:	4619      	mov	r1, r3
 80004d0:	200f      	movs	r0, #15
 80004d2:	f000 f80c 	bl	80004ee <LIS3DSH_Read_Reg>
	if(whoIam[0] == _LIS3DSH_ID){
 80004d6:	793b      	ldrb	r3, [r7, #4]
 80004d8:	2b3f      	cmp	r3, #63	; 0x3f
 80004da:	d103      	bne.n	80004e4 <LIS3DSH_Init+0x20>
		LIS3DSH_AccalometerSoftReset();
 80004dc:	f000 f9c1 	bl	8000862 <LIS3DSH_AccalometerSoftReset>
        return _LIS3DSH_OK;
 80004e0:	2301      	movs	r3, #1
 80004e2:	e000      	b.n	80004e6 <LIS3DSH_Init+0x22>
	}else{
		return _LIS3DSH_NOT_OK;
 80004e4:	2300      	movs	r3, #0
	}
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <LIS3DSH_Read_Reg>:

/** \brief
 */
uint8_t LIS3DSH_Read_Reg(uint8_t RegAddr, uint8_t *rxBuff,uint8_t lenght){
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b086      	sub	sp, #24
 80004f2:	af02      	add	r7, sp, #8
 80004f4:	4603      	mov	r3, r0
 80004f6:	6039      	str	r1, [r7, #0]
 80004f8:	71fb      	strb	r3, [r7, #7]
 80004fa:	4613      	mov	r3, r2
 80004fc:	71bb      	strb	r3, [r7, #6]
	uint8_t txBuff[1];

	txBuff[0] = RegAddr | LIS3DSH_SPIMODE_READ;
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000504:	b2db      	uxtb	r3, r3
 8000506:	733b      	strb	r3, [r7, #12]

	return SPI_TransmitReceive(SPI_NO1, txBuff, rxBuff, 1, lenght);
 8000508:	f107 010c 	add.w	r1, r7, #12
 800050c:	79bb      	ldrb	r3, [r7, #6]
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2301      	movs	r3, #1
 8000512:	683a      	ldr	r2, [r7, #0]
 8000514:	2001      	movs	r0, #1
 8000516:	f000 fd21 	bl	8000f5c <SPI_TransmitReceive>
 800051a:	4603      	mov	r3, r0
}
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <LIS3DSH_Write_Reg>:

/** \brief
 */
uint8_t LIS3DSH_Write_Reg(uint8_t RegAddr, uint8_t *data,uint8_t lenght){
 8000524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000528:	b089      	sub	sp, #36	; 0x24
 800052a:	af02      	add	r7, sp, #8
 800052c:	4603      	mov	r3, r0
 800052e:	6039      	str	r1, [r7, #0]
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	4613      	mov	r3, r2
 8000534:	71bb      	strb	r3, [r7, #6]
 8000536:	466b      	mov	r3, sp
 8000538:	461e      	mov	r6, r3
	uint8_t txBuff[lenght+1];
 800053a:	79bb      	ldrb	r3, [r7, #6]
 800053c:	1c59      	adds	r1, r3, #1
 800053e:	1e4b      	subs	r3, r1, #1
 8000540:	613b      	str	r3, [r7, #16]
 8000542:	460a      	mov	r2, r1
 8000544:	2300      	movs	r3, #0
 8000546:	4690      	mov	r8, r2
 8000548:	4699      	mov	r9, r3
 800054a:	f04f 0200 	mov.w	r2, #0
 800054e:	f04f 0300 	mov.w	r3, #0
 8000552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800055a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800055e:	460a      	mov	r2, r1
 8000560:	2300      	movs	r3, #0
 8000562:	4614      	mov	r4, r2
 8000564:	461d      	mov	r5, r3
 8000566:	f04f 0200 	mov.w	r2, #0
 800056a:	f04f 0300 	mov.w	r3, #0
 800056e:	00eb      	lsls	r3, r5, #3
 8000570:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000574:	00e2      	lsls	r2, r4, #3
 8000576:	460b      	mov	r3, r1
 8000578:	3307      	adds	r3, #7
 800057a:	08db      	lsrs	r3, r3, #3
 800057c:	00db      	lsls	r3, r3, #3
 800057e:	ebad 0d03 	sub.w	sp, sp, r3
 8000582:	ab02      	add	r3, sp, #8
 8000584:	3300      	adds	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
	uint8_t i;

	txBuff[0] = RegAddr & LIS3DSH_SPIMODE_WRITE;
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800058e:	b2da      	uxtb	r2, r3
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	701a      	strb	r2, [r3, #0]
	for(i=1;i<lenght+1;i++){
 8000594:	2301      	movs	r3, #1
 8000596:	75fb      	strb	r3, [r7, #23]
 8000598:	e00a      	b.n	80005b0 <LIS3DSH_Write_Reg+0x8c>
	  txBuff[i] = data[i-1];
 800059a:	7dfb      	ldrb	r3, [r7, #23]
 800059c:	3b01      	subs	r3, #1
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	441a      	add	r2, r3
 80005a2:	7dfb      	ldrb	r3, [r7, #23]
 80005a4:	7811      	ldrb	r1, [r2, #0]
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<lenght+1;i++){
 80005aa:	7dfb      	ldrb	r3, [r7, #23]
 80005ac:	3301      	adds	r3, #1
 80005ae:	75fb      	strb	r3, [r7, #23]
 80005b0:	79ba      	ldrb	r2, [r7, #6]
 80005b2:	7dfb      	ldrb	r3, [r7, #23]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d2f0      	bcs.n	800059a <LIS3DSH_Write_Reg+0x76>
	}

    SPI_TransmitReceive(SPI_NO1, txBuff, NULL, lenght, 0);
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	2200      	movs	r2, #0
 80005bc:	9200      	str	r2, [sp, #0]
 80005be:	2200      	movs	r2, #0
 80005c0:	68f9      	ldr	r1, [r7, #12]
 80005c2:	2001      	movs	r0, #1
 80005c4:	f000 fcca 	bl	8000f5c <SPI_TransmitReceive>
    return LIS3DSH_CTRL_WRITE_DATA_IS_CORRECT(RegAddr, data);
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	6839      	ldr	r1, [r7, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f95b 	bl	8000888 <LIS3DSH_CTRL_WRITE_DATA_IS_CORRECT>
 80005d2:	4603      	mov	r3, r0
 80005d4:	46b5      	mov	sp, r6
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	371c      	adds	r7, #28
 80005da:	46bd      	mov	sp, r7
 80005dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080005e0 <LIS3DSH_Reg_Set_Ctrl3>:
    return LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL2, txBuff, 2);
}

/** \brief
 */
uint8_t LIS3DSH_Reg_Set_Ctrl3(LIS3DSH_DR_EN_T dren, LIS3DSH_IEA_T iea, LIS3DSH_IEL_T iel, LIS3DSH_INT2_EN_T int2_en, LIS3DSH_INT1_EN_T int1_en, LIS3DSH_VFILT_T Vfilt, LIS3DSH_STRT_T reset){
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4604      	mov	r4, r0
 80005e8:	4608      	mov	r0, r1
 80005ea:	4611      	mov	r1, r2
 80005ec:	461a      	mov	r2, r3
 80005ee:	4623      	mov	r3, r4
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	4603      	mov	r3, r0
 80005f4:	71bb      	strb	r3, [r7, #6]
 80005f6:	460b      	mov	r3, r1
 80005f8:	717b      	strb	r3, [r7, #5]
 80005fa:	4613      	mov	r3, r2
 80005fc:	713b      	strb	r3, [r7, #4]
	LIS3DSH_REG_CTRL_3_T SetReg;
    uint8_t txBuff[1];
    SetReg.dren = dren;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	7b3b      	ldrb	r3, [r7, #12]
 8000608:	f362 1386 	bfi	r3, r2, #6, #1
 800060c:	733b      	strb	r3, [r7, #12]
    SetReg.iea = iea;
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	b2da      	uxtb	r2, r3
 8000616:	7b3b      	ldrb	r3, [r7, #12]
 8000618:	f362 1345 	bfi	r3, r2, #5, #1
 800061c:	733b      	strb	r3, [r7, #12]
    SetReg.iel = iel;
 800061e:	797b      	ldrb	r3, [r7, #5]
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	b2da      	uxtb	r2, r3
 8000626:	7b3b      	ldrb	r3, [r7, #12]
 8000628:	f362 1304 	bfi	r3, r2, #4, #1
 800062c:	733b      	strb	r3, [r7, #12]
    SetReg.int2en = int2_en;
 800062e:	793b      	ldrb	r3, [r7, #4]
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	b2da      	uxtb	r2, r3
 8000636:	7b3b      	ldrb	r3, [r7, #12]
 8000638:	f362 03c3 	bfi	r3, r2, #3, #1
 800063c:	733b      	strb	r3, [r7, #12]
    SetReg.int1en = int1_en;
 800063e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	b2da      	uxtb	r2, r3
 8000648:	7b3b      	ldrb	r3, [r7, #12]
 800064a:	f362 0382 	bfi	r3, r2, #2, #1
 800064e:	733b      	strb	r3, [r7, #12]
    SetReg.vfilt = Vfilt;
 8000650:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	b2da      	uxtb	r2, r3
 800065a:	7b3b      	ldrb	r3, [r7, #12]
 800065c:	f362 0341 	bfi	r3, r2, #1, #1
 8000660:	733b      	strb	r3, [r7, #12]
    SetReg.reset = reset;
 8000662:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	b2da      	uxtb	r2, r3
 800066c:	7b3b      	ldrb	r3, [r7, #12]
 800066e:	f362 0300 	bfi	r3, r2, #0, #1
 8000672:	733b      	strb	r3, [r7, #12]
    txBuff[0] = SetReg.CTRL3;
 8000674:	7b3b      	ldrb	r3, [r7, #12]
 8000676:	723b      	strb	r3, [r7, #8]
    return LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL3, txBuff, 2);
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2202      	movs	r2, #2
 800067e:	4619      	mov	r1, r3
 8000680:	2023      	movs	r0, #35	; 0x23
 8000682:	f7ff ff4f 	bl	8000524 <LIS3DSH_Write_Reg>
 8000686:	4603      	mov	r3, r0
}
 8000688:	4618      	mov	r0, r3
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	bd90      	pop	{r4, r7, pc}

08000690 <LIS3DSH_Reg_Set_Ctrl4>:

/** \brief
 */
uint8_t LIS3DSH_Reg_Set_Ctrl4(LIS3DSH_ODR_T odrVal, LIS3DSH_BDU_T bduVal, LIS3DSH_XEN_T StateXAxis, LIS3DSH_YEN_T StateYAxis, LIS3DSH_ZEN_T StateZAxis ){
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	4604      	mov	r4, r0
 8000698:	4608      	mov	r0, r1
 800069a:	4611      	mov	r1, r2
 800069c:	461a      	mov	r2, r3
 800069e:	4623      	mov	r3, r4
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	4603      	mov	r3, r0
 80006a4:	71bb      	strb	r3, [r7, #6]
 80006a6:	460b      	mov	r3, r1
 80006a8:	717b      	strb	r3, [r7, #5]
 80006aa:	4613      	mov	r3, r2
 80006ac:	713b      	strb	r3, [r7, #4]
    LIS3DSH_REG_CTRL_4_T SetReg;
    uint8_t txBuff[1];
    SetReg.odr = odrVal;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	7b3b      	ldrb	r3, [r7, #12]
 80006b8:	f362 1307 	bfi	r3, r2, #4, #4
 80006bc:	733b      	strb	r3, [r7, #12]
    SetReg.bdu = bduVal;
 80006be:	79bb      	ldrb	r3, [r7, #6]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	7b3b      	ldrb	r3, [r7, #12]
 80006c8:	f362 03c3 	bfi	r3, r2, #3, #1
 80006cc:	733b      	strb	r3, [r7, #12]
    SetReg.xaxis_en = StateXAxis;
 80006ce:	797b      	ldrb	r3, [r7, #5]
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	7b3b      	ldrb	r3, [r7, #12]
 80006d8:	f362 0300 	bfi	r3, r2, #0, #1
 80006dc:	733b      	strb	r3, [r7, #12]
    SetReg.yaxis_en = StateYAxis;
 80006de:	793b      	ldrb	r3, [r7, #4]
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	7b3b      	ldrb	r3, [r7, #12]
 80006e8:	f362 0341 	bfi	r3, r2, #1, #1
 80006ec:	733b      	strb	r3, [r7, #12]
    SetReg.zaxis_en = StateZAxis;
 80006ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	7b3b      	ldrb	r3, [r7, #12]
 80006fa:	f362 0382 	bfi	r3, r2, #2, #1
 80006fe:	733b      	strb	r3, [r7, #12]
    txBuff[0] = SetReg.CTRL4;
 8000700:	7b3b      	ldrb	r3, [r7, #12]
 8000702:	723b      	strb	r3, [r7, #8]
    return LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL4, txBuff, 2);
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2202      	movs	r2, #2
 800070a:	4619      	mov	r1, r3
 800070c:	2020      	movs	r0, #32
 800070e:	f7ff ff09 	bl	8000524 <LIS3DSH_Write_Reg>
 8000712:	4603      	mov	r3, r0
}
 8000714:	4618      	mov	r0, r3
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	bd90      	pop	{r4, r7, pc}

0800071c <LIS3DSH_Reg_Set_Ctrl5>:

/** \brief
 */
uint8_t LIS3DSH_Reg_Set_Ctrl5(LIS3DSH_BW_T bw,LIS3DSH_FSCALE_T scale, LIS3DSH_ST_T selftest ,LIS3DSH_SIM_T spiMode ){
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	4604      	mov	r4, r0
 8000724:	4608      	mov	r0, r1
 8000726:	4611      	mov	r1, r2
 8000728:	461a      	mov	r2, r3
 800072a:	4623      	mov	r3, r4
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	4603      	mov	r3, r0
 8000730:	71bb      	strb	r3, [r7, #6]
 8000732:	460b      	mov	r3, r1
 8000734:	717b      	strb	r3, [r7, #5]
 8000736:	4613      	mov	r3, r2
 8000738:	713b      	strb	r3, [r7, #4]
	LIS3DSH_REG_CTRL_5_T SetReg;
	save.scale = scale;
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <LIS3DSH_Reg_Set_Ctrl5+0x80>)
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	7013      	strb	r3, [r2, #0]
	uint8_t txBuff[1];
	SetReg.bandwith = bw;
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	f003 0303 	and.w	r3, r3, #3
 8000746:	b2da      	uxtb	r2, r3
 8000748:	7b3b      	ldrb	r3, [r7, #12]
 800074a:	f362 1387 	bfi	r3, r2, #6, #2
 800074e:	733b      	strb	r3, [r7, #12]
	SetReg.scale = scale;
 8000750:	79bb      	ldrb	r3, [r7, #6]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	b2da      	uxtb	r2, r3
 8000758:	7b3b      	ldrb	r3, [r7, #12]
 800075a:	f362 03c5 	bfi	r3, r2, #3, #3
 800075e:	733b      	strb	r3, [r7, #12]
	SetReg.selftest = selftest;
 8000760:	797b      	ldrb	r3, [r7, #5]
 8000762:	f003 0303 	and.w	r3, r3, #3
 8000766:	b2da      	uxtb	r2, r3
 8000768:	7b3b      	ldrb	r3, [r7, #12]
 800076a:	f362 0342 	bfi	r3, r2, #1, #2
 800076e:	733b      	strb	r3, [r7, #12]
	SetReg.spiMode = spiMode;
 8000770:	793b      	ldrb	r3, [r7, #4]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	b2da      	uxtb	r2, r3
 8000778:	7b3b      	ldrb	r3, [r7, #12]
 800077a:	f362 0300 	bfi	r3, r2, #0, #1
 800077e:	733b      	strb	r3, [r7, #12]
	txBuff[0] = SetReg.CTRL5;
 8000780:	7b3b      	ldrb	r3, [r7, #12]
 8000782:	723b      	strb	r3, [r7, #8]
	return LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL5, txBuff, 2);
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2202      	movs	r2, #2
 800078a:	4619      	mov	r1, r3
 800078c:	2024      	movs	r0, #36	; 0x24
 800078e:	f7ff fec9 	bl	8000524 <LIS3DSH_Write_Reg>
 8000792:	4603      	mov	r3, r0
}
 8000794:	4618      	mov	r0, r3
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	bd90      	pop	{r4, r7, pc}
 800079c:	200000b8 	.word	0x200000b8

080007a0 <LIS3DSH_Reg_Set_Ctrl6>:

/** \brief
 */
uint8_t LIS3DSH_Reg_Set_Ctrl6(uint8_t boot, LIS3DSH_FIFO_EN_T fifo_en, LIS3DSH_WTM_EN_T wtm_en, LIS3DSH_ADD_INC_T reg_inc_en, LIS3DSH_P1_EMPTY_T fifo_empty_int, LIS3DSH_P1_WTM_T fifo_wtm_int, LIS3DSH_P1_OVERRUN_T fifo_ovr_int, LIS3DSH_P2_BOOT_T bootint){
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4604      	mov	r4, r0
 80007a8:	4608      	mov	r0, r1
 80007aa:	4611      	mov	r1, r2
 80007ac:	461a      	mov	r2, r3
 80007ae:	4623      	mov	r3, r4
 80007b0:	71fb      	strb	r3, [r7, #7]
 80007b2:	4603      	mov	r3, r0
 80007b4:	71bb      	strb	r3, [r7, #6]
 80007b6:	460b      	mov	r3, r1
 80007b8:	717b      	strb	r3, [r7, #5]
 80007ba:	4613      	mov	r3, r2
 80007bc:	713b      	strb	r3, [r7, #4]
	LIS3DSH_REG_CTRL_6_T SetReg;
	uint8_t txBuff[1];
	SetReg.boot = boot;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	7b3b      	ldrb	r3, [r7, #12]
 80007c8:	f362 13c7 	bfi	r3, r2, #7, #1
 80007cc:	733b      	strb	r3, [r7, #12]
	SetReg.fifo_en = fifo_en;
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	7b3b      	ldrb	r3, [r7, #12]
 80007d8:	f362 1386 	bfi	r3, r2, #6, #1
 80007dc:	733b      	strb	r3, [r7, #12]
	SetReg.wtm_en = wtm_en;
 80007de:	797b      	ldrb	r3, [r7, #5]
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	7b3b      	ldrb	r3, [r7, #12]
 80007e8:	f362 1345 	bfi	r3, r2, #5, #1
 80007ec:	733b      	strb	r3, [r7, #12]
	SetReg.reg_inc_en = reg_inc_en;
 80007ee:	793b      	ldrb	r3, [r7, #4]
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	7b3b      	ldrb	r3, [r7, #12]
 80007f8:	f362 1304 	bfi	r3, r2, #4, #1
 80007fc:	733b      	strb	r3, [r7, #12]
	SetReg.fifo_empty_int = fifo_empty_int;
 80007fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	b2da      	uxtb	r2, r3
 8000808:	7b3b      	ldrb	r3, [r7, #12]
 800080a:	f362 03c3 	bfi	r3, r2, #3, #1
 800080e:	733b      	strb	r3, [r7, #12]
	SetReg.fifo_wtm_int = fifo_wtm_int;
 8000810:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	b2da      	uxtb	r2, r3
 800081a:	7b3b      	ldrb	r3, [r7, #12]
 800081c:	f362 0382 	bfi	r3, r2, #2, #1
 8000820:	733b      	strb	r3, [r7, #12]
	SetReg.fifo_ovr_int = fifo_ovr_int;
 8000822:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	b2da      	uxtb	r2, r3
 800082c:	7b3b      	ldrb	r3, [r7, #12]
 800082e:	f362 0341 	bfi	r3, r2, #1, #1
 8000832:	733b      	strb	r3, [r7, #12]
	SetReg.bootint = bootint;
 8000834:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	7b3b      	ldrb	r3, [r7, #12]
 8000840:	f362 0300 	bfi	r3, r2, #0, #1
 8000844:	733b      	strb	r3, [r7, #12]
	txBuff[0] = SetReg.CTRL6;
 8000846:	7b3b      	ldrb	r3, [r7, #12]
 8000848:	723b      	strb	r3, [r7, #8]
	return LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL6, txBuff, 2);
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	2202      	movs	r2, #2
 8000850:	4619      	mov	r1, r3
 8000852:	2025      	movs	r0, #37	; 0x25
 8000854:	f7ff fe66 	bl	8000524 <LIS3DSH_Write_Reg>
 8000858:	4603      	mov	r3, r0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	bd90      	pop	{r4, r7, pc}

08000862 <LIS3DSH_AccalometerSoftReset>:

/** \brief
 */
uint8_t LIS3DSH_AccalometerSoftReset(){
 8000862:	b580      	push	{r7, lr}
 8000864:	b084      	sub	sp, #16
 8000866:	af04      	add	r7, sp, #16
	LIS3DSH_Reg_Set_Ctrl3(INT1_DATA_READY_SIGNAL_DISABLE,INT_SIGNAL_ACTIVE_LOW,INT_SIGNAL_LATCH,INT2_DISABLE,INT1_DISABLE,VECTOR_FILT_DISABLE,SOFT_RESET_ENABLE);
 8000868:	2301      	movs	r3, #1
 800086a:	9302      	str	r3, [sp, #8]
 800086c:	2300      	movs	r3, #0
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	2300      	movs	r3, #0
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2300      	movs	r3, #0
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff feb0 	bl	80005e0 <LIS3DSH_Reg_Set_Ctrl3>
}
 8000880:	bf00      	nop
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <LIS3DSH_CTRL_WRITE_DATA_IS_CORRECT>:

/** \brief
 */
uint8_t LIS3DSH_CTRL_WRITE_DATA_IS_CORRECT(uint8_t regAddr, uint8_t *WrittenData){
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	6039      	str	r1, [r7, #0]
 8000892:	71fb      	strb	r3, [r7, #7]
	uint8_t rxBuff[1];
	LIS3DSH_Read_Reg(regAddr, rxBuff,1);
 8000894:	f107 010c 	add.w	r1, r7, #12
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2201      	movs	r2, #1
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe26 	bl	80004ee <LIS3DSH_Read_Reg>
	if(WrittenData[0] == rxBuff[0]){
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	781a      	ldrb	r2, [r3, #0]
 80008a6:	7b3b      	ldrb	r3, [r7, #12]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d101      	bne.n	80008b0 <LIS3DSH_CTRL_WRITE_DATA_IS_CORRECT+0x28>
		return _LIS3DSH_OK;
 80008ac:	2301      	movs	r3, #1
 80008ae:	e000      	b.n	80008b2 <LIS3DSH_CTRL_WRITE_DATA_IS_CORRECT+0x2a>
	}else{
		while(1){
 80008b0:	e7fe      	b.n	80008b0 <LIS3DSH_CTRL_WRITE_DATA_IS_CORRECT+0x28>

		}
	}
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <LIS3DSH_Read_Accmeter_Data>:

/** \brief
 */
uint8_t LIS3DSH_Read_Accmeter_Data(){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t temph[1];
	uint8_t templ[1];

	LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_XH, temph,1);
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2201      	movs	r2, #1
 80008c6:	4619      	mov	r1, r3
 80008c8:	2029      	movs	r0, #41	; 0x29
 80008ca:	f7ff fe10 	bl	80004ee <LIS3DSH_Read_Reg>
	LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_XL, templ,1);
 80008ce:	463b      	mov	r3, r7
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	2028      	movs	r0, #40	; 0x28
 80008d6:	f7ff fe0a 	bl	80004ee <LIS3DSH_Read_Reg>
    results.axis[AXIS_X].raw = (templ[0]<<8);
 80008da:	783b      	ldrb	r3, [r7, #0]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <LIS3DSH_Read_Accmeter_Data+0xac>)
 80008e4:	801a      	strh	r2, [r3, #0]
    results.axis[AXIS_X].raw |= temph[0];
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <LIS3DSH_Read_Accmeter_Data+0xac>)
 80008e8:	881a      	ldrh	r2, [r3, #0]
 80008ea:	793b      	ldrb	r3, [r7, #4]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <LIS3DSH_Read_Accmeter_Data+0xac>)
 80008f4:	801a      	strh	r2, [r3, #0]

    LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_YH, temph,1);
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2201      	movs	r2, #1
 80008fa:	4619      	mov	r1, r3
 80008fc:	202b      	movs	r0, #43	; 0x2b
 80008fe:	f7ff fdf6 	bl	80004ee <LIS3DSH_Read_Reg>
    LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_YL, templ,1);
 8000902:	463b      	mov	r3, r7
 8000904:	2201      	movs	r2, #1
 8000906:	4619      	mov	r1, r3
 8000908:	202a      	movs	r0, #42	; 0x2a
 800090a:	f7ff fdf0 	bl	80004ee <LIS3DSH_Read_Reg>
    results.axis[AXIS_Y].raw = (templ[0]<<8);
 800090e:	783b      	ldrb	r3, [r7, #0]
 8000910:	b29b      	uxth	r3, r3
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	b29a      	uxth	r2, r3
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <LIS3DSH_Read_Accmeter_Data+0xac>)
 8000918:	811a      	strh	r2, [r3, #8]
    results.axis[AXIS_Y].raw |= temph[0];
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <LIS3DSH_Read_Accmeter_Data+0xac>)
 800091c:	891a      	ldrh	r2, [r3, #8]
 800091e:	793b      	ldrb	r3, [r7, #4]
 8000920:	b29b      	uxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <LIS3DSH_Read_Accmeter_Data+0xac>)
 8000928:	811a      	strh	r2, [r3, #8]

    LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_ZH, temph,1);
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2201      	movs	r2, #1
 800092e:	4619      	mov	r1, r3
 8000930:	202d      	movs	r0, #45	; 0x2d
 8000932:	f7ff fddc 	bl	80004ee <LIS3DSH_Read_Reg>
    LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_ZL, templ,1);
 8000936:	463b      	mov	r3, r7
 8000938:	2201      	movs	r2, #1
 800093a:	4619      	mov	r1, r3
 800093c:	202c      	movs	r0, #44	; 0x2c
 800093e:	f7ff fdd6 	bl	80004ee <LIS3DSH_Read_Reg>
    results.axis[AXIS_Z].raw = (templ[0]<<8);
 8000942:	783b      	ldrb	r3, [r7, #0]
 8000944:	b29b      	uxth	r3, r3
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b29a      	uxth	r2, r3
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <LIS3DSH_Read_Accmeter_Data+0xac>)
 800094c:	821a      	strh	r2, [r3, #16]
    results.axis[AXIS_Z].raw |= temph[0];
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <LIS3DSH_Read_Accmeter_Data+0xac>)
 8000950:	8a1a      	ldrh	r2, [r3, #16]
 8000952:	793b      	ldrb	r3, [r7, #4]
 8000954:	b29b      	uxth	r3, r3
 8000956:	4313      	orrs	r3, r2
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b03      	ldr	r3, [pc, #12]	; (8000968 <LIS3DSH_Read_Accmeter_Data+0xac>)
 800095c:	821a      	strh	r2, [r3, #16]
}
 800095e:	bf00      	nop
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000098 	.word	0x20000098

0800096c <LIS3DSH_Read_Temperature_Data>:

/** \brief
 */
uint8_t LIS3DSH_Read_Temperature_Data(){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
	uint8_t tempdataBuff[2];
	LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_TEMPERATURE, tempdataBuff,1);
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2201      	movs	r2, #1
 8000976:	4619      	mov	r1, r3
 8000978:	200c      	movs	r0, #12
 800097a:	f7ff fdb8 	bl	80004ee <LIS3DSH_Read_Reg>
	results.temperature.raw = tempdataBuff[0]<<8;
 800097e:	793b      	ldrb	r3, [r7, #4]
 8000980:	b29b      	uxth	r3, r3
 8000982:	021b      	lsls	r3, r3, #8
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <LIS3DSH_Read_Temperature_Data+0x38>)
 8000988:	831a      	strh	r2, [r3, #24]
	results.temperature.raw |= tempdataBuff[1];
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <LIS3DSH_Read_Temperature_Data+0x38>)
 800098c:	8b1a      	ldrh	r2, [r3, #24]
 800098e:	797b      	ldrb	r3, [r7, #5]
 8000990:	b29b      	uxth	r3, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	b29a      	uxth	r2, r3
 8000996:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <LIS3DSH_Read_Temperature_Data+0x38>)
 8000998:	831a      	strh	r2, [r3, #24]
}
 800099a:	bf00      	nop
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000098 	.word	0x20000098

080009a8 <LIS3DSH_ConvertData>:

/** \brief
 */
uint8_t LIS3DSH_ConvertData(){
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
	uint8_t convertMltply;
    switch(save.scale){
 80009ae:	4b3f      	ldr	r3, [pc, #252]	; (8000aac <LIS3DSH_ConvertData+0x104>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d81b      	bhi.n	80009ee <LIS3DSH_ConvertData+0x46>
 80009b6:	a201      	add	r2, pc, #4	; (adr r2, 80009bc <LIS3DSH_ConvertData+0x14>)
 80009b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009bc:	080009d1 	.word	0x080009d1
 80009c0:	080009d7 	.word	0x080009d7
 80009c4:	080009dd 	.word	0x080009dd
 80009c8:	080009e3 	.word	0x080009e3
 80009cc:	080009e9 	.word	0x080009e9
    case SCALE_SELECT_2G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_2G;
 80009d0:	2306      	movs	r3, #6
 80009d2:	71fb      	strb	r3, [r7, #7]
    break;
 80009d4:	e00b      	b.n	80009ee <LIS3DSH_ConvertData+0x46>
    case SCALE_SELECT_4G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_4G;
 80009d6:	230c      	movs	r3, #12
 80009d8:	71fb      	strb	r3, [r7, #7]
    break;
 80009da:	e008      	b.n	80009ee <LIS3DSH_ConvertData+0x46>
    case SCALE_SELECT_6G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_6G;
 80009dc:	2312      	movs	r3, #18
 80009de:	71fb      	strb	r3, [r7, #7]
    break;
 80009e0:	e005      	b.n	80009ee <LIS3DSH_ConvertData+0x46>
    case SCALE_SELECT_8G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_8G;
 80009e2:	2318      	movs	r3, #24
 80009e4:	71fb      	strb	r3, [r7, #7]
    break;
 80009e6:	e002      	b.n	80009ee <LIS3DSH_ConvertData+0x46>
    case SCALE_SELECT_16G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_16G;
 80009e8:	2349      	movs	r3, #73	; 0x49
 80009ea:	71fb      	strb	r3, [r7, #7]
    break;
 80009ec:	bf00      	nop
    }
    if(results.axis[AXIS_X].raw >= 32767){
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d905      	bls.n	8000a06 <LIS3DSH_ConvertData+0x5e>
    	results.axis[AXIS_X].raw = 65535 - results.axis[AXIS_X].raw;
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	43db      	mvns	r3, r3
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a04:	801a      	strh	r2, [r3, #0]
    }
    if(results.axis[AXIS_Y].raw >= 32767){
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a08:	891b      	ldrh	r3, [r3, #8]
 8000a0a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d905      	bls.n	8000a1e <LIS3DSH_ConvertData+0x76>
        	results.axis[AXIS_Y].raw = 65535 - results.axis[AXIS_Y].raw;
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a14:	891b      	ldrh	r3, [r3, #8]
 8000a16:	43db      	mvns	r3, r3
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a1c:	811a      	strh	r2, [r3, #8]
    }
    if(results.axis[AXIS_Z].raw >= 32767){
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a20:	8a1b      	ldrh	r3, [r3, #16]
 8000a22:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d905      	bls.n	8000a36 <LIS3DSH_ConvertData+0x8e>
        	results.axis[AXIS_Z].raw = 65535 - results.axis[AXIS_Z].raw;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a2c:	8a1b      	ldrh	r3, [r3, #16]
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a34:	821a      	strh	r2, [r3, #16]
    }
    results.axis[AXIS_X].mg = results.axis[AXIS_X].raw * convertMltply;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	fb02 f303 	mul.w	r3, r2, r3
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a46:	605a      	str	r2, [r3, #4]
    results.axis[AXIS_X].mg = results.axis[AXIS_X].mg / _LIS3DSH_CONVERT_DATA_CONST_DIVIDER;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <LIS3DSH_ConvertData+0x10c>)
 8000a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a52:	095b      	lsrs	r3, r3, #5
 8000a54:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a56:	6053      	str	r3, [r2, #4]

    results.axis[AXIS_Y].mg = results.axis[AXIS_Y].raw * convertMltply;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a5a:	891b      	ldrh	r3, [r3, #8]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	fb02 f303 	mul.w	r3, r2, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a68:	60da      	str	r2, [r3, #12]
    results.axis[AXIS_Y].mg = results.axis[AXIS_Y].mg / _LIS3DSH_CONVERT_DATA_CONST_DIVIDER;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <LIS3DSH_ConvertData+0x10c>)
 8000a70:	fba2 2303 	umull	r2, r3, r2, r3
 8000a74:	095b      	lsrs	r3, r3, #5
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a78:	60d3      	str	r3, [r2, #12]

    results.axis[AXIS_Z].mg = results.axis[AXIS_Z].raw * convertMltply;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a7c:	8a1b      	ldrh	r3, [r3, #16]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	fb02 f303 	mul.w	r3, r2, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a8a:	615a      	str	r2, [r3, #20]
    results.axis[AXIS_Z].mg = results.axis[AXIS_Z].mg / _LIS3DSH_CONVERT_DATA_CONST_DIVIDER;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <LIS3DSH_ConvertData+0x10c>)
 8000a92:	fba2 2303 	umull	r2, r3, r2, r3
 8000a96:	095b      	lsrs	r3, r3, #5
 8000a98:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <LIS3DSH_ConvertData+0x108>)
 8000a9a:	6153      	str	r3, [r2, #20]
}
 8000a9c:	bf00      	nop
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	200000b8 	.word	0x200000b8
 8000ab0:	20000098 	.word	0x20000098
 8000ab4:	51eb851f 	.word	0x51eb851f

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fc8f 	bl	80013e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f84b 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 f947 	bl	8000d58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000aca:	f000 f8b1 	bl	8000c30 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ace:	f000 f8dd 	bl	8000c8c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ad2:	f000 f90b 	bl	8000cec <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000ad6:	f007 fe95 	bl	8008804 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2108      	movs	r1, #8
 8000ade:	481e      	ldr	r0, [pc, #120]	; (8000b58 <main+0xa0>)
 8000ae0:	f000 ffe4 	bl	8001aac <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000ae4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae8:	f000 fcec 	bl	80014c4 <HAL_Delay>

  LIS3DSH_Init();
 8000aec:	f7ff fcea 	bl	80004c4 <LIS3DSH_Init>

  LIS3DSH_Reg_Set_Ctrl3(INT1_DATA_READY_SIGNAL_ENABLE, INT_SIGNAL_ACTIVE_HIGH, INT_SIGNAL_PULSE, INT2_DISABLE, INT1_ENABLE, VECTOR_FILT_DISABLE, SOFT_RESET_DISABLE);
 8000af0:	2300      	movs	r3, #0
 8000af2:	9302      	str	r3, [sp, #8]
 8000af4:	2300      	movs	r3, #0
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	2301      	movs	r3, #1
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2300      	movs	r3, #0
 8000afe:	2201      	movs	r2, #1
 8000b00:	2101      	movs	r1, #1
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff fd6c 	bl	80005e0 <LIS3DSH_Reg_Set_Ctrl3>
  LIS3DSH_Reg_Set_Ctrl4(DATARATE_HZ_3,DATA_CONT_UPDATE , AXIS_X_ENABLE, AXIS_Y_ENABLE, AXIS_Z_ENABLE);
 8000b08:	2301      	movs	r3, #1
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2100      	movs	r1, #0
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff fdbc 	bl	8000690 <LIS3DSH_Reg_Set_Ctrl4>
  LIS3DSH_Reg_Set_Ctrl5(ANTIALIASING_FILTER_BANDWIDTH_HZ_800, SCALE_SELECT_8G,NORMAL_MODE , SPI_INTERFACE_4WIRE);
 8000b18:	2300      	movs	r3, #0
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2103      	movs	r1, #3
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f7ff fdfc 	bl	800071c <LIS3DSH_Reg_Set_Ctrl5>
  LIS3DSH_Reg_Set_Ctrl6(BOOT_DISABLE, FIFO_DISABLE, FIFO_WATERMARK_LEVEL_DISABLE, REG_ADDR_AUTO_INCREMENT_DISABLE, FIFO_EMPTY_INDICATION_DISABLE, FIFO_WATERMARK_INT_DISABLE, FIFO_OVERRUN_INT_DISABLE, BOOT_INT_DISABLE);
 8000b24:	2300      	movs	r3, #0
 8000b26:	9303      	str	r3, [sp, #12]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9302      	str	r3, [sp, #8]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	9301      	str	r3, [sp, #4]
 8000b30:	2300      	movs	r3, #0
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2300      	movs	r3, #0
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fe30 	bl	80007a0 <LIS3DSH_Reg_Set_Ctrl6>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000b40:	f007 fe86 	bl	8008850 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
   LIS3DSH_Read_Accmeter_Data();
 8000b44:	f7ff feba 	bl	80008bc <LIS3DSH_Read_Accmeter_Data>
   LIS3DSH_Read_Temperature_Data();
 8000b48:	f7ff ff10 	bl	800096c <LIS3DSH_Read_Temperature_Data>

   LIS3DSH_ConvertData();
 8000b4c:	f7ff ff2c 	bl	80009a8 <LIS3DSH_ConvertData>
   HAL_Delay(10);
 8000b50:	200a      	movs	r0, #10
 8000b52:	f000 fcb7 	bl	80014c4 <HAL_Delay>
    MX_USB_HOST_Process();
 8000b56:	e7f3      	b.n	8000b40 <main+0x88>
 8000b58:	40021000 	.word	0x40021000

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	; 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0320 	add.w	r3, r7, #32
 8000b66:	2230      	movs	r2, #48	; 0x30
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f008 fa0e 	bl	8008f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <SystemClock_Config+0xcc>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	4a27      	ldr	r2, [pc, #156]	; (8000c28 <SystemClock_Config+0xcc>)
 8000b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <SystemClock_Config+0xcc>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <SystemClock_Config+0xd0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <SystemClock_Config+0xd0>)
 8000ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <SystemClock_Config+0xd0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bd0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	4618      	mov	r0, r3
 8000be4:	f003 f96a 	bl	8003ebc <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bee:	f000 f9af 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2105      	movs	r1, #5
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 fbcb 	bl	80043ac <HAL_RCC_ClockConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c1c:	f000 f998 	bl	8000f50 <Error_Handler>
  }
}
 8000c20:	bf00      	nop
 8000c22:	3750      	adds	r7, #80	; 0x50
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40007000 	.word	0x40007000

08000c30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c36:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <MX_I2C1_Init+0x54>)
 8000c38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c3c:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <MX_I2C1_Init+0x58>)
 8000c3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c6e:	f002 fb41 	bl	80032f4 <HAL_I2C_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c78:	f000 f96a 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200000bc 	.word	0x200000bc
 8000c84:	40005400 	.word	0x40005400
 8000c88:	000186a0 	.word	0x000186a0

08000c8c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <MX_I2S3_Init+0x58>)
 8000c94:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c9c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ce8 <MX_I2S3_Init+0x5c>)
 8000cb6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000ccc:	f002 fc56 	bl	800357c <HAL_I2S_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000cd6:	f000 f93b 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000110 	.word	0x20000110
 8000ce4:	40003c00 	.word	0x40003c00
 8000ce8:	00017700 	.word	0x00017700

08000cec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000cf2:	4a18      	ldr	r2, [pc, #96]	; (8000d54 <MX_SPI1_Init+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d20:	2208      	movs	r2, #8
 8000d22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d38:	220a      	movs	r2, #10
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d3e:	f003 fe81 	bl	8004a44 <HAL_SPI_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d48:	f000 f902 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
//  SPI_Init(&SPI_1, 1, CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin);
  /* USER CODE END SPI1_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000158 	.word	0x20000158
 8000d54:	40013000 	.word	0x40013000

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	; 0x30
 8000d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	4b72      	ldr	r3, [pc, #456]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a71      	ldr	r2, [pc, #452]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b6f      	ldr	r3, [pc, #444]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	4b6b      	ldr	r3, [pc, #428]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a6a      	ldr	r2, [pc, #424]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b68      	ldr	r3, [pc, #416]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b64      	ldr	r3, [pc, #400]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a63      	ldr	r2, [pc, #396]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b61      	ldr	r3, [pc, #388]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b5d      	ldr	r3, [pc, #372]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a5c      	ldr	r2, [pc, #368]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b5a      	ldr	r3, [pc, #360]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a55      	ldr	r2, [pc, #340]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b53      	ldr	r3, [pc, #332]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b4f      	ldr	r3, [pc, #316]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a4e      	ldr	r2, [pc, #312]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2108      	movs	r1, #8
 8000e1a:	4849      	ldr	r0, [pc, #292]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000e1c:	f000 fe46 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2101      	movs	r1, #1
 8000e24:	4847      	ldr	r0, [pc, #284]	; (8000f44 <MX_GPIO_Init+0x1ec>)
 8000e26:	f000 fe41 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e30:	4845      	ldr	r0, [pc, #276]	; (8000f48 <MX_GPIO_Init+0x1f0>)
 8000e32:	f000 fe3b 	bl	8001aac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000e36:	2308      	movs	r3, #8
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	483c      	ldr	r0, [pc, #240]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000e4e:	f000 fc91 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4836      	ldr	r0, [pc, #216]	; (8000f44 <MX_GPIO_Init+0x1ec>)
 8000e6a:	f000 fc83 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e6e:	2308      	movs	r3, #8
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	482e      	ldr	r0, [pc, #184]	; (8000f44 <MX_GPIO_Init+0x1ec>)
 8000e8a:	f000 fc73 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	482a      	ldr	r0, [pc, #168]	; (8000f4c <MX_GPIO_Init+0x1f4>)
 8000ea2:	f000 fc67 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eb8:	2305      	movs	r3, #5
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4822      	ldr	r0, [pc, #136]	; (8000f4c <MX_GPIO_Init+0x1f4>)
 8000ec4:	f000 fc56 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ec8:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ecc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4819      	ldr	r0, [pc, #100]	; (8000f48 <MX_GPIO_Init+0x1f0>)
 8000ee2:	f000 fc47 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <MX_GPIO_Init+0x1f0>)
 8000efa:	f000 fc3b 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin;
 8000efe:	2301      	movs	r3, #1
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000f14:	f000 fc2e 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f1c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000f2e:	f000 fc21 	bl	8001774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f32:	bf00      	nop
 8000f34:	3730      	adds	r7, #48	; 0x30
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40020400 	.word	0x40020400

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <SPI_TransmitReceive>:

extern SPI_HandleTypeDef hspi1;
extern SPI_Handle_T SPI_1;


uint8_t SPI_TransmitReceive(uint8_t spiNo,uint8_t *pTxdata, uint8_t *pRxdata, uint8_t Txlenght, uint8_t Rxlenght ){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	461a      	mov	r2, r3
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	73bb      	strb	r3, [r7, #14]
	if(spiNo == SPI_NO1){
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d118      	bne.n	8000fa8 <SPI_TransmitReceive+0x4c>
		SPI_Com_Active(spiNo);
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f81d 	bl	8000fb8 <SPI_Com_Active>
		HAL_SPI_Transmit_IT(&hspi1, pTxdata, Txlenght);
 8000f7e:	7bbb      	ldrb	r3, [r7, #14]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <SPI_TransmitReceive+0x58>)
 8000f88:	f003 fde6 	bl	8004b58 <HAL_SPI_Transmit_IT>

		if(Rxlenght != 0){
 8000f8c:	7e3b      	ldrb	r3, [r7, #24]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d006      	beq.n	8000fa0 <SPI_TransmitReceive+0x44>
		   HAL_SPI_Receive_IT(&hspi1, pRxdata, Rxlenght);
 8000f92:	7e3b      	ldrb	r3, [r7, #24]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <SPI_TransmitReceive+0x58>)
 8000f9c:	f003 fe66 	bl	8004c6c <HAL_SPI_Receive_IT>
		}

		SPI_Com_Deactive(spiNo);
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f81a 	bl	8000fdc <SPI_Com_Deactive>
	}

}
 8000fa8:	bf00      	nop
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000158 	.word	0x20000158

08000fb8 <SPI_Com_Active>:

uint8_t SPI_Com_Active(uint8_t handle){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <SPI_Com_Active+0x20>)
 8000fc8:	f000 fd70 	bl	8001aac <HAL_GPIO_WritePin>
}
 8000fcc:	bf00      	nop
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <SPI_Com_Deactive>:

uint8_t SPI_Com_Deactive(uint8_t handle){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2108      	movs	r1, #8
 8000fea:	4804      	ldr	r0, [pc, #16]	; (8000ffc <SPI_Com_Deactive+0x20>)
 8000fec:	f000 fd5e 	bl	8001aac <HAL_GPIO_WritePin>
}
 8000ff0:	bf00      	nop
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_MspInit+0x4c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a0f      	ldr	r2, [pc, #60]	; (800104c <HAL_MspInit+0x4c>)
 8001010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_MspInit+0x4c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_MspInit+0x4c>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a08      	ldr	r2, [pc, #32]	; (800104c <HAL_MspInit+0x4c>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_MspInit+0x4c>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800103e:	2007      	movs	r0, #7
 8001040:	f000 fb34 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800

08001050 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <HAL_I2C_MspInit+0x84>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d12c      	bne.n	80010cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_I2C_MspInit+0x88>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <HAL_I2C_MspInit+0x88>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_I2C_MspInit+0x88>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800108e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001094:	2312      	movs	r3, #18
 8001096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001098:	2301      	movs	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a0:	2304      	movs	r3, #4
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <HAL_I2C_MspInit+0x8c>)
 80010ac:	f000 fb62 	bl	8001774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_I2C_MspInit+0x88>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_I2C_MspInit+0x88>)
 80010ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010be:	6413      	str	r3, [r2, #64]	; 0x40
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_I2C_MspInit+0x88>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40005400 	.word	0x40005400
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020400 	.word	0x40020400

080010e0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	; 0x38
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a31      	ldr	r2, [pc, #196]	; (80011d0 <HAL_I2S_MspInit+0xf0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d15a      	bne.n	80011c6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001110:	2301      	movs	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001114:	23c0      	movs	r3, #192	; 0xc0
 8001116:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001118:	2302      	movs	r3, #2
 800111a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fb4f 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800112c:	f7ff ff10 	bl	8000f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 800113a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113e:	6413      	str	r3, [r2, #64]	; 0x40
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	6313      	str	r3, [r2, #48]	; 0x30
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001184:	2310      	movs	r3, #16
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001194:	2306      	movs	r3, #6
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	480e      	ldr	r0, [pc, #56]	; (80011d8 <HAL_I2S_MspInit+0xf8>)
 80011a0:	f000 fae8 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011a4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011b6:	2306      	movs	r3, #6
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	4806      	ldr	r0, [pc, #24]	; (80011dc <HAL_I2S_MspInit+0xfc>)
 80011c2:	f000 fad7 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011c6:	bf00      	nop
 80011c8:	3738      	adds	r7, #56	; 0x38
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40003c00 	.word	0x40003c00
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020800 	.word	0x40020800

080011e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <HAL_SPI_MspInit+0x94>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d133      	bne.n	800126a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <HAL_SPI_MspInit+0x98>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <HAL_SPI_MspInit+0x98>)
 800120c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_SPI_MspInit+0x98>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_SPI_MspInit+0x98>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a14      	ldr	r2, [pc, #80]	; (8001278 <HAL_SPI_MspInit+0x98>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_SPI_MspInit+0x98>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800123a:	23e0      	movs	r3, #224	; 0xe0
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800124a:	2305      	movs	r3, #5
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <HAL_SPI_MspInit+0x9c>)
 8001256:	f000 fa8d 	bl	8001774 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	2023      	movs	r0, #35	; 0x23
 8001260:	f000 fa2f 	bl	80016c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001264:	2023      	movs	r0, #35	; 0x23
 8001266:	f000 fa48 	bl	80016fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40013000 	.word	0x40013000
 8001278:	40023800 	.word	0x40023800
 800127c:	40020000 	.word	0x40020000

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <NMI_Handler+0x4>

08001286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <MemManage_Handler+0x4>

08001292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <BusFault_Handler+0x4>

08001298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <UsageFault_Handler+0x4>

0800129e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012cc:	f000 f8da 	bl	8001484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <SPI1_IRQHandler+0x10>)
 80012da:	f003 fdf9 	bl	8004ed0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000158 	.word	0x20000158

080012e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <OTG_FS_IRQHandler+0x10>)
 80012ee:	f000 fe61 	bl	8001fb4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000594 	.word	0x20000594

080012fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001304:	4a14      	ldr	r2, [pc, #80]	; (8001358 <_sbrk+0x5c>)
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <_sbrk+0x60>)
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <_sbrk+0x64>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <_sbrk+0x68>)
 800131c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	429a      	cmp	r2, r3
 800132a:	d207      	bcs.n	800133c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800132c:	f007 fe46 	bl	8008fbc <__errno>
 8001330:	4603      	mov	r3, r0
 8001332:	220c      	movs	r2, #12
 8001334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	e009      	b.n	8001350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <_sbrk+0x64>)
 800134c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20020000 	.word	0x20020000
 800135c:	00000400 	.word	0x00000400
 8001360:	200001b0 	.word	0x200001b0
 8001364:	200009e0 	.word	0x200009e0

08001368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <SystemInit+0x20>)
 800136e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <SystemInit+0x20>)
 8001374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <Reset_Handler>:
 800138c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c4 <LoopFillZerobss+0x12>
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <LoopFillZerobss+0x16>)
 8001392:	490e      	ldr	r1, [pc, #56]	; (80013cc <LoopFillZerobss+0x1a>)
 8001394:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <LoopFillZerobss+0x1e>)
 8001396:	2300      	movs	r3, #0
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:
 800139a:	58d4      	ldr	r4, [r2, r3]
 800139c:	50c4      	str	r4, [r0, r3]
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:
 80013a0:	18c4      	adds	r4, r0, r3
 80013a2:	428c      	cmp	r4, r1
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>
 80013a6:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <LoopFillZerobss+0x22>)
 80013a8:	4c0b      	ldr	r4, [pc, #44]	; (80013d8 <LoopFillZerobss+0x26>)
 80013aa:	2300      	movs	r3, #0
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:
 80013b2:	42a2      	cmp	r2, r4
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>
 80013b6:	f7ff ffd7 	bl	8001368 <SystemInit>
 80013ba:	f007 fe05 	bl	8008fc8 <__libc_init_array>
 80013be:	f7ff fb7b 	bl	8000ab8 <main>
 80013c2:	4770      	bx	lr
 80013c4:	20020000 	.word	0x20020000
 80013c8:	20000000 	.word	0x20000000
 80013cc:	2000007c 	.word	0x2000007c
 80013d0:	080090f0 	.word	0x080090f0
 80013d4:	2000007c 	.word	0x2000007c
 80013d8:	200009e0 	.word	0x200009e0

080013dc <ADC_IRQHandler>:
 80013dc:	e7fe      	b.n	80013dc <ADC_IRQHandler>
	...

080013e0 <HAL_Init>:
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <HAL_Init+0x40>)
 80013ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_Init+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_Init+0x40>)
 80013f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <HAL_Init+0x40>)
 8001402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f94f 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>
 800140e:	2000      	movs	r0, #0
 8001410:	f000 f808 	bl	8001424 <HAL_InitTick>
 8001414:	f7ff fdf4 	bl	8001000 <HAL_MspInit>
 8001418:	2300      	movs	r3, #0
 800141a:	4618      	mov	r0, r3
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023c00 	.word	0x40023c00

08001424 <HAL_InitTick>:
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0x54>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_InitTick+0x58>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143a:	fbb3 f3f1 	udiv	r3, r3, r1
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f967 	bl	8001716 <HAL_SYSTICK_Config>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_InitTick+0x2e>
 800144e:	2301      	movs	r3, #1
 8001450:	e00e      	b.n	8001470 <HAL_InitTick+0x4c>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d80a      	bhi.n	800146e <HAL_InitTick+0x4a>
 8001458:	2200      	movs	r2, #0
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f000 f92f 	bl	80016c2 <HAL_NVIC_SetPriority>
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <HAL_InitTick+0x5c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0x4c>
 800146e:	2301      	movs	r3, #1
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000000 	.word	0x20000000
 800147c:	20000008 	.word	0x20000008
 8001480:	20000004 	.word	0x20000004

08001484 <HAL_IncTick>:
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x20>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_IncTick+0x24>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_IncTick+0x24>)
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000008 	.word	0x20000008
 80014a8:	200001b4 	.word	0x200001b4

080014ac <HAL_GetTick>:
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_GetTick+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	200001b4 	.word	0x200001b4

080014c4 <HAL_Delay>:
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	f7ff ffee 	bl	80014ac <HAL_GetTick>
 80014d0:	60b8      	str	r0, [r7, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014dc:	d005      	beq.n	80014ea <HAL_Delay+0x26>
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_Delay+0x44>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	bf00      	nop
 80014ec:	f7ff ffde 	bl	80014ac <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d8f7      	bhi.n	80014ec <HAL_Delay+0x28>
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000008 	.word	0x20000008

0800150c <__NVIC_SetPriorityGrouping>:
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001528:	4013      	ands	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	021a      	lsls	r2, r3, #8
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4313      	orrs	r3, r2
 8001534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4a04      	ldr	r2, [pc, #16]	; (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	60d3      	str	r3, [r2, #12]
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_GetPriorityGrouping>:
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <__NVIC_GetPriorityGrouping+0x18>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_EnableIRQ>:
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db0b      	blt.n	800159a <__NVIC_EnableIRQ+0x2a>
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	f003 021f 	and.w	r2, r3, #31
 8001588:	4907      	ldr	r1, [pc, #28]	; (80015a8 <__NVIC_EnableIRQ+0x38>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	2001      	movs	r0, #1
 8001592:	fa00 f202 	lsl.w	r2, r0, r2
 8001596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e100 	.word	0xe000e100

080015ac <__NVIC_SetPriority>:
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db0a      	blt.n	80015d6 <__NVIC_SetPriority+0x2a>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <__NVIC_SetPriority+0x4c>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	0112      	lsls	r2, r2, #4
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	440b      	add	r3, r1
 80015d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80015d4:	e00a      	b.n	80015ec <__NVIC_SetPriority+0x40>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4908      	ldr	r1, [pc, #32]	; (80015fc <__NVIC_SetPriority+0x50>)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	3b04      	subs	r3, #4
 80015e4:	0112      	lsls	r2, r2, #4
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	440b      	add	r3, r1
 80015ea:	761a      	strb	r2, [r3, #24]
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000e100 	.word	0xe000e100
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <NVIC_EncodePriority>:
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f1c3 0307 	rsb	r3, r3, #7
 800161a:	2b04      	cmp	r3, #4
 800161c:	bf28      	it	cs
 800161e:	2304      	movcs	r3, #4
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3304      	adds	r3, #4
 8001626:	2b06      	cmp	r3, #6
 8001628:	d902      	bls.n	8001630 <NVIC_EncodePriority+0x30>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3b03      	subs	r3, #3
 800162e:	e000      	b.n	8001632 <NVIC_EncodePriority+0x32>
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	f04f 32ff 	mov.w	r2, #4294967295
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	401a      	ands	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	409a      	lsls	r2, r3
 8001648:	f04f 31ff 	mov.w	r1, #4294967295
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	43d9      	mvns	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	400b      	ands	r3, r1
 8001658:	4313      	orrs	r3, r2
 800165a:	4618      	mov	r0, r3
 800165c:	3724      	adds	r7, #36	; 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <SysTick_Config>:
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ff8e 	bl	80015ac <__NVIC_SetPriority>
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <HAL_NVIC_SetPriorityGrouping>:
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff29 	bl	800150c <__NVIC_SetPriorityGrouping>
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_SetPriority>:
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	f7ff ff3e 	bl	8001554 <__NVIC_GetPriorityGrouping>
 80016d8:	6178      	str	r0, [r7, #20]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	6978      	ldr	r0, [r7, #20]
 80016e0:	f7ff ff8e 	bl	8001600 <NVIC_EncodePriority>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff5d 	bl	80015ac <__NVIC_SetPriority>
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_EnableIRQ>:
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff31 	bl	8001570 <__NVIC_EnableIRQ>
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_SYSTICK_Config>:
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffa2 	bl	8001668 <SysTick_Config>
 8001724:	4603      	mov	r3, r0
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_DMA_Abort_IT>:
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d004      	beq.n	800174c <HAL_DMA_Abort_IT+0x1e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2280      	movs	r2, #128	; 0x80
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
 8001748:	2301      	movs	r3, #1
 800174a:	e00c      	b.n	8001766 <HAL_DMA_Abort_IT+0x38>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2205      	movs	r2, #5
 8001750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	2300      	movs	r3, #0
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <HAL_GPIO_Init>:
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	e16b      	b.n	8001a68 <HAL_GPIO_Init+0x2f4>
 8001790:	2201      	movs	r2, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 815a 	bne.w	8001a62 <HAL_GPIO_Init+0x2ee>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d005      	beq.n	80017c6 <HAL_GPIO_Init+0x52>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d130      	bne.n	8001828 <HAL_GPIO_Init+0xb4>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 0201 	and.w	r2, r3, #1
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b03      	cmp	r3, #3
 8001832:	d017      	beq.n	8001864 <HAL_GPIO_Init+0xf0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2203      	movs	r2, #3
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d123      	bne.n	80018b8 <HAL_GPIO_Init+0x144>
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	08da      	lsrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3208      	adds	r2, #8
 8001878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	08da      	lsrs	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3208      	adds	r2, #8
 80018b2:	69b9      	ldr	r1, [r7, #24]
 80018b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0203 	and.w	r2, r3, #3
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80b4 	beq.w	8001a62 <HAL_GPIO_Init+0x2ee>
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b60      	ldr	r3, [pc, #384]	; (8001a80 <HAL_GPIO_Init+0x30c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a5f      	ldr	r2, [pc, #380]	; (8001a80 <HAL_GPIO_Init+0x30c>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b5d      	ldr	r3, [pc, #372]	; (8001a80 <HAL_GPIO_Init+0x30c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4a5b      	ldr	r2, [pc, #364]	; (8001a84 <HAL_GPIO_Init+0x310>)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a52      	ldr	r2, [pc, #328]	; (8001a88 <HAL_GPIO_Init+0x314>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d02b      	beq.n	800199a <HAL_GPIO_Init+0x226>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a51      	ldr	r2, [pc, #324]	; (8001a8c <HAL_GPIO_Init+0x318>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d025      	beq.n	8001996 <HAL_GPIO_Init+0x222>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a50      	ldr	r2, [pc, #320]	; (8001a90 <HAL_GPIO_Init+0x31c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d01f      	beq.n	8001992 <HAL_GPIO_Init+0x21e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4f      	ldr	r2, [pc, #316]	; (8001a94 <HAL_GPIO_Init+0x320>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d019      	beq.n	800198e <HAL_GPIO_Init+0x21a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4e      	ldr	r2, [pc, #312]	; (8001a98 <HAL_GPIO_Init+0x324>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d013      	beq.n	800198a <HAL_GPIO_Init+0x216>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4d      	ldr	r2, [pc, #308]	; (8001a9c <HAL_GPIO_Init+0x328>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00d      	beq.n	8001986 <HAL_GPIO_Init+0x212>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4c      	ldr	r2, [pc, #304]	; (8001aa0 <HAL_GPIO_Init+0x32c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d007      	beq.n	8001982 <HAL_GPIO_Init+0x20e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4b      	ldr	r2, [pc, #300]	; (8001aa4 <HAL_GPIO_Init+0x330>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d101      	bne.n	800197e <HAL_GPIO_Init+0x20a>
 800197a:	2307      	movs	r3, #7
 800197c:	e00e      	b.n	800199c <HAL_GPIO_Init+0x228>
 800197e:	2308      	movs	r3, #8
 8001980:	e00c      	b.n	800199c <HAL_GPIO_Init+0x228>
 8001982:	2306      	movs	r3, #6
 8001984:	e00a      	b.n	800199c <HAL_GPIO_Init+0x228>
 8001986:	2305      	movs	r3, #5
 8001988:	e008      	b.n	800199c <HAL_GPIO_Init+0x228>
 800198a:	2304      	movs	r3, #4
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x228>
 800198e:	2303      	movs	r3, #3
 8001990:	e004      	b.n	800199c <HAL_GPIO_Init+0x228>
 8001992:	2302      	movs	r3, #2
 8001994:	e002      	b.n	800199c <HAL_GPIO_Init+0x228>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_GPIO_Init+0x228>
 800199a:	2300      	movs	r3, #0
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	f002 0203 	and.w	r2, r2, #3
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	4093      	lsls	r3, r2
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	4935      	ldr	r1, [pc, #212]	; (8001a84 <HAL_GPIO_Init+0x310>)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80019ba:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x26a>
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	4a32      	ldr	r2, [pc, #200]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6093      	str	r3, [r2, #8]
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x294>
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
 8001a08:	4a27      	ldr	r2, [pc, #156]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	60d3      	str	r3, [r2, #12]
 8001a0e:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	61bb      	str	r3, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x2be>
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	4a1d      	ldr	r2, [pc, #116]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6053      	str	r3, [r2, #4]
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x2e8>
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3301      	adds	r3, #1
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	2b0f      	cmp	r3, #15
 8001a6c:	f67f ae90 	bls.w	8001790 <HAL_GPIO_Init+0x1c>
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40013800 	.word	0x40013800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40021400 	.word	0x40021400
 8001aa0:	40021800 	.word	0x40021800
 8001aa4:	40021c00 	.word	0x40021c00
 8001aa8:	40013c00 	.word	0x40013c00

08001aac <HAL_GPIO_WritePin>:
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	707b      	strb	r3, [r7, #1]
 8001abc:	787b      	ldrb	r3, [r7, #1]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_WritePin+0x1e>
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	619a      	str	r2, [r3, #24]
 8001ac8:	e003      	b.n	8001ad2 <HAL_GPIO_WritePin+0x26>
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	041a      	lsls	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	619a      	str	r2, [r3, #24]
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_HCD_Init>:
 8001ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae0:	b08f      	sub	sp, #60	; 0x3c
 8001ae2:	af0a      	add	r7, sp, #40	; 0x28
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_HCD_Init+0x12>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e054      	b.n	8001b9a <HAL_HCD_Init+0xbc>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_HCD_Init+0x32>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f006 fed8 	bl	80088c0 <HAL_HCD_MspInit>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2203      	movs	r2, #3
 8001b14:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <HAL_HCD_Init+0x4c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 ff04 	bl	800593c <USB_DisableGlobalInt>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	687e      	ldr	r6, [r7, #4]
 8001b3c:	466d      	mov	r5, sp
 8001b3e:	f106 0410 	add.w	r4, r6, #16
 8001b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b52:	1d33      	adds	r3, r6, #4
 8001b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b56:	6838      	ldr	r0, [r7, #0]
 8001b58:	f003 fe7e 	bl	8005858 <USB_CoreInit>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2101      	movs	r1, #1
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fefb 	bl	800595e <USB_SetCurrentMode>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	687e      	ldr	r6, [r7, #4]
 8001b70:	466d      	mov	r5, sp
 8001b72:	f106 0410 	add.w	r4, r6, #16
 8001b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b86:	1d33      	adds	r3, r6, #4
 8001b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b8a:	6838      	ldr	r0, [r7, #0]
 8001b8c:	f004 f884 	bl	8005c98 <USB_HostInit>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 8001b98:	2300      	movs	r3, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ba2 <HAL_HCD_HC_Init>:
 8001ba2:	b590      	push	{r4, r7, lr}
 8001ba4:	b089      	sub	sp, #36	; 0x24
 8001ba6:	af04      	add	r7, sp, #16
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	4608      	mov	r0, r1
 8001bac:	4611      	mov	r1, r2
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	70fb      	strb	r3, [r7, #3]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	70bb      	strb	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_HCD_HC_Init+0x28>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e076      	b.n	8001cb8 <HAL_HCD_HC_Init+0x116>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	212c      	movs	r1, #44	; 0x2c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	333d      	adds	r3, #61	; 0x3d
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	212c      	movs	r1, #44	; 0x2c
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	3338      	adds	r3, #56	; 0x38
 8001bf2:	787a      	ldrb	r2, [r7, #1]
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	212c      	movs	r1, #44	; 0x2c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	3340      	adds	r3, #64	; 0x40
 8001c04:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c06:	801a      	strh	r2, [r3, #0]
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	212c      	movs	r1, #44	; 0x2c
 8001c0e:	fb01 f303 	mul.w	r3, r1, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	3339      	adds	r3, #57	; 0x39
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	701a      	strb	r2, [r3, #0]
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	212c      	movs	r1, #44	; 0x2c
 8001c20:	fb01 f303 	mul.w	r3, r1, r3
 8001c24:	4413      	add	r3, r2
 8001c26:	333f      	adds	r3, #63	; 0x3f
 8001c28:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	78ba      	ldrb	r2, [r7, #2]
 8001c32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c36:	b2d0      	uxtb	r0, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	212c      	movs	r1, #44	; 0x2c
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	333a      	adds	r3, #58	; 0x3a
 8001c44:	4602      	mov	r2, r0
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	da09      	bge.n	8001c64 <HAL_HCD_HC_Init+0xc2>
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	212c      	movs	r1, #44	; 0x2c
 8001c56:	fb01 f303 	mul.w	r3, r1, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	333b      	adds	r3, #59	; 0x3b
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e008      	b.n	8001c76 <HAL_HCD_HC_Init+0xd4>
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	333b      	adds	r3, #59	; 0x3b
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	212c      	movs	r1, #44	; 0x2c
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	333c      	adds	r3, #60	; 0x3c
 8001c84:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	787c      	ldrb	r4, [r7, #1]
 8001c90:	78ba      	ldrb	r2, [r7, #2]
 8001c92:	78f9      	ldrb	r1, [r7, #3]
 8001c94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c96:	9302      	str	r3, [sp, #8]
 8001c98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	f004 f97d 	bl	8005fa4 <USB_HC_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd90      	pop	{r4, r7, pc}

08001cc0 <HAL_HCD_HC_Halt>:
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70fb      	strb	r3, [r7, #3]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_HCD_HC_Halt+0x1e>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e00f      	b.n	8001cfe <HAL_HCD_HC_Halt+0x3e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	78fa      	ldrb	r2, [r7, #3]
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f004 fbcd 	bl	800648e <USB_HC_Halt>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_HCD_HC_SubmitRequest>:
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	4608      	mov	r0, r1
 8001d12:	4611      	mov	r1, r2
 8001d14:	461a      	mov	r2, r3
 8001d16:	4603      	mov	r3, r0
 8001d18:	70fb      	strb	r3, [r7, #3]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	70bb      	strb	r3, [r7, #2]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	707b      	strb	r3, [r7, #1]
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	212c      	movs	r1, #44	; 0x2c
 8001d28:	fb01 f303 	mul.w	r3, r1, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	333b      	adds	r3, #59	; 0x3b
 8001d30:	78ba      	ldrb	r2, [r7, #2]
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	212c      	movs	r1, #44	; 0x2c
 8001d3a:	fb01 f303 	mul.w	r3, r1, r3
 8001d3e:	4413      	add	r3, r2
 8001d40:	333f      	adds	r3, #63	; 0x3f
 8001d42:	787a      	ldrb	r2, [r7, #1]
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	7c3b      	ldrb	r3, [r7, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d112      	bne.n	8001d72 <HAL_HCD_HC_SubmitRequest+0x6a>
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	3342      	adds	r3, #66	; 0x42
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	701a      	strb	r2, [r3, #0]
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	333d      	adds	r3, #61	; 0x3d
 8001d6c:	7f3a      	ldrb	r2, [r7, #28]
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	e008      	b.n	8001d84 <HAL_HCD_HC_SubmitRequest+0x7c>
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3342      	adds	r3, #66	; 0x42
 8001d80:	2202      	movs	r2, #2
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	f200 80c6 	bhi.w	8001f18 <HAL_HCD_HC_SubmitRequest+0x210>
 8001d8c:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d92:	bf00      	nop
 8001d94:	08001da5 	.word	0x08001da5
 8001d98:	08001f05 	.word	0x08001f05
 8001d9c:	08001e09 	.word	0x08001e09
 8001da0:	08001e87 	.word	0x08001e87
 8001da4:	7c3b      	ldrb	r3, [r7, #16]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	f040 80b8 	bne.w	8001f1c <HAL_HCD_HC_SubmitRequest+0x214>
 8001dac:	78bb      	ldrb	r3, [r7, #2]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f040 80b4 	bne.w	8001f1c <HAL_HCD_HC_SubmitRequest+0x214>
 8001db4:	8b3b      	ldrh	r3, [r7, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d108      	bne.n	8001dcc <HAL_HCD_HC_SubmitRequest+0xc4>
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3355      	adds	r3, #85	; 0x55
 8001dc8:	2201      	movs	r2, #1
 8001dca:	701a      	strb	r2, [r3, #0]
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	212c      	movs	r1, #44	; 0x2c
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3355      	adds	r3, #85	; 0x55
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <HAL_HCD_HC_SubmitRequest+0xec>
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	212c      	movs	r1, #44	; 0x2c
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	3342      	adds	r3, #66	; 0x42
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
 8001df2:	e093      	b.n	8001f1c <HAL_HCD_HC_SubmitRequest+0x214>
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	212c      	movs	r1, #44	; 0x2c
 8001dfa:	fb01 f303 	mul.w	r3, r1, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	3342      	adds	r3, #66	; 0x42
 8001e02:	2202      	movs	r2, #2
 8001e04:	701a      	strb	r2, [r3, #0]
 8001e06:	e089      	b.n	8001f1c <HAL_HCD_HC_SubmitRequest+0x214>
 8001e08:	78bb      	ldrb	r3, [r7, #2]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d11d      	bne.n	8001e4a <HAL_HCD_HC_SubmitRequest+0x142>
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	212c      	movs	r1, #44	; 0x2c
 8001e14:	fb01 f303 	mul.w	r3, r1, r3
 8001e18:	4413      	add	r3, r2
 8001e1a:	3355      	adds	r3, #85	; 0x55
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_HCD_HC_SubmitRequest+0x12e>
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	212c      	movs	r1, #44	; 0x2c
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3342      	adds	r3, #66	; 0x42
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
 8001e34:	e073      	b.n	8001f1e <HAL_HCD_HC_SubmitRequest+0x216>
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	212c      	movs	r1, #44	; 0x2c
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	3342      	adds	r3, #66	; 0x42
 8001e44:	2202      	movs	r2, #2
 8001e46:	701a      	strb	r2, [r3, #0]
 8001e48:	e069      	b.n	8001f1e <HAL_HCD_HC_SubmitRequest+0x216>
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	212c      	movs	r1, #44	; 0x2c
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	3354      	adds	r3, #84	; 0x54
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_HCD_HC_SubmitRequest+0x16a>
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	212c      	movs	r1, #44	; 0x2c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3342      	adds	r3, #66	; 0x42
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
 8001e70:	e055      	b.n	8001f1e <HAL_HCD_HC_SubmitRequest+0x216>
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	212c      	movs	r1, #44	; 0x2c
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3342      	adds	r3, #66	; 0x42
 8001e80:	2202      	movs	r2, #2
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	e04b      	b.n	8001f1e <HAL_HCD_HC_SubmitRequest+0x216>
 8001e86:	78bb      	ldrb	r3, [r7, #2]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d11d      	bne.n	8001ec8 <HAL_HCD_HC_SubmitRequest+0x1c0>
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	212c      	movs	r1, #44	; 0x2c
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	3355      	adds	r3, #85	; 0x55
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <HAL_HCD_HC_SubmitRequest+0x1ac>
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	212c      	movs	r1, #44	; 0x2c
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	3342      	adds	r3, #66	; 0x42
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e034      	b.n	8001f1e <HAL_HCD_HC_SubmitRequest+0x216>
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	212c      	movs	r1, #44	; 0x2c
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3342      	adds	r3, #66	; 0x42
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	e02a      	b.n	8001f1e <HAL_HCD_HC_SubmitRequest+0x216>
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	212c      	movs	r1, #44	; 0x2c
 8001ece:	fb01 f303 	mul.w	r3, r1, r3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3354      	adds	r3, #84	; 0x54
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_HCD_HC_SubmitRequest+0x1e8>
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	212c      	movs	r1, #44	; 0x2c
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3342      	adds	r3, #66	; 0x42
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	e016      	b.n	8001f1e <HAL_HCD_HC_SubmitRequest+0x216>
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	212c      	movs	r1, #44	; 0x2c
 8001ef6:	fb01 f303 	mul.w	r3, r1, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	3342      	adds	r3, #66	; 0x42
 8001efe:	2202      	movs	r2, #2
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e00c      	b.n	8001f1e <HAL_HCD_HC_SubmitRequest+0x216>
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	212c      	movs	r1, #44	; 0x2c
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	3342      	adds	r3, #66	; 0x42
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
 8001f16:	e002      	b.n	8001f1e <HAL_HCD_HC_SubmitRequest+0x216>
 8001f18:	bf00      	nop
 8001f1a:	e000      	b.n	8001f1e <HAL_HCD_HC_SubmitRequest+0x216>
 8001f1c:	bf00      	nop
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	212c      	movs	r1, #44	; 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	3344      	adds	r3, #68	; 0x44
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	8b3a      	ldrh	r2, [r7, #24]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	202c      	movs	r0, #44	; 0x2c
 8001f38:	fb00 f303 	mul.w	r3, r0, r3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	334c      	adds	r3, #76	; 0x4c
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3360      	adds	r3, #96	; 0x60
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	212c      	movs	r1, #44	; 0x2c
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	3350      	adds	r3, #80	; 0x50
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	212c      	movs	r1, #44	; 0x2c
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	3339      	adds	r3, #57	; 0x39
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	212c      	movs	r1, #44	; 0x2c
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	3361      	adds	r3, #97	; 0x61
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	222c      	movs	r2, #44	; 0x2c
 8001f92:	fb02 f303 	mul.w	r3, r2, r3
 8001f96:	3338      	adds	r3, #56	; 0x38
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	18d1      	adds	r1, r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f004 f920 	bl	80061e8 <USB_HC_StartXfer>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop

08001fb4 <HAL_HCD_IRQHandler>:
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 fe21 	bl	8005c12 <USB_GetMode>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	f040 80f6 	bne.w	80021c4 <HAL_HCD_IRQHandler+0x210>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fe05 	bl	8005bec <USB_ReadInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80ec 	beq.w	80021c2 <HAL_HCD_IRQHandler+0x20e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fdfc 	bl	8005bec <USB_ReadInterrupts>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ffe:	d104      	bne.n	800200a <HAL_HCD_IRQHandler+0x56>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002008:	615a      	str	r2, [r3, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f003 fdec 	bl	8005bec <USB_ReadInterrupts>
 8002014:	4603      	mov	r3, r0
 8002016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800201a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800201e:	d104      	bne.n	800202a <HAL_HCD_IRQHandler+0x76>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002028:	615a      	str	r2, [r3, #20]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fddc 	bl	8005bec <USB_ReadInterrupts>
 8002034:	4603      	mov	r3, r0
 8002036:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800203a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800203e:	d104      	bne.n	800204a <HAL_HCD_IRQHandler+0x96>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002048:	615a      	str	r2, [r3, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f003 fdcc 	bl	8005bec <USB_ReadInterrupts>
 8002054:	4603      	mov	r3, r0
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b02      	cmp	r3, #2
 800205c:	d103      	bne.n	8002066 <HAL_HCD_IRQHandler+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2202      	movs	r2, #2
 8002064:	615a      	str	r2, [r3, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f003 fdbe 	bl	8005bec <USB_ReadInterrupts>
 8002070:	4603      	mov	r3, r0
 8002072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800207a:	d11c      	bne.n	80020b6 <HAL_HCD_IRQHandler+0x102>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002084:	615a      	str	r2, [r3, #20]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10f      	bne.n	80020b6 <HAL_HCD_IRQHandler+0x102>
 8002096:	2110      	movs	r1, #16
 8002098:	6938      	ldr	r0, [r7, #16]
 800209a:	f003 fcad 	bl	80059f8 <USB_FlushTxFifo>
 800209e:	6938      	ldr	r0, [r7, #16]
 80020a0:	f003 fcde 	bl	8005a60 <USB_FlushRxFifo>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2101      	movs	r1, #1
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 feb4 	bl	8005e18 <USB_InitFSLSPClkSel>
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f006 fc83 	bl	80089bc <HAL_HCD_Disconnect_Callback>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 fd96 	bl	8005bec <USB_ReadInterrupts>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ca:	d102      	bne.n	80020d2 <HAL_HCD_IRQHandler+0x11e>
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f001 f89e 	bl	800320e <HCD_Port_IRQHandler>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 fd88 	bl	8005bec <USB_ReadInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d106      	bne.n	80020f4 <HAL_HCD_IRQHandler+0x140>
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f006 fc4c 	bl	8008984 <HAL_HCD_SOF_Callback>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2208      	movs	r2, #8
 80020f2:	615a      	str	r2, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f003 fd77 	bl	8005bec <USB_ReadInterrupts>
 80020fe:	4603      	mov	r3, r0
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b10      	cmp	r3, #16
 8002106:	d101      	bne.n	800210c <HAL_HCD_IRQHandler+0x158>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <HAL_HCD_IRQHandler+0x15a>
 800210c:	2300      	movs	r3, #0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d012      	beq.n	8002138 <HAL_HCD_IRQHandler+0x184>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699a      	ldr	r2, [r3, #24]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0210 	bic.w	r2, r2, #16
 8002120:	619a      	str	r2, [r3, #24]
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 ffa1 	bl	800306a <HCD_RXQLVL_IRQHandler>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0210 	orr.w	r2, r2, #16
 8002136:	619a      	str	r2, [r3, #24]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f003 fd55 	bl	8005bec <USB_ReadInterrupts>
 8002142:	4603      	mov	r3, r0
 8002144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800214c:	d13a      	bne.n	80021c4 <HAL_HCD_IRQHandler+0x210>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f004 f98a 	bl	800646c <USB_HC_ReadInterrupt>
 8002158:	60b8      	str	r0, [r7, #8]
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e025      	b.n	80021ac <HAL_HCD_IRQHandler+0x1f8>
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d018      	beq.n	80021a6 <HAL_HCD_IRQHandler+0x1f2>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800218a:	d106      	bne.n	800219a <HAL_HCD_IRQHandler+0x1e6>
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	4619      	mov	r1, r3
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f8ab 	bl	80022ee <HCD_HC_IN_IRQHandler>
 8002198:	e005      	b.n	80021a6 <HAL_HCD_IRQHandler+0x1f2>
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	4619      	mov	r1, r3
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fbf9 	bl	8002998 <HCD_HC_OUT_IRQHandler>
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d3d4      	bcc.n	8002160 <HAL_HCD_IRQHandler+0x1ac>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021be:	615a      	str	r2, [r3, #20]
 80021c0:	e000      	b.n	80021c4 <HAL_HCD_IRQHandler+0x210>
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_HCD_Start>:
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_HCD_Start+0x16>
 80021dc:	2302      	movs	r3, #2
 80021de:	e013      	b.n	8002208 <HAL_HCD_Start+0x3e>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2101      	movs	r1, #1
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fe76 	bl	8005ee0 <USB_DriveVbus>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 fb8e 	bl	800591a <USB_EnableGlobalInt>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8002206:	2300      	movs	r3, #0
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_HCD_Stop>:
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_HCD_Stop+0x16>
 8002222:	2302      	movs	r3, #2
 8002224:	e00d      	b.n	8002242 <HAL_HCD_Stop+0x32>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f004 fa64 	bl	8006700 <USB_StopHost>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8002240:	2300      	movs	r3, #0
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_HCD_ResetPort>:
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f003 fe18 	bl	8005e8c <USB_ResetPort>
 800225c:	4603      	mov	r3, r0
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_HCD_HC_GetURBState>:
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	70fb      	strb	r3, [r7, #3]
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	3360      	adds	r3, #96	; 0x60
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_HCD_HC_GetXferCount>:
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	70fb      	strb	r3, [r7, #3]
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3350      	adds	r3, #80	; 0x50
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_HCD_GetCurrentFrame>:
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 fe5c 	bl	8005f80 <USB_GetCurrentFrame>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_HCD_GetCurrentSpeed>:
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 fe37 	bl	8005f52 <USB_GetHostSpeed>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HCD_HC_IN_IRQHandler>:
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b086      	sub	sp, #24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	70fb      	strb	r3, [r7, #3]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b04      	cmp	r3, #4
 800231c:	d11a      	bne.n	8002354 <HCD_HC_IN_IRQHandler+0x66>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4413      	add	r3, r2
 8002326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232a:	461a      	mov	r2, r3
 800232c:	2304      	movs	r3, #4
 800232e:	6093      	str	r3, [r2, #8]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	3361      	adds	r3, #97	; 0x61
 800233e:	2206      	movs	r2, #6
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f004 f89e 	bl	800648e <USB_HC_Halt>
 8002352:	e0af      	b.n	80024b4 <HCD_HC_IN_IRQHandler+0x1c6>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800236a:	d11b      	bne.n	80023a4 <HCD_HC_IN_IRQHandler+0xb6>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4413      	add	r3, r2
 8002374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002378:	461a      	mov	r2, r3
 800237a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800237e:	6093      	str	r3, [r2, #8]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3361      	adds	r3, #97	; 0x61
 800238e:	2207      	movs	r2, #7
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f004 f876 	bl	800648e <USB_HC_Halt>
 80023a2:	e087      	b.n	80024b4 <HCD_HC_IN_IRQHandler+0x1c6>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d109      	bne.n	80023ce <HCD_HC_IN_IRQHandler+0xe0>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c6:	461a      	mov	r2, r3
 80023c8:	2320      	movs	r3, #32
 80023ca:	6093      	str	r3, [r2, #8]
 80023cc:	e072      	b.n	80024b4 <HCD_HC_IN_IRQHandler+0x1c6>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d11a      	bne.n	800241a <HCD_HC_IN_IRQHandler+0x12c>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f0:	461a      	mov	r2, r3
 80023f2:	2308      	movs	r3, #8
 80023f4:	6093      	str	r3, [r2, #8]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	3361      	adds	r3, #97	; 0x61
 8002404:	2205      	movs	r2, #5
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f004 f83b 	bl	800648e <USB_HC_Halt>
 8002418:	e04c      	b.n	80024b4 <HCD_HC_IN_IRQHandler+0x1c6>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002430:	d11b      	bne.n	800246a <HCD_HC_IN_IRQHandler+0x17c>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	461a      	mov	r2, r3
 8002440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002444:	6093      	str	r3, [r2, #8]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	3361      	adds	r3, #97	; 0x61
 8002454:	2208      	movs	r2, #8
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f004 f813 	bl	800648e <USB_HC_Halt>
 8002468:	e024      	b.n	80024b4 <HCD_HC_IN_IRQHandler+0x1c6>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4413      	add	r3, r2
 8002472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247c:	2b80      	cmp	r3, #128	; 0x80
 800247e:	d119      	bne.n	80024b4 <HCD_HC_IN_IRQHandler+0x1c6>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248c:	461a      	mov	r2, r3
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	6093      	str	r3, [r2, #8]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3361      	adds	r3, #97	; 0x61
 80024a0:	2206      	movs	r2, #6
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 ffed 	bl	800648e <USB_HC_Halt>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ca:	d112      	bne.n	80024f2 <HCD_HC_IN_IRQHandler+0x204>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 ffd9 	bl	800648e <USB_HC_Halt>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	461a      	mov	r2, r3
 80024ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ee:	6093      	str	r3, [r2, #8]
 80024f0:	e24e      	b.n	8002990 <HCD_HC_IN_IRQHandler+0x6a2>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	f040 80df 	bne.w	80026c8 <HCD_HC_IN_IRQHandler+0x3da>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d019      	beq.n	8002546 <HCD_HC_IN_IRQHandler+0x258>
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	3348      	adds	r3, #72	; 0x48
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	0159      	lsls	r1, r3, #5
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	440b      	add	r3, r1
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002534:	1ad2      	subs	r2, r2, r3
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	202c      	movs	r0, #44	; 0x2c
 800253c:	fb00 f303 	mul.w	r3, r0, r3
 8002540:	440b      	add	r3, r1
 8002542:	3350      	adds	r3, #80	; 0x50
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	3361      	adds	r3, #97	; 0x61
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	335c      	adds	r3, #92	; 0x5c
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	461a      	mov	r2, r3
 8002578:	2301      	movs	r3, #1
 800257a:	6093      	str	r3, [r2, #8]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	333f      	adds	r3, #63	; 0x3f
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <HCD_HC_IN_IRQHandler+0x2b6>
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	333f      	adds	r3, #63	; 0x3f
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d111      	bne.n	80025c8 <HCD_HC_IN_IRQHandler+0x2da>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 ff6d 	bl	800648e <USB_HC_Halt>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	461a      	mov	r2, r3
 80025c2:	2310      	movs	r3, #16
 80025c4:	6093      	str	r3, [r2, #8]
 80025c6:	e03a      	b.n	800263e <HCD_HC_IN_IRQHandler+0x350>
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	333f      	adds	r3, #63	; 0x3f
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d009      	beq.n	80025f0 <HCD_HC_IN_IRQHandler+0x302>
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	333f      	adds	r3, #63	; 0x3f
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d126      	bne.n	800263e <HCD_HC_IN_IRQHandler+0x350>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	0151      	lsls	r1, r2, #5
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	440a      	add	r2, r1
 8002606:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800260a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	3360      	adds	r3, #96	; 0x60
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	b2d9      	uxtb	r1, r3
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	202c      	movs	r0, #44	; 0x2c
 800262c:	fb00 f303 	mul.w	r3, r0, r3
 8002630:	4413      	add	r3, r2
 8002632:	3360      	adds	r3, #96	; 0x60
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f006 f9cd 	bl	80089d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d12b      	bne.n	800269e <HCD_HC_IN_IRQHandler+0x3b0>
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	3348      	adds	r3, #72	; 0x48
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	202c      	movs	r0, #44	; 0x2c
 800265c:	fb00 f202 	mul.w	r2, r0, r2
 8002660:	440a      	add	r2, r1
 8002662:	3240      	adds	r2, #64	; 0x40
 8002664:	8812      	ldrh	r2, [r2, #0]
 8002666:	fbb3 f3f2 	udiv	r3, r3, r2
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 818e 	beq.w	8002990 <HCD_HC_IN_IRQHandler+0x6a2>
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	3354      	adds	r3, #84	; 0x54
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	f083 0301 	eor.w	r3, r3, #1
 8002688:	b2d8      	uxtb	r0, r3
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	3354      	adds	r3, #84	; 0x54
 8002698:	4602      	mov	r2, r0
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e178      	b.n	8002990 <HCD_HC_IN_IRQHandler+0x6a2>
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	3354      	adds	r3, #84	; 0x54
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	f083 0301 	eor.w	r3, r3, #1
 80026b2:	b2d8      	uxtb	r0, r3
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	212c      	movs	r1, #44	; 0x2c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	4413      	add	r3, r2
 80026c0:	3354      	adds	r3, #84	; 0x54
 80026c2:	4602      	mov	r2, r0
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e163      	b.n	8002990 <HCD_HC_IN_IRQHandler+0x6a2>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b02      	cmp	r3, #2
 80026dc:	f040 80f6 	bne.w	80028cc <HCD_HC_IN_IRQHandler+0x5de>
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	212c      	movs	r1, #44	; 0x2c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	3361      	adds	r3, #97	; 0x61
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d109      	bne.n	8002708 <HCD_HC_IN_IRQHandler+0x41a>
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	3360      	adds	r3, #96	; 0x60
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	e0c9      	b.n	800289c <HCD_HC_IN_IRQHandler+0x5ae>
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	3361      	adds	r3, #97	; 0x61
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b05      	cmp	r3, #5
 800271a:	d109      	bne.n	8002730 <HCD_HC_IN_IRQHandler+0x442>
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	3360      	adds	r3, #96	; 0x60
 800272a:	2205      	movs	r2, #5
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e0b5      	b.n	800289c <HCD_HC_IN_IRQHandler+0x5ae>
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	3361      	adds	r3, #97	; 0x61
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b06      	cmp	r3, #6
 8002742:	d009      	beq.n	8002758 <HCD_HC_IN_IRQHandler+0x46a>
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3361      	adds	r3, #97	; 0x61
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b08      	cmp	r3, #8
 8002756:	d150      	bne.n	80027fa <HCD_HC_IN_IRQHandler+0x50c>
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	335c      	adds	r3, #92	; 0x5c
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	202c      	movs	r0, #44	; 0x2c
 8002770:	fb00 f303 	mul.w	r3, r0, r3
 8002774:	440b      	add	r3, r1
 8002776:	335c      	adds	r3, #92	; 0x5c
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	335c      	adds	r3, #92	; 0x5c
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d912      	bls.n	80027b4 <HCD_HC_IN_IRQHandler+0x4c6>
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	335c      	adds	r3, #92	; 0x5c
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	3360      	adds	r3, #96	; 0x60
 80027ae:	2204      	movs	r2, #4
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	e073      	b.n	800289c <HCD_HC_IN_IRQHandler+0x5ae>
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3360      	adds	r3, #96	; 0x60
 80027c2:	2202      	movs	r2, #2
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e050      	b.n	800289c <HCD_HC_IN_IRQHandler+0x5ae>
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	212c      	movs	r1, #44	; 0x2c
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	3361      	adds	r3, #97	; 0x61
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b03      	cmp	r3, #3
 800280c:	d122      	bne.n	8002854 <HCD_HC_IN_IRQHandler+0x566>
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3360      	adds	r3, #96	; 0x60
 800281c:	2202      	movs	r2, #2
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4413      	add	r3, r2
 8002828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e023      	b.n	800289c <HCD_HC_IN_IRQHandler+0x5ae>
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3361      	adds	r3, #97	; 0x61
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b07      	cmp	r3, #7
 8002866:	d119      	bne.n	800289c <HCD_HC_IN_IRQHandler+0x5ae>
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	335c      	adds	r3, #92	; 0x5c
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	202c      	movs	r0, #44	; 0x2c
 8002880:	fb00 f303 	mul.w	r3, r0, r3
 8002884:	440b      	add	r3, r1
 8002886:	335c      	adds	r3, #92	; 0x5c
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	3360      	adds	r3, #96	; 0x60
 8002898:	2204      	movs	r2, #4
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	461a      	mov	r2, r3
 80028aa:	2302      	movs	r3, #2
 80028ac:	6093      	str	r3, [r2, #8]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	b2d9      	uxtb	r1, r3
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	202c      	movs	r0, #44	; 0x2c
 80028b8:	fb00 f303 	mul.w	r3, r0, r3
 80028bc:	4413      	add	r3, r2
 80028be:	3360      	adds	r3, #96	; 0x60
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f006 f887 	bl	80089d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028ca:	e061      	b.n	8002990 <HCD_HC_IN_IRQHandler+0x6a2>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d156      	bne.n	8002990 <HCD_HC_IN_IRQHandler+0x6a2>
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	333f      	adds	r3, #63	; 0x3f
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d111      	bne.n	800291a <HCD_HC_IN_IRQHandler+0x62c>
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	335c      	adds	r3, #92	; 0x5c
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f003 fdbb 	bl	800648e <USB_HC_Halt>
 8002918:	e031      	b.n	800297e <HCD_HC_IN_IRQHandler+0x690>
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	333f      	adds	r3, #63	; 0x3f
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HCD_HC_IN_IRQHandler+0x654>
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	333f      	adds	r3, #63	; 0x3f
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d11d      	bne.n	800297e <HCD_HC_IN_IRQHandler+0x690>
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	335c      	adds	r3, #92	; 0x5c
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d110      	bne.n	800297e <HCD_HC_IN_IRQHandler+0x690>
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	3361      	adds	r3, #97	; 0x61
 800296a:	2203      	movs	r2, #3
 800296c:	701a      	strb	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f003 fd88 	bl	800648e <USB_HC_Halt>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	461a      	mov	r2, r3
 800298c:	2310      	movs	r3, #16
 800298e:	6093      	str	r3, [r2, #8]
 8002990:	bf00      	nop
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HCD_HC_OUT_IRQHandler>:
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	70fb      	strb	r3, [r7, #3]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d11a      	bne.n	80029fe <HCD_HC_OUT_IRQHandler+0x66>
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	461a      	mov	r2, r3
 80029d6:	2304      	movs	r3, #4
 80029d8:	6093      	str	r3, [r2, #8]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	3361      	adds	r3, #97	; 0x61
 80029e8:	2206      	movs	r2, #6
 80029ea:	701a      	strb	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 fd49 	bl	800648e <USB_HC_Halt>
 80029fc:	e331      	b.n	8003062 <HCD_HC_OUT_IRQHandler+0x6ca>
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d12e      	bne.n	8002a72 <HCD_HC_OUT_IRQHandler+0xda>
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	461a      	mov	r2, r3
 8002a22:	2320      	movs	r3, #32
 8002a24:	6093      	str	r3, [r2, #8]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	333d      	adds	r3, #61	; 0x3d
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	f040 8313 	bne.w	8003062 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	333d      	adds	r3, #61	; 0x3d
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3360      	adds	r3, #96	; 0x60
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 fd0f 	bl	800648e <USB_HC_Halt>
 8002a70:	e2f7      	b.n	8003062 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a88:	d112      	bne.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x118>
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	461a      	mov	r2, r3
 8002a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a9c:	6093      	str	r3, [r2, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 fcf0 	bl	800648e <USB_HC_Halt>
 8002aae:	e2d8      	b.n	8003062 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d140      	bne.n	8002b48 <HCD_HC_OUT_IRQHandler+0x1b0>
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	335c      	adds	r3, #92	; 0x5c
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d111      	bne.n	8002b12 <HCD_HC_OUT_IRQHandler+0x17a>
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	333d      	adds	r3, #61	; 0x3d
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2340      	movs	r3, #64	; 0x40
 8002b10:	6093      	str	r3, [r2, #8]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2301      	movs	r3, #1
 8002b22:	6093      	str	r3, [r2, #8]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	212c      	movs	r1, #44	; 0x2c
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	3361      	adds	r3, #97	; 0x61
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f003 fca4 	bl	800648e <USB_HC_Halt>
 8002b46:	e28c      	b.n	8003062 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d12c      	bne.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x220>
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	3361      	adds	r3, #97	; 0x61
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	333d      	adds	r3, #61	; 0x3d
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	335c      	adds	r3, #92	; 0x5c
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f003 fc75 	bl	800648e <USB_HC_Halt>
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2340      	movs	r3, #64	; 0x40
 8002bb4:	6093      	str	r3, [r2, #8]
 8002bb6:	e254      	b.n	8003062 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d11a      	bne.n	8002c04 <HCD_HC_OUT_IRQHandler+0x26c>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2308      	movs	r3, #8
 8002bde:	6093      	str	r3, [r2, #8]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3361      	adds	r3, #97	; 0x61
 8002bee:	2205      	movs	r2, #5
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f003 fc46 	bl	800648e <USB_HC_Halt>
 8002c02:	e22e      	b.n	8003062 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d140      	bne.n	8002c9c <HCD_HC_OUT_IRQHandler+0x304>
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	335c      	adds	r3, #92	; 0x5c
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3361      	adds	r3, #97	; 0x61
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	212c      	movs	r1, #44	; 0x2c
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	333d      	adds	r3, #61	; 0x3d
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d112      	bne.n	8002c78 <HCD_HC_OUT_IRQHandler+0x2e0>
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	333c      	adds	r3, #60	; 0x3c
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d108      	bne.n	8002c78 <HCD_HC_OUT_IRQHandler+0x2e0>
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	212c      	movs	r1, #44	; 0x2c
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	333d      	adds	r3, #61	; 0x3d
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f003 fc03 	bl	800648e <USB_HC_Halt>
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	2310      	movs	r3, #16
 8002c98:	6093      	str	r3, [r2, #8]
 8002c9a:	e1e2      	b.n	8003062 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cae:	2b80      	cmp	r3, #128	; 0x80
 8002cb0:	d164      	bne.n	8002d7c <HCD_HC_OUT_IRQHandler+0x3e4>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d111      	bne.n	8002cde <HCD_HC_OUT_IRQHandler+0x346>
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3361      	adds	r3, #97	; 0x61
 8002cc8:	2206      	movs	r2, #6
 8002cca:	701a      	strb	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f003 fbd9 	bl	800648e <USB_HC_Halt>
 8002cdc:	e044      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x3d0>
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	335c      	adds	r3, #92	; 0x5c
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	202c      	movs	r0, #44	; 0x2c
 8002cf6:	fb00 f303 	mul.w	r3, r0, r3
 8002cfa:	440b      	add	r3, r1
 8002cfc:	335c      	adds	r3, #92	; 0x5c
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	335c      	adds	r3, #92	; 0x5c
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d920      	bls.n	8002d56 <HCD_HC_OUT_IRQHandler+0x3be>
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	335c      	adds	r3, #92	; 0x5c
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	3360      	adds	r3, #96	; 0x60
 8002d34:	2204      	movs	r2, #4
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	b2d9      	uxtb	r1, r3
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	202c      	movs	r0, #44	; 0x2c
 8002d42:	fb00 f303 	mul.w	r3, r0, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	3360      	adds	r3, #96	; 0x60
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f005 fe42 	bl	80089d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d54:	e008      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x3d0>
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3360      	adds	r3, #96	; 0x60
 8002d64:	2202      	movs	r2, #2
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	461a      	mov	r2, r3
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	6093      	str	r3, [r2, #8]
 8002d7a:	e172      	b.n	8003062 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	d11b      	bne.n	8002dcc <HCD_HC_OUT_IRQHandler+0x434>
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	212c      	movs	r1, #44	; 0x2c
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3361      	adds	r3, #97	; 0x61
 8002da2:	2208      	movs	r2, #8
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f003 fb6c 	bl	800648e <USB_HC_Halt>
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc8:	6093      	str	r3, [r2, #8]
 8002dca:	e14a      	b.n	8003062 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	f040 813f 	bne.w	8003062 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3361      	adds	r3, #97	; 0x61
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d17d      	bne.n	8002ef4 <HCD_HC_OUT_IRQHandler+0x55c>
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3360      	adds	r3, #96	; 0x60
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	212c      	movs	r1, #44	; 0x2c
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	333f      	adds	r3, #63	; 0x3f
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d00a      	beq.n	8002e34 <HCD_HC_OUT_IRQHandler+0x49c>
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	333f      	adds	r3, #63	; 0x3f
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	f040 8100 	bne.w	8003034 <HCD_HC_OUT_IRQHandler+0x69c>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d113      	bne.n	8002e64 <HCD_HC_OUT_IRQHandler+0x4cc>
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	3355      	adds	r3, #85	; 0x55
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	f083 0301 	eor.w	r3, r3, #1
 8002e50:	b2d8      	uxtb	r0, r3
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3355      	adds	r3, #85	; 0x55
 8002e60:	4602      	mov	r2, r0
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	f040 80e3 	bne.w	8003034 <HCD_HC_OUT_IRQHandler+0x69c>
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	334c      	adds	r3, #76	; 0x4c
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80d8 	beq.w	8003034 <HCD_HC_OUT_IRQHandler+0x69c>
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	212c      	movs	r1, #44	; 0x2c
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	334c      	adds	r3, #76	; 0x4c
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	202c      	movs	r0, #44	; 0x2c
 8002e9a:	fb00 f202 	mul.w	r2, r0, r2
 8002e9e:	440a      	add	r2, r1
 8002ea0:	3240      	adds	r2, #64	; 0x40
 8002ea2:	8812      	ldrh	r2, [r2, #0]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	202c      	movs	r0, #44	; 0x2c
 8002eae:	fb00 f202 	mul.w	r2, r0, r2
 8002eb2:	440a      	add	r2, r1
 8002eb4:	3240      	adds	r2, #64	; 0x40
 8002eb6:	8812      	ldrh	r2, [r2, #0]
 8002eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80b5 	beq.w	8003034 <HCD_HC_OUT_IRQHandler+0x69c>
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	212c      	movs	r1, #44	; 0x2c
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3355      	adds	r3, #85	; 0x55
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	f083 0301 	eor.w	r3, r3, #1
 8002ede:	b2d8      	uxtb	r0, r3
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	3355      	adds	r3, #85	; 0x55
 8002eee:	4602      	mov	r2, r0
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	e09f      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x69c>
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	3361      	adds	r3, #97	; 0x61
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d109      	bne.n	8002f1c <HCD_HC_OUT_IRQHandler+0x584>
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	212c      	movs	r1, #44	; 0x2c
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	3360      	adds	r3, #96	; 0x60
 8002f16:	2202      	movs	r2, #2
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e08b      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x69c>
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	3361      	adds	r3, #97	; 0x61
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d109      	bne.n	8002f44 <HCD_HC_OUT_IRQHandler+0x5ac>
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3360      	adds	r3, #96	; 0x60
 8002f3e:	2202      	movs	r2, #2
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	e077      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x69c>
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	3361      	adds	r3, #97	; 0x61
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	d109      	bne.n	8002f6c <HCD_HC_OUT_IRQHandler+0x5d4>
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	3360      	adds	r3, #96	; 0x60
 8002f66:	2205      	movs	r2, #5
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e063      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x69c>
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3361      	adds	r3, #97	; 0x61
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b06      	cmp	r3, #6
 8002f7e:	d009      	beq.n	8002f94 <HCD_HC_OUT_IRQHandler+0x5fc>
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3361      	adds	r3, #97	; 0x61
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d14f      	bne.n	8003034 <HCD_HC_OUT_IRQHandler+0x69c>
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	335c      	adds	r3, #92	; 0x5c
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	202c      	movs	r0, #44	; 0x2c
 8002fac:	fb00 f303 	mul.w	r3, r0, r3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	335c      	adds	r3, #92	; 0x5c
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	335c      	adds	r3, #92	; 0x5c
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d912      	bls.n	8002ff0 <HCD_HC_OUT_IRQHandler+0x658>
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	335c      	adds	r3, #92	; 0x5c
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3360      	adds	r3, #96	; 0x60
 8002fea:	2204      	movs	r2, #4
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e021      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x69c>
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3360      	adds	r3, #96	; 0x60
 8002ffe:	2202      	movs	r2, #2
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	4413      	add	r3, r2
 800302a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302e:	461a      	mov	r2, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	2302      	movs	r3, #2
 8003044:	6093      	str	r3, [r2, #8]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	b2d9      	uxtb	r1, r3
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	202c      	movs	r0, #44	; 0x2c
 8003050:	fb00 f303 	mul.w	r3, r0, r3
 8003054:	4413      	add	r3, r2
 8003056:	3360      	adds	r3, #96	; 0x60
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f005 fcbb 	bl	80089d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003062:	bf00      	nop
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HCD_RXQLVL_IRQHandler>:
 800306a:	b580      	push	{r7, lr}
 800306c:	b08a      	sub	sp, #40	; 0x28
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	623b      	str	r3, [r7, #32]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	0c5b      	lsrs	r3, r3, #17
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d004      	beq.n	80030b0 <HCD_RXQLVL_IRQHandler+0x46>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b05      	cmp	r3, #5
 80030aa:	f000 80a9 	beq.w	8003200 <HCD_RXQLVL_IRQHandler+0x196>
 80030ae:	e0aa      	b.n	8003206 <HCD_RXQLVL_IRQHandler+0x19c>
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80a6 	beq.w	8003204 <HCD_RXQLVL_IRQHandler+0x19a>
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	3344      	adds	r3, #68	; 0x44
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 809b 	beq.w	8003204 <HCD_RXQLVL_IRQHandler+0x19a>
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	212c      	movs	r1, #44	; 0x2c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	3350      	adds	r3, #80	; 0x50
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	441a      	add	r2, r3
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	202c      	movs	r0, #44	; 0x2c
 80030e8:	fb00 f303 	mul.w	r3, r0, r3
 80030ec:	440b      	add	r3, r1
 80030ee:	334c      	adds	r3, #76	; 0x4c
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d87a      	bhi.n	80031ec <HCD_RXQLVL_IRQHandler+0x182>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	212c      	movs	r1, #44	; 0x2c
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	3344      	adds	r3, #68	; 0x44
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	b292      	uxth	r2, r2
 800310e:	4619      	mov	r1, r3
 8003110:	f002 fd14 	bl	8005b3c <USB_ReadPacket>
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	212c      	movs	r1, #44	; 0x2c
 800311a:	fb01 f303 	mul.w	r3, r1, r3
 800311e:	4413      	add	r3, r2
 8003120:	3344      	adds	r3, #68	; 0x44
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	441a      	add	r2, r3
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	202c      	movs	r0, #44	; 0x2c
 800312e:	fb00 f303 	mul.w	r3, r0, r3
 8003132:	440b      	add	r3, r1
 8003134:	3344      	adds	r3, #68	; 0x44
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	3350      	adds	r3, #80	; 0x50
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	441a      	add	r2, r3
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	202c      	movs	r0, #44	; 0x2c
 8003152:	fb00 f303 	mul.w	r3, r0, r3
 8003156:	440b      	add	r3, r1
 8003158:	3350      	adds	r3, #80	; 0x50
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	0cdb      	lsrs	r3, r3, #19
 800316c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	212c      	movs	r1, #44	; 0x2c
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	4413      	add	r3, r2
 800317e:	3340      	adds	r3, #64	; 0x40
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4293      	cmp	r3, r2
 8003188:	d13c      	bne.n	8003204 <HCD_RXQLVL_IRQHandler+0x19a>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d039      	beq.n	8003204 <HCD_RXQLVL_IRQHandler+0x19a>
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031bc:	461a      	mov	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	3354      	adds	r3, #84	; 0x54
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	f083 0301 	eor.w	r3, r3, #1
 80031d6:	b2d8      	uxtb	r0, r3
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	212c      	movs	r1, #44	; 0x2c
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	3354      	adds	r3, #84	; 0x54
 80031e6:	4602      	mov	r2, r0
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	e00b      	b.n	8003204 <HCD_RXQLVL_IRQHandler+0x19a>
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	3360      	adds	r3, #96	; 0x60
 80031fa:	2204      	movs	r2, #4
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e001      	b.n	8003204 <HCD_RXQLVL_IRQHandler+0x19a>
 8003200:	bf00      	nop
 8003202:	e000      	b.n	8003206 <HCD_RXQLVL_IRQHandler+0x19c>
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3728      	adds	r7, #40	; 0x28
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HCD_Port_IRQHandler>:
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b02      	cmp	r3, #2
 8003244:	d10b      	bne.n	800325e <HCD_Port_IRQHandler+0x50>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d102      	bne.n	8003256 <HCD_Port_IRQHandler+0x48>
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f005 fba5 	bl	80089a0 <HAL_HCD_Connect_Callback>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f043 0302 	orr.w	r3, r3, #2
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b08      	cmp	r3, #8
 8003266:	d132      	bne.n	80032ce <HCD_Port_IRQHandler+0xc0>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f043 0308 	orr.w	r3, r3, #8
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b04      	cmp	r3, #4
 8003278:	d126      	bne.n	80032c8 <HCD_Port_IRQHandler+0xba>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d113      	bne.n	80032aa <HCD_Port_IRQHandler+0x9c>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003288:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800328c:	d106      	bne.n	800329c <HCD_Port_IRQHandler+0x8e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2102      	movs	r1, #2
 8003294:	4618      	mov	r0, r3
 8003296:	f002 fdbf 	bl	8005e18 <USB_InitFSLSPClkSel>
 800329a:	e011      	b.n	80032c0 <HCD_Port_IRQHandler+0xb2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2101      	movs	r1, #1
 80032a2:	4618      	mov	r0, r3
 80032a4:	f002 fdb8 	bl	8005e18 <USB_InitFSLSPClkSel>
 80032a8:	e00a      	b.n	80032c0 <HCD_Port_IRQHandler+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d106      	bne.n	80032c0 <HCD_Port_IRQHandler+0xb2>
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032b8:	461a      	mov	r2, r3
 80032ba:	f64e 2360 	movw	r3, #60000	; 0xea60
 80032be:	6053      	str	r3, [r2, #4]
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f005 fb97 	bl	80089f4 <HAL_HCD_PortEnabled_Callback>
 80032c6:	e002      	b.n	80032ce <HCD_Port_IRQHandler+0xc0>
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f005 fba1 	bl	8008a10 <HAL_HCD_PortDisabled_Callback>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d103      	bne.n	80032e0 <HCD_Port_IRQHandler+0xd2>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f043 0320 	orr.w	r3, r3, #32
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032e6:	461a      	mov	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	bf00      	nop
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_I2C_Init>:
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_I2C_Init+0x12>
 8003302:	2301      	movs	r3, #1
 8003304:	e12b      	b.n	800355e <HAL_I2C_Init+0x26a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_I2C_Init+0x2c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fd fe98 	bl	8001050 <HAL_I2C_MspInit>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2224      	movs	r2, #36	; 0x24
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	f001 fa20 	bl	800479c <HAL_RCC_GetPCLK1Freq>
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4a81      	ldr	r2, [pc, #516]	; (8003568 <HAL_I2C_Init+0x274>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d807      	bhi.n	8003378 <HAL_I2C_Init+0x84>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a80      	ldr	r2, [pc, #512]	; (800356c <HAL_I2C_Init+0x278>)
 800336c:	4293      	cmp	r3, r2
 800336e:	bf94      	ite	ls
 8003370:	2301      	movls	r3, #1
 8003372:	2300      	movhi	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	e006      	b.n	8003386 <HAL_I2C_Init+0x92>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4a7d      	ldr	r2, [pc, #500]	; (8003570 <HAL_I2C_Init+0x27c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	bf94      	ite	ls
 8003380:	2301      	movls	r3, #1
 8003382:	2300      	movhi	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Init+0x9a>
 800338a:	2301      	movs	r3, #1
 800338c:	e0e7      	b.n	800355e <HAL_I2C_Init+0x26a>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a78      	ldr	r2, [pc, #480]	; (8003574 <HAL_I2C_Init+0x280>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	0c9b      	lsrs	r3, r3, #18
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4a6a      	ldr	r2, [pc, #424]	; (8003568 <HAL_I2C_Init+0x274>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d802      	bhi.n	80033c8 <HAL_I2C_Init+0xd4>
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	3301      	adds	r3, #1
 80033c6:	e009      	b.n	80033dc <HAL_I2C_Init+0xe8>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033ce:	fb02 f303 	mul.w	r3, r2, r3
 80033d2:	4a69      	ldr	r2, [pc, #420]	; (8003578 <HAL_I2C_Init+0x284>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	099b      	lsrs	r3, r3, #6
 80033da:	3301      	adds	r3, #1
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6213      	str	r3, [r2, #32]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	495c      	ldr	r1, [pc, #368]	; (8003568 <HAL_I2C_Init+0x274>)
 80033f8:	428b      	cmp	r3, r1
 80033fa:	d819      	bhi.n	8003430 <HAL_I2C_Init+0x13c>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1e59      	subs	r1, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	fbb1 f3f3 	udiv	r3, r1, r3
 800340a:	1c59      	adds	r1, r3, #1
 800340c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003410:	400b      	ands	r3, r1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_I2C_Init+0x138>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1e59      	subs	r1, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fbb1 f3f3 	udiv	r3, r1, r3
 8003424:	3301      	adds	r3, #1
 8003426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342a:	e051      	b.n	80034d0 <HAL_I2C_Init+0x1dc>
 800342c:	2304      	movs	r3, #4
 800342e:	e04f      	b.n	80034d0 <HAL_I2C_Init+0x1dc>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d111      	bne.n	800345c <HAL_I2C_Init+0x168>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1e58      	subs	r0, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6859      	ldr	r1, [r3, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	440b      	add	r3, r1
 8003446:	fbb0 f3f3 	udiv	r3, r0, r3
 800344a:	3301      	adds	r3, #1
 800344c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	e012      	b.n	8003482 <HAL_I2C_Init+0x18e>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1e58      	subs	r0, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	0099      	lsls	r1, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003472:	3301      	adds	r3, #1
 8003474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_Init+0x196>
 8003486:	2301      	movs	r3, #1
 8003488:	e022      	b.n	80034d0 <HAL_I2C_Init+0x1dc>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10e      	bne.n	80034b0 <HAL_I2C_Init+0x1bc>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1e58      	subs	r0, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6859      	ldr	r1, [r3, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	440b      	add	r3, r1
 80034a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ae:	e00f      	b.n	80034d0 <HAL_I2C_Init+0x1dc>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1e58      	subs	r0, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	0099      	lsls	r1, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	6809      	ldr	r1, [r1, #0]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61cb      	str	r3, [r1, #28]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6911      	ldr	r1, [r2, #16]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68d2      	ldr	r2, [r2, #12]
 800350a:	4311      	orrs	r1, r2
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	430b      	orrs	r3, r1
 8003512:	6093      	str	r3, [r2, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	60da      	str	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	641a      	str	r2, [r3, #64]	; 0x40
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800355c:	2300      	movs	r3, #0
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	000186a0 	.word	0x000186a0
 800356c:	001e847f 	.word	0x001e847f
 8003570:	003d08ff 	.word	0x003d08ff
 8003574:	431bde83 	.word	0x431bde83
 8003578:	10624dd3 	.word	0x10624dd3

0800357c <HAL_I2S_Init>:
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_I2S_Init+0x12>
 800358a:	2301      	movs	r3, #1
 800358c:	e128      	b.n	80037e0 <HAL_I2S_Init+0x264>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_I2S_Init+0x32>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a90      	ldr	r2, [pc, #576]	; (80037e8 <HAL_I2S_Init+0x26c>)
 80035a6:	635a      	str	r2, [r3, #52]	; 0x34
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fd fd99 	bl	80010e0 <HAL_I2S_MspInit>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035c4:	f023 030f 	bic.w	r3, r3, #15
 80035c8:	61d3      	str	r3, [r2, #28]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2202      	movs	r2, #2
 80035d0:	621a      	str	r2, [r3, #32]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d060      	beq.n	800369c <HAL_I2S_Init+0x120>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d102      	bne.n	80035e8 <HAL_I2S_Init+0x6c>
 80035e2:	2310      	movs	r3, #16
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	e001      	b.n	80035ec <HAL_I2S_Init+0x70>
 80035e8:	2320      	movs	r3, #32
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d802      	bhi.n	80035fa <HAL_I2S_Init+0x7e>
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	2001      	movs	r0, #1
 80035fc:	f001 f9c4 	bl	8004988 <HAL_RCCEx_GetPeriphCLKFreq>
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800360a:	d125      	bne.n	8003658 <HAL_I2S_Init+0xdc>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d010      	beq.n	8003636 <HAL_I2S_Init+0xba>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	fbb2 f2f3 	udiv	r2, r2, r3
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	461a      	mov	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	3305      	adds	r3, #5
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	e01f      	b.n	8003676 <HAL_I2S_Init+0xfa>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	461a      	mov	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003652:	3305      	adds	r3, #5
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	e00e      	b.n	8003676 <HAL_I2S_Init+0xfa>
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	461a      	mov	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003672:	3305      	adds	r3, #5
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4a5c      	ldr	r2, [pc, #368]	; (80037ec <HAL_I2S_Init+0x270>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	08db      	lsrs	r3, r3, #3
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	e003      	b.n	80036a4 <HAL_I2S_Init+0x128>
 800369c:	2302      	movs	r3, #2
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	2300      	movs	r3, #0
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d902      	bls.n	80036b0 <HAL_I2S_Init+0x134>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	2bff      	cmp	r3, #255	; 0xff
 80036ae:	d907      	bls.n	80036c0 <HAL_I2S_Init+0x144>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	f043 0210 	orr.w	r2, r3, #16
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	645a      	str	r2, [r3, #68]	; 0x44
 80036bc:	2301      	movs	r3, #1
 80036be:	e08f      	b.n	80037e0 <HAL_I2S_Init+0x264>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	ea42 0103 	orr.w	r1, r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	621a      	str	r2, [r3, #32]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036de:	f023 030f 	bic.w	r3, r3, #15
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6851      	ldr	r1, [r2, #4]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6892      	ldr	r2, [r2, #8]
 80036ea:	4311      	orrs	r1, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68d2      	ldr	r2, [r2, #12]
 80036f0:	4311      	orrs	r1, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6992      	ldr	r2, [r2, #24]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003702:	61da      	str	r2, [r3, #28]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d161      	bne.n	80037d0 <HAL_I2S_Init+0x254>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a38      	ldr	r2, [pc, #224]	; (80037f0 <HAL_I2S_Init+0x274>)
 8003710:	635a      	str	r2, [r3, #52]	; 0x34
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a37      	ldr	r2, [pc, #220]	; (80037f4 <HAL_I2S_Init+0x278>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d101      	bne.n	8003720 <HAL_I2S_Init+0x1a4>
 800371c:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <HAL_I2S_Init+0x27c>)
 800371e:	e001      	b.n	8003724 <HAL_I2S_Init+0x1a8>
 8003720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	4932      	ldr	r1, [pc, #200]	; (80037f4 <HAL_I2S_Init+0x278>)
 800372c:	428a      	cmp	r2, r1
 800372e:	d101      	bne.n	8003734 <HAL_I2S_Init+0x1b8>
 8003730:	4a31      	ldr	r2, [pc, #196]	; (80037f8 <HAL_I2S_Init+0x27c>)
 8003732:	e001      	b.n	8003738 <HAL_I2S_Init+0x1bc>
 8003734:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003738:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800373c:	f023 030f 	bic.w	r3, r3, #15
 8003740:	61d3      	str	r3, [r2, #28]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a2b      	ldr	r2, [pc, #172]	; (80037f4 <HAL_I2S_Init+0x278>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d101      	bne.n	8003750 <HAL_I2S_Init+0x1d4>
 800374c:	4b2a      	ldr	r3, [pc, #168]	; (80037f8 <HAL_I2S_Init+0x27c>)
 800374e:	e001      	b.n	8003754 <HAL_I2S_Init+0x1d8>
 8003750:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003754:	2202      	movs	r2, #2
 8003756:	621a      	str	r2, [r3, #32]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a25      	ldr	r2, [pc, #148]	; (80037f4 <HAL_I2S_Init+0x278>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d101      	bne.n	8003766 <HAL_I2S_Init+0x1ea>
 8003762:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <HAL_I2S_Init+0x27c>)
 8003764:	e001      	b.n	800376a <HAL_I2S_Init+0x1ee>
 8003766:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	817b      	strh	r3, [r7, #10]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003776:	d003      	beq.n	8003780 <HAL_I2S_Init+0x204>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d103      	bne.n	8003788 <HAL_I2S_Init+0x20c>
 8003780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	e001      	b.n	800378c <HAL_I2S_Init+0x210>
 8003788:	2300      	movs	r3, #0
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	b29a      	uxth	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	b29b      	uxth	r3, r3
 8003796:	4313      	orrs	r3, r2
 8003798:	b29a      	uxth	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	4313      	orrs	r3, r2
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	4313      	orrs	r3, r2
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	897b      	ldrh	r3, [r7, #10]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037b8:	817b      	strh	r3, [r7, #10]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a0d      	ldr	r2, [pc, #52]	; (80037f4 <HAL_I2S_Init+0x278>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_I2S_Init+0x24c>
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <HAL_I2S_Init+0x27c>)
 80037c6:	e001      	b.n	80037cc <HAL_I2S_Init+0x250>
 80037c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037cc:	897a      	ldrh	r2, [r7, #10]
 80037ce:	61da      	str	r2, [r3, #28]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037de:	2300      	movs	r3, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	080038f3 	.word	0x080038f3
 80037ec:	cccccccd 	.word	0xcccccccd
 80037f0:	08003a09 	.word	0x08003a09
 80037f4:	40003800 	.word	0x40003800
 80037f8:	40003400 	.word	0x40003400

080037fc <HAL_I2S_TxCpltCallback>:
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_I2S_RxCpltCallback>:
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_I2S_ErrorCallback>:
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <I2S_Transmit_IT>:
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	881a      	ldrh	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60da      	str	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c9a      	adds	r2, r3, #2
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10e      	bne.n	800388c <I2S_Transmit_IT+0x54>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ffb8 	bl	80037fc <HAL_I2S_TxCpltCallback>
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <I2S_Receive_IT>:
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	b292      	uxth	r2, r2
 80038a8:	801a      	strh	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	1c9a      	adds	r2, r3, #2
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	865a      	strh	r2, [r3, #50]	; 0x32
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10e      	bne.n	80038ea <I2S_Receive_IT+0x56>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038da:	605a      	str	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff93 	bl	8003810 <HAL_I2S_RxCpltCallback>
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <I2S_IRQHandler>:
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b04      	cmp	r3, #4
 800390c:	d13a      	bne.n	8003984 <I2S_IRQHandler+0x92>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b01      	cmp	r3, #1
 8003916:	d109      	bne.n	800392c <I2S_IRQHandler+0x3a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d102      	bne.n	800392c <I2S_IRQHandler+0x3a>
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ffb4 	bl	8003894 <I2S_Receive_IT>
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d126      	bne.n	8003984 <I2S_IRQHandler+0x92>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b20      	cmp	r3, #32
 8003942:	d11f      	bne.n	8003984 <I2S_IRQHandler+0x92>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	2300      	movs	r3, #0
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	f043 0202 	orr.w	r2, r3, #2
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ff50 	bl	8003824 <HAL_I2S_ErrorCallback>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b03      	cmp	r3, #3
 800398e:	d136      	bne.n	80039fe <I2S_IRQHandler+0x10c>
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b02      	cmp	r3, #2
 8003998:	d109      	bne.n	80039ae <I2S_IRQHandler+0xbc>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a4:	2b80      	cmp	r3, #128	; 0x80
 80039a6:	d102      	bne.n	80039ae <I2S_IRQHandler+0xbc>
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ff45 	bl	8003838 <I2S_Transmit_IT>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d122      	bne.n	80039fe <I2S_IRQHandler+0x10c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d11b      	bne.n	80039fe <I2S_IRQHandler+0x10c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	f043 0204 	orr.w	r2, r3, #4
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	645a      	str	r2, [r3, #68]	; 0x44
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ff13 	bl	8003824 <HAL_I2S_ErrorCallback>
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <HAL_I2SEx_FullDuplex_IRQHandler>:
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a92      	ldr	r2, [pc, #584]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d101      	bne.n	8003a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003a22:	4b92      	ldr	r3, [pc, #584]	; (8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a24:	e001      	b.n	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003a26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a8b      	ldr	r2, [pc, #556]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d101      	bne.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003a40:	4b8a      	ldr	r3, [pc, #552]	; (8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a42:	e001      	b.n	8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003a44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a54:	d004      	beq.n	8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f040 8099 	bne.w	8003b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d107      	bne.n	8003a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f925 	bl	8003cc4 <I2SEx_TxISR_I2S>
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d107      	bne.n	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f9c8 	bl	8003e24 <I2SEx_RxISR_I2SExt>
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b40      	cmp	r3, #64	; 0x40
 8003a9c:	d13a      	bne.n	8003b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d035      	beq.n	8003b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a6e      	ldr	r2, [pc, #440]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d101      	bne.n	8003ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ab2:	4b6e      	ldr	r3, [pc, #440]	; (8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ab4:	e001      	b.n	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ab6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4969      	ldr	r1, [pc, #420]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ac2:	428b      	cmp	r3, r1
 8003ac4:	d101      	bne.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ac6:	4b69      	ldr	r3, [pc, #420]	; (8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ac8:	e001      	b.n	8003ace <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003aca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ace:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ad2:	605a      	str	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ae2:	605a      	str	r2, [r3, #4]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	f043 0202 	orr.w	r2, r3, #2
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff fe88 	bl	8003824 <HAL_I2S_ErrorCallback>
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	f040 80c3 	bne.w	8003ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80bd 	beq.w	8003ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b3a:	605a      	str	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a49      	ldr	r2, [pc, #292]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d101      	bne.n	8003b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003b46:	4b49      	ldr	r3, [pc, #292]	; (8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b48:	e001      	b.n	8003b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003b4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4944      	ldr	r1, [pc, #272]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b56:	428b      	cmp	r3, r1
 8003b58:	d101      	bne.n	8003b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003b5a:	4b44      	ldr	r3, [pc, #272]	; (8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b5c:	e001      	b.n	8003b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003b5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f043 0204 	orr.w	r2, r3, #4
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	645a      	str	r2, [r3, #68]	; 0x44
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff fe4a 	bl	8003824 <HAL_I2S_ErrorCallback>
 8003b90:	e089      	b.n	8003ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d107      	bne.n	8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8be 	bl	8003d28 <I2SEx_TxISR_I2SExt>
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d107      	bne.n	8003bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f8fd 	bl	8003dc0 <I2SEx_RxISR_I2S>
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d12f      	bne.n	8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d02a      	beq.n	8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1e      	ldr	r2, [pc, #120]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bf6:	e001      	b.n	8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003bf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4919      	ldr	r1, [pc, #100]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c04:	428b      	cmp	r3, r1
 8003c06:	d101      	bne.n	8003c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c08:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c0a:	e001      	b.n	8003c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003c0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	f043 0202 	orr.w	r2, r3, #2
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff fdfa 	bl	8003824 <HAL_I2S_ErrorCallback>
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d136      	bne.n	8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d031      	beq.n	8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a07      	ldr	r2, [pc, #28]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003c4e:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c50:	e001      	b.n	8003c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003c52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4902      	ldr	r1, [pc, #8]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c5e:	428b      	cmp	r3, r1
 8003c60:	d106      	bne.n	8003c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003c62:	4b02      	ldr	r3, [pc, #8]	; (8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c64:	e006      	b.n	8003c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003c66:	bf00      	nop
 8003c68:	40003800 	.word	0x40003800
 8003c6c:	40003400 	.word	0x40003400
 8003c70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	f043 0204 	orr.w	r2, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff fdc0 	bl	8003824 <HAL_I2S_ErrorCallback>
 8003ca4:	e000      	b.n	8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	3720      	adds	r7, #32
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_I2SEx_TxRxCpltCallback>:
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <I2SEx_TxISR_I2S>:
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	1c99      	adds	r1, r3, #2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6251      	str	r1, [r2, #36]	; 0x24
 8003cd6:	881a      	ldrh	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d113      	bne.n	8003d1e <I2SEx_TxISR_I2S+0x5a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d106      	bne.n	8003d1e <I2SEx_TxISR_I2S+0x5a>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff ffc9 	bl	8003cb0 <HAL_I2SEx_TxRxCpltCallback>
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <I2SEx_TxISR_I2SExt>:
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	1c99      	adds	r1, r3, #2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6251      	str	r1, [r2, #36]	; 0x24
 8003d3a:	8819      	ldrh	r1, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1d      	ldr	r2, [pc, #116]	; (8003db8 <I2SEx_TxISR_I2SExt+0x90>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <I2SEx_TxISR_I2SExt+0x22>
 8003d46:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <I2SEx_TxISR_I2SExt+0x94>)
 8003d48:	e001      	b.n	8003d4e <I2SEx_TxISR_I2SExt+0x26>
 8003d4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d4e:	460a      	mov	r2, r1
 8003d50:	60da      	str	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d121      	bne.n	8003dae <I2SEx_TxISR_I2SExt+0x86>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <I2SEx_TxISR_I2SExt+0x90>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d101      	bne.n	8003d78 <I2SEx_TxISR_I2SExt+0x50>
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <I2SEx_TxISR_I2SExt+0x94>)
 8003d76:	e001      	b.n	8003d7c <I2SEx_TxISR_I2SExt+0x54>
 8003d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	490d      	ldr	r1, [pc, #52]	; (8003db8 <I2SEx_TxISR_I2SExt+0x90>)
 8003d84:	428b      	cmp	r3, r1
 8003d86:	d101      	bne.n	8003d8c <I2SEx_TxISR_I2SExt+0x64>
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <I2SEx_TxISR_I2SExt+0x94>)
 8003d8a:	e001      	b.n	8003d90 <I2SEx_TxISR_I2SExt+0x68>
 8003d8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <I2SEx_TxISR_I2SExt+0x86>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff81 	bl	8003cb0 <HAL_I2SEx_TxRxCpltCallback>
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40003800 	.word	0x40003800
 8003dbc:	40003400 	.word	0x40003400

08003dc0 <I2SEx_RxISR_I2S>:
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68d8      	ldr	r0, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	1c99      	adds	r1, r3, #2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003dd8:	b282      	uxth	r2, r0
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	865a      	strh	r2, [r3, #50]	; 0x32
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d113      	bne.n	8003e1c <I2SEx_RxISR_I2S+0x5c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <I2SEx_RxISR_I2S+0x5c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ff4a 	bl	8003cb0 <HAL_I2SEx_TxRxCpltCallback>
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <I2SEx_RxISR_I2SExt>:
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a20      	ldr	r2, [pc, #128]	; (8003eb4 <I2SEx_RxISR_I2SExt+0x90>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d101      	bne.n	8003e3a <I2SEx_RxISR_I2SExt+0x16>
 8003e36:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <I2SEx_RxISR_I2SExt+0x94>)
 8003e38:	e001      	b.n	8003e3e <I2SEx_RxISR_I2SExt+0x1a>
 8003e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e3e:	68d8      	ldr	r0, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	1c99      	adds	r1, r3, #2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e4a:	b282      	uxth	r2, r0
 8003e4c:	801a      	strh	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	865a      	strh	r2, [r3, #50]	; 0x32
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d121      	bne.n	8003eaa <I2SEx_RxISR_I2SExt+0x86>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a12      	ldr	r2, [pc, #72]	; (8003eb4 <I2SEx_RxISR_I2SExt+0x90>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <I2SEx_RxISR_I2SExt+0x50>
 8003e70:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <I2SEx_RxISR_I2SExt+0x94>)
 8003e72:	e001      	b.n	8003e78 <I2SEx_RxISR_I2SExt+0x54>
 8003e74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	490d      	ldr	r1, [pc, #52]	; (8003eb4 <I2SEx_RxISR_I2SExt+0x90>)
 8003e80:	428b      	cmp	r3, r1
 8003e82:	d101      	bne.n	8003e88 <I2SEx_RxISR_I2SExt+0x64>
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <I2SEx_RxISR_I2SExt+0x94>)
 8003e86:	e001      	b.n	8003e8c <I2SEx_RxISR_I2SExt+0x68>
 8003e88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <I2SEx_RxISR_I2SExt+0x86>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff ff03 	bl	8003cb0 <HAL_I2SEx_TxRxCpltCallback>
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40003800 	.word	0x40003800
 8003eb8:	40003400 	.word	0x40003400

08003ebc <HAL_RCC_OscConfig>:
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_RCC_OscConfig+0x12>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e267      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d075      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x10a>
 8003eda:	4b88      	ldr	r3, [pc, #544]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d00c      	beq.n	8003f00 <HAL_RCC_OscConfig+0x44>
 8003ee6:	4b85      	ldr	r3, [pc, #532]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d112      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5c>
 8003ef2:	4b82      	ldr	r3, [pc, #520]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efe:	d10b      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5c>
 8003f00:	4b7e      	ldr	r3, [pc, #504]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d05b      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x108>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d157      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x108>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e242      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f20:	d106      	bne.n	8003f30 <HAL_RCC_OscConfig+0x74>
 8003f22:	4b76      	ldr	r3, [pc, #472]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a75      	ldr	r2, [pc, #468]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	e01d      	b.n	8003f6c <HAL_RCC_OscConfig+0xb0>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x98>
 8003f3a:	4b70      	ldr	r3, [pc, #448]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a6f      	ldr	r2, [pc, #444]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	4b6d      	ldr	r3, [pc, #436]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a6c      	ldr	r2, [pc, #432]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e00b      	b.n	8003f6c <HAL_RCC_OscConfig+0xb0>
 8003f54:	4b69      	ldr	r3, [pc, #420]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a68      	ldr	r2, [pc, #416]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	4b66      	ldr	r3, [pc, #408]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a65      	ldr	r2, [pc, #404]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d013      	beq.n	8003f9c <HAL_RCC_OscConfig+0xe0>
 8003f74:	f7fd fa9a 	bl	80014ac <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0xd2>
 8003f7c:	f7fd fa96 	bl	80014ac <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b64      	cmp	r3, #100	; 0x64
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0xd2>
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e207      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 8003f8e:	4b5b      	ldr	r3, [pc, #364]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0xc0>
 8003f9a:	e014      	b.n	8003fc6 <HAL_RCC_OscConfig+0x10a>
 8003f9c:	f7fd fa86 	bl	80014ac <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0xfa>
 8003fa4:	f7fd fa82 	bl	80014ac <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b64      	cmp	r3, #100	; 0x64
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0xfa>
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e1f3      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 8003fb6:	4b51      	ldr	r3, [pc, #324]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0xe8>
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCC_OscConfig+0x10a>
 8003fc4:	bf00      	nop
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d063      	beq.n	800409a <HAL_RCC_OscConfig+0x1de>
 8003fd2:	4b4a      	ldr	r3, [pc, #296]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x13a>
 8003fde:	4b47      	ldr	r3, [pc, #284]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d11c      	bne.n	8004024 <HAL_RCC_OscConfig+0x168>
 8003fea:	4b44      	ldr	r3, [pc, #272]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d116      	bne.n	8004024 <HAL_RCC_OscConfig+0x168>
 8003ff6:	4b41      	ldr	r3, [pc, #260]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <HAL_RCC_OscConfig+0x152>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d001      	beq.n	800400e <HAL_RCC_OscConfig+0x152>
 800400a:	2301      	movs	r3, #1
 800400c:	e1c7      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 800400e:	4b3b      	ldr	r3, [pc, #236]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4937      	ldr	r1, [pc, #220]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 800401e:	4313      	orrs	r3, r2
 8004020:	600b      	str	r3, [r1, #0]
 8004022:	e03a      	b.n	800409a <HAL_RCC_OscConfig+0x1de>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d020      	beq.n	800406e <HAL_RCC_OscConfig+0x1b2>
 800402c:	4b34      	ldr	r3, [pc, #208]	; (8004100 <HAL_RCC_OscConfig+0x244>)
 800402e:	2201      	movs	r2, #1
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	f7fd fa3b 	bl	80014ac <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x190>
 800403a:	f7fd fa37 	bl	80014ac <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x190>
 8004048:	2303      	movs	r3, #3
 800404a:	e1a8      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 800404c:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x17e>
 8004058:	4b28      	ldr	r3, [pc, #160]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4925      	ldr	r1, [pc, #148]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8004068:	4313      	orrs	r3, r2
 800406a:	600b      	str	r3, [r1, #0]
 800406c:	e015      	b.n	800409a <HAL_RCC_OscConfig+0x1de>
 800406e:	4b24      	ldr	r3, [pc, #144]	; (8004100 <HAL_RCC_OscConfig+0x244>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	f7fd fa1a 	bl	80014ac <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x1d2>
 800407c:	f7fd fa16 	bl	80014ac <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x1d2>
 800408a:	2303      	movs	r3, #3
 800408c:	e187      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 800408e:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x1c0>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d036      	beq.n	8004114 <HAL_RCC_OscConfig+0x258>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <HAL_RCC_OscConfig+0x220>
 80040ae:	4b15      	ldr	r3, [pc, #84]	; (8004104 <HAL_RCC_OscConfig+0x248>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	f7fd f9fa 	bl	80014ac <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x212>
 80040bc:	f7fd f9f6 	bl	80014ac <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x212>
 80040ca:	2303      	movs	r3, #3
 80040cc:	e167      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 80040d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0x200>
 80040da:	e01b      	b.n	8004114 <HAL_RCC_OscConfig+0x258>
 80040dc:	4b09      	ldr	r3, [pc, #36]	; (8004104 <HAL_RCC_OscConfig+0x248>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	f7fd f9e3 	bl	80014ac <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]
 80040e8:	e00e      	b.n	8004108 <HAL_RCC_OscConfig+0x24c>
 80040ea:	f7fd f9df 	bl	80014ac <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d907      	bls.n	8004108 <HAL_RCC_OscConfig+0x24c>
 80040f8:	2303      	movs	r3, #3
 80040fa:	e150      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 80040fc:	40023800 	.word	0x40023800
 8004100:	42470000 	.word	0x42470000
 8004104:	42470e80 	.word	0x42470e80
 8004108:	4b88      	ldr	r3, [pc, #544]	; (800432c <HAL_RCC_OscConfig+0x470>)
 800410a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1ea      	bne.n	80040ea <HAL_RCC_OscConfig+0x22e>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 8097 	beq.w	8004250 <HAL_RCC_OscConfig+0x394>
 8004122:	2300      	movs	r3, #0
 8004124:	75fb      	strb	r3, [r7, #23]
 8004126:	4b81      	ldr	r3, [pc, #516]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10f      	bne.n	8004152 <HAL_RCC_OscConfig+0x296>
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	4b7d      	ldr	r3, [pc, #500]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	4a7c      	ldr	r2, [pc, #496]	; (800432c <HAL_RCC_OscConfig+0x470>)
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004140:	6413      	str	r3, [r2, #64]	; 0x40
 8004142:	4b7a      	ldr	r3, [pc, #488]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2301      	movs	r3, #1
 8004150:	75fb      	strb	r3, [r7, #23]
 8004152:	4b77      	ldr	r3, [pc, #476]	; (8004330 <HAL_RCC_OscConfig+0x474>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d118      	bne.n	8004190 <HAL_RCC_OscConfig+0x2d4>
 800415e:	4b74      	ldr	r3, [pc, #464]	; (8004330 <HAL_RCC_OscConfig+0x474>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a73      	ldr	r2, [pc, #460]	; (8004330 <HAL_RCC_OscConfig+0x474>)
 8004164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	f7fd f99f 	bl	80014ac <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x2c8>
 8004172:	f7fd f99b 	bl	80014ac <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x2c8>
 8004180:	2303      	movs	r3, #3
 8004182:	e10c      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 8004184:	4b6a      	ldr	r3, [pc, #424]	; (8004330 <HAL_RCC_OscConfig+0x474>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x2b6>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d106      	bne.n	80041a6 <HAL_RCC_OscConfig+0x2ea>
 8004198:	4b64      	ldr	r3, [pc, #400]	; (800432c <HAL_RCC_OscConfig+0x470>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	4a63      	ldr	r2, [pc, #396]	; (800432c <HAL_RCC_OscConfig+0x470>)
 800419e:	f043 0301 	orr.w	r3, r3, #1
 80041a2:	6713      	str	r3, [r2, #112]	; 0x70
 80041a4:	e01c      	b.n	80041e0 <HAL_RCC_OscConfig+0x324>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b05      	cmp	r3, #5
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCC_OscConfig+0x30c>
 80041ae:	4b5f      	ldr	r3, [pc, #380]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	4a5e      	ldr	r2, [pc, #376]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041b4:	f043 0304 	orr.w	r3, r3, #4
 80041b8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ba:	4b5c      	ldr	r3, [pc, #368]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	4a5b      	ldr	r2, [pc, #364]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	6713      	str	r3, [r2, #112]	; 0x70
 80041c6:	e00b      	b.n	80041e0 <HAL_RCC_OscConfig+0x324>
 80041c8:	4b58      	ldr	r3, [pc, #352]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	4a57      	ldr	r2, [pc, #348]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041ce:	f023 0301 	bic.w	r3, r3, #1
 80041d2:	6713      	str	r3, [r2, #112]	; 0x70
 80041d4:	4b55      	ldr	r3, [pc, #340]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d8:	4a54      	ldr	r2, [pc, #336]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041da:	f023 0304 	bic.w	r3, r3, #4
 80041de:	6713      	str	r3, [r2, #112]	; 0x70
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d015      	beq.n	8004214 <HAL_RCC_OscConfig+0x358>
 80041e8:	f7fd f960 	bl	80014ac <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]
 80041ee:	e00a      	b.n	8004206 <HAL_RCC_OscConfig+0x34a>
 80041f0:	f7fd f95c 	bl	80014ac <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x34a>
 8004202:	2303      	movs	r3, #3
 8004204:	e0cb      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 8004206:	4b49      	ldr	r3, [pc, #292]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0ee      	beq.n	80041f0 <HAL_RCC_OscConfig+0x334>
 8004212:	e014      	b.n	800423e <HAL_RCC_OscConfig+0x382>
 8004214:	f7fd f94a 	bl	80014ac <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]
 800421a:	e00a      	b.n	8004232 <HAL_RCC_OscConfig+0x376>
 800421c:	f7fd f946 	bl	80014ac <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	f241 3288 	movw	r2, #5000	; 0x1388
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x376>
 800422e:	2303      	movs	r3, #3
 8004230:	e0b5      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 8004232:	4b3e      	ldr	r3, [pc, #248]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1ee      	bne.n	800421c <HAL_RCC_OscConfig+0x360>
 800423e:	7dfb      	ldrb	r3, [r7, #23]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <HAL_RCC_OscConfig+0x394>
 8004244:	4b39      	ldr	r3, [pc, #228]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	4a38      	ldr	r2, [pc, #224]	; (800432c <HAL_RCC_OscConfig+0x470>)
 800424a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424e:	6413      	str	r3, [r2, #64]	; 0x40
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80a1 	beq.w	800439c <HAL_RCC_OscConfig+0x4e0>
 800425a:	4b34      	ldr	r3, [pc, #208]	; (800432c <HAL_RCC_OscConfig+0x470>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b08      	cmp	r3, #8
 8004264:	d05c      	beq.n	8004320 <HAL_RCC_OscConfig+0x464>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d141      	bne.n	80042f2 <HAL_RCC_OscConfig+0x436>
 800426e:	4b31      	ldr	r3, [pc, #196]	; (8004334 <HAL_RCC_OscConfig+0x478>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	f7fd f91a 	bl	80014ac <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x3d2>
 800427c:	f7fd f916 	bl	80014ac <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x3d2>
 800428a:	2303      	movs	r3, #3
 800428c:	e087      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 800428e:	4b27      	ldr	r3, [pc, #156]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x3c0>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	019b      	lsls	r3, r3, #6
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	3b01      	subs	r3, #1
 80042b4:	041b      	lsls	r3, r3, #16
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	061b      	lsls	r3, r3, #24
 80042be:	491b      	ldr	r1, [pc, #108]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	604b      	str	r3, [r1, #4]
 80042c4:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <HAL_RCC_OscConfig+0x478>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	f7fd f8ef 	bl	80014ac <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x428>
 80042d2:	f7fd f8eb 	bl	80014ac <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x428>
 80042e0:	2303      	movs	r3, #3
 80042e2:	e05c      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 80042e4:	4b11      	ldr	r3, [pc, #68]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f0      	beq.n	80042d2 <HAL_RCC_OscConfig+0x416>
 80042f0:	e054      	b.n	800439c <HAL_RCC_OscConfig+0x4e0>
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <HAL_RCC_OscConfig+0x478>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	f7fd f8d8 	bl	80014ac <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x456>
 8004300:	f7fd f8d4 	bl	80014ac <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x456>
 800430e:	2303      	movs	r3, #3
 8004310:	e045      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x444>
 800431e:	e03d      	b.n	800439c <HAL_RCC_OscConfig+0x4e0>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d107      	bne.n	8004338 <HAL_RCC_OscConfig+0x47c>
 8004328:	2301      	movs	r3, #1
 800432a:	e038      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 800432c:	40023800 	.word	0x40023800
 8004330:	40007000 	.word	0x40007000
 8004334:	42470060 	.word	0x42470060
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_RCC_OscConfig+0x4ec>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d028      	beq.n	8004398 <HAL_RCC_OscConfig+0x4dc>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	429a      	cmp	r2, r3
 8004352:	d121      	bne.n	8004398 <HAL_RCC_OscConfig+0x4dc>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	429a      	cmp	r2, r3
 8004360:	d11a      	bne.n	8004398 <HAL_RCC_OscConfig+0x4dc>
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004368:	4013      	ands	r3, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800436e:	0192      	lsls	r2, r2, #6
 8004370:	4293      	cmp	r3, r2
 8004372:	d111      	bne.n	8004398 <HAL_RCC_OscConfig+0x4dc>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	3b01      	subs	r3, #1
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	429a      	cmp	r2, r3
 8004386:	d107      	bne.n	8004398 <HAL_RCC_OscConfig+0x4dc>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	061b      	lsls	r3, r3, #24
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_OscConfig+0x4e0>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 800439c:	2300      	movs	r3, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800

080043ac <HAL_RCC_ClockConfig>:
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x14>
 80043bc:	2301      	movs	r3, #1
 80043be:	e0cc      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
 80043c0:	4b68      	ldr	r3, [pc, #416]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d90c      	bls.n	80043e8 <HAL_RCC_ClockConfig+0x3c>
 80043ce:	4b65      	ldr	r3, [pc, #404]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	4b63      	ldr	r3, [pc, #396]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x3c>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0b8      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d020      	beq.n	8004436 <HAL_RCC_ClockConfig+0x8a>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_ClockConfig+0x60>
 8004400:	4b59      	ldr	r3, [pc, #356]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a58      	ldr	r2, [pc, #352]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800440a:	6093      	str	r3, [r2, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_RCC_ClockConfig+0x78>
 8004418:	4b53      	ldr	r3, [pc, #332]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a52      	ldr	r2, [pc, #328]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004422:	6093      	str	r3, [r2, #8]
 8004424:	4b50      	ldr	r3, [pc, #320]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	494d      	ldr	r1, [pc, #308]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d044      	beq.n	80044cc <HAL_RCC_ClockConfig+0x120>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d107      	bne.n	800445a <HAL_RCC_ClockConfig+0xae>
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d119      	bne.n	800448a <HAL_RCC_ClockConfig+0xde>
 8004456:	2301      	movs	r3, #1
 8004458:	e07f      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d003      	beq.n	800446a <HAL_RCC_ClockConfig+0xbe>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b03      	cmp	r3, #3
 8004468:	d107      	bne.n	800447a <HAL_RCC_ClockConfig+0xce>
 800446a:	4b3f      	ldr	r3, [pc, #252]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <HAL_RCC_ClockConfig+0xde>
 8004476:	2301      	movs	r3, #1
 8004478:	e06f      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
 800447a:	4b3b      	ldr	r3, [pc, #236]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCC_ClockConfig+0xde>
 8004486:	2301      	movs	r3, #1
 8004488:	e067      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
 800448a:	4b37      	ldr	r3, [pc, #220]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f023 0203 	bic.w	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	4934      	ldr	r1, [pc, #208]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	4313      	orrs	r3, r2
 800449a:	608b      	str	r3, [r1, #8]
 800449c:	f7fd f806 	bl	80014ac <HAL_GetTick>
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	e00a      	b.n	80044ba <HAL_RCC_ClockConfig+0x10e>
 80044a4:	f7fd f802 	bl	80014ac <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_ClockConfig+0x10e>
 80044b6:	2303      	movs	r3, #3
 80044b8:	e04f      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
 80044ba:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 020c 	and.w	r2, r3, #12
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d1eb      	bne.n	80044a4 <HAL_RCC_ClockConfig+0xf8>
 80044cc:	4b25      	ldr	r3, [pc, #148]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d20c      	bcs.n	80044f4 <HAL_RCC_ClockConfig+0x148>
 80044da:	4b22      	ldr	r3, [pc, #136]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	4b20      	ldr	r3, [pc, #128]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x148>
 80044f0:	2301      	movs	r3, #1
 80044f2:	e032      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_RCC_ClockConfig+0x166>
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4916      	ldr	r1, [pc, #88]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	4313      	orrs	r3, r2
 8004510:	608b      	str	r3, [r1, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <HAL_RCC_ClockConfig+0x186>
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	490e      	ldr	r1, [pc, #56]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
 8004532:	f000 f821 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 8004536:	4602      	mov	r2, r0
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	490a      	ldr	r1, [pc, #40]	; (800456c <HAL_RCC_ClockConfig+0x1c0>)
 8004544:	5ccb      	ldrb	r3, [r1, r3]
 8004546:	fa22 f303 	lsr.w	r3, r2, r3
 800454a:	4a09      	ldr	r2, [pc, #36]	; (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_RCC_ClockConfig+0x1c8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fc ff66 	bl	8001424 <HAL_InitTick>
 8004558:	2300      	movs	r3, #0
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40023c00 	.word	0x40023c00
 8004568:	40023800 	.word	0x40023800
 800456c:	080090c8 	.word	0x080090c8
 8004570:	20000000 	.word	0x20000000
 8004574:	20000004 	.word	0x20000004

08004578 <HAL_RCC_GetSysClockFreq>:
 8004578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800457c:	b094      	sub	sp, #80	; 0x50
 800457e:	af00      	add	r7, sp, #0
 8004580:	2300      	movs	r3, #0
 8004582:	647b      	str	r3, [r7, #68]	; 0x44
 8004584:	2300      	movs	r3, #0
 8004586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004588:	2300      	movs	r3, #0
 800458a:	643b      	str	r3, [r7, #64]	; 0x40
 800458c:	2300      	movs	r3, #0
 800458e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004590:	4b79      	ldr	r3, [pc, #484]	; (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b08      	cmp	r3, #8
 800459a:	d00d      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0x40>
 800459c:	2b08      	cmp	r3, #8
 800459e:	f200 80e1 	bhi.w	8004764 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x34>
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d003      	beq.n	80045b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80045aa:	e0db      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045ac:	4b73      	ldr	r3, [pc, #460]	; (800477c <HAL_RCC_GetSysClockFreq+0x204>)
 80045ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80045b0:	e0db      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x1f2>
 80045b2:	4b73      	ldr	r3, [pc, #460]	; (8004780 <HAL_RCC_GetSysClockFreq+0x208>)
 80045b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80045b6:	e0d8      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x1f2>
 80045b8:	4b6f      	ldr	r3, [pc, #444]	; (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c0:	647b      	str	r3, [r7, #68]	; 0x44
 80045c2:	4b6d      	ldr	r3, [pc, #436]	; (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d063      	beq.n	8004696 <HAL_RCC_GetSysClockFreq+0x11e>
 80045ce:	4b6a      	ldr	r3, [pc, #424]	; (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	099b      	lsrs	r3, r3, #6
 80045d4:	2200      	movs	r2, #0
 80045d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80045d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e0:	633b      	str	r3, [r7, #48]	; 0x30
 80045e2:	2300      	movs	r3, #0
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
 80045e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045ea:	4622      	mov	r2, r4
 80045ec:	462b      	mov	r3, r5
 80045ee:	f04f 0000 	mov.w	r0, #0
 80045f2:	f04f 0100 	mov.w	r1, #0
 80045f6:	0159      	lsls	r1, r3, #5
 80045f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045fc:	0150      	lsls	r0, r2, #5
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4621      	mov	r1, r4
 8004604:	1a51      	subs	r1, r2, r1
 8004606:	6139      	str	r1, [r7, #16]
 8004608:	4629      	mov	r1, r5
 800460a:	eb63 0301 	sbc.w	r3, r3, r1
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800461c:	4659      	mov	r1, fp
 800461e:	018b      	lsls	r3, r1, #6
 8004620:	4651      	mov	r1, sl
 8004622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004626:	4651      	mov	r1, sl
 8004628:	018a      	lsls	r2, r1, #6
 800462a:	4651      	mov	r1, sl
 800462c:	ebb2 0801 	subs.w	r8, r2, r1
 8004630:	4659      	mov	r1, fp
 8004632:	eb63 0901 	sbc.w	r9, r3, r1
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800464a:	4690      	mov	r8, r2
 800464c:	4699      	mov	r9, r3
 800464e:	4623      	mov	r3, r4
 8004650:	eb18 0303 	adds.w	r3, r8, r3
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	462b      	mov	r3, r5
 8004658:	eb49 0303 	adc.w	r3, r9, r3
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800466a:	4629      	mov	r1, r5
 800466c:	024b      	lsls	r3, r1, #9
 800466e:	4621      	mov	r1, r4
 8004670:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004674:	4621      	mov	r1, r4
 8004676:	024a      	lsls	r2, r1, #9
 8004678:	4610      	mov	r0, r2
 800467a:	4619      	mov	r1, r3
 800467c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800467e:	2200      	movs	r2, #0
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
 8004682:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004684:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004688:	f7fb fd9e 	bl	80001c8 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4613      	mov	r3, r2
 8004692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004694:	e058      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x1d0>
 8004696:	4b38      	ldr	r3, [pc, #224]	; (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	099b      	lsrs	r3, r3, #6
 800469c:	2200      	movs	r2, #0
 800469e:	4618      	mov	r0, r3
 80046a0:	4611      	mov	r1, r2
 80046a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046a6:	623b      	str	r3, [r7, #32]
 80046a8:	2300      	movs	r3, #0
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
 80046ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046b0:	4642      	mov	r2, r8
 80046b2:	464b      	mov	r3, r9
 80046b4:	f04f 0000 	mov.w	r0, #0
 80046b8:	f04f 0100 	mov.w	r1, #0
 80046bc:	0159      	lsls	r1, r3, #5
 80046be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046c2:	0150      	lsls	r0, r2, #5
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4641      	mov	r1, r8
 80046ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80046ce:	4649      	mov	r1, r9
 80046d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046e8:	ebb2 040a 	subs.w	r4, r2, sl
 80046ec:	eb63 050b 	sbc.w	r5, r3, fp
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	00eb      	lsls	r3, r5, #3
 80046fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046fe:	00e2      	lsls	r2, r4, #3
 8004700:	4614      	mov	r4, r2
 8004702:	461d      	mov	r5, r3
 8004704:	4643      	mov	r3, r8
 8004706:	18e3      	adds	r3, r4, r3
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	464b      	mov	r3, r9
 800470c:	eb45 0303 	adc.w	r3, r5, r3
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800471e:	4629      	mov	r1, r5
 8004720:	028b      	lsls	r3, r1, #10
 8004722:	4621      	mov	r1, r4
 8004724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004728:	4621      	mov	r1, r4
 800472a:	028a      	lsls	r2, r1, #10
 800472c:	4610      	mov	r0, r2
 800472e:	4619      	mov	r1, r3
 8004730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004732:	2200      	movs	r2, #0
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	61fa      	str	r2, [r7, #28]
 8004738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800473c:	f7fb fd44 	bl	80001c8 <__aeabi_uldivmod>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4613      	mov	r3, r2
 8004746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	0c1b      	lsrs	r3, r3, #16
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	3301      	adds	r3, #1
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	643b      	str	r3, [r7, #64]	; 0x40
 8004758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800475a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	64bb      	str	r3, [r7, #72]	; 0x48
 8004762:	e002      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x1f2>
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <HAL_RCC_GetSysClockFreq+0x204>)
 8004766:	64bb      	str	r3, [r7, #72]	; 0x48
 8004768:	bf00      	nop
 800476a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800476c:	4618      	mov	r0, r3
 800476e:	3750      	adds	r7, #80	; 0x50
 8004770:	46bd      	mov	sp, r7
 8004772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800
 800477c:	00f42400 	.word	0x00f42400
 8004780:	007a1200 	.word	0x007a1200

08004784 <HAL_RCC_GetHCLKFreq>:
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <HAL_RCC_GetHCLKFreq+0x14>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	20000000 	.word	0x20000000

0800479c <HAL_RCC_GetPCLK1Freq>:
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
 80047a0:	f7ff fff0 	bl	8004784 <HAL_RCC_GetHCLKFreq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b05      	ldr	r3, [pc, #20]	; (80047bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	0a9b      	lsrs	r3, r3, #10
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	4903      	ldr	r1, [pc, #12]	; (80047c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b2:	5ccb      	ldrb	r3, [r1, r3]
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
 80047b8:	4618      	mov	r0, r3
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40023800 	.word	0x40023800
 80047c0:	080090d8 	.word	0x080090d8

080047c4 <HAL_RCCEx_PeriphCLKConfig>:
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	2300      	movs	r3, #0
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	2300      	movs	r3, #0
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d105      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x28>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d035      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80047ec:	4b62      	ldr	r3, [pc, #392]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	f7fc fe5b 	bl	80014ac <HAL_GetTick>
 80047f6:	6178      	str	r0, [r7, #20]
 80047f8:	e008      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x48>
 80047fa:	f7fc fe57 	bl	80014ac <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004808:	2303      	movs	r3, #3
 800480a:	e0b0      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800480c:	4b5b      	ldr	r3, [pc, #364]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f0      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x36>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	019a      	lsls	r2, r3, #6
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	071b      	lsls	r3, r3, #28
 8004824:	4955      	ldr	r1, [pc, #340]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800482c:	4b52      	ldr	r3, [pc, #328]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800482e:	2201      	movs	r2, #1
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	f7fc fe3b 	bl	80014ac <HAL_GetTick>
 8004836:	6178      	str	r0, [r7, #20]
 8004838:	e008      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x88>
 800483a:	f7fc fe37 	bl	80014ac <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004848:	2303      	movs	r3, #3
 800484a:	e090      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800484c:	4b4b      	ldr	r3, [pc, #300]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8083 	beq.w	800496c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	4b44      	ldr	r3, [pc, #272]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	4a43      	ldr	r2, [pc, #268]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004874:	6413      	str	r3, [r2, #64]	; 0x40
 8004876:	4b41      	ldr	r3, [pc, #260]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4b3f      	ldr	r3, [pc, #252]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a3e      	ldr	r2, [pc, #248]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	f7fc fe0d 	bl	80014ac <HAL_GetTick>
 8004892:	6178      	str	r0, [r7, #20]
 8004894:	e008      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8004896:	f7fc fe09 	bl	80014ac <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80048a4:	2303      	movs	r3, #3
 80048a6:	e062      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80048a8:	4b35      	ldr	r3, [pc, #212]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80048b4:	4b31      	ldr	r3, [pc, #196]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d02f      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d028      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80048d2:	4b2a      	ldr	r3, [pc, #168]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	4b29      	ldr	r3, [pc, #164]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	4b28      	ldr	r3, [pc, #160]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	4a24      	ldr	r2, [pc, #144]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	6713      	str	r3, [r2, #112]	; 0x70
 80048ee:	4b23      	ldr	r3, [pc, #140]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d114      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80048fa:	f7fc fdd7 	bl	80014ac <HAL_GetTick>
 80048fe:	6178      	str	r0, [r7, #20]
 8004900:	e00a      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004902:	f7fc fdd3 	bl	80014ac <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004910:	4293      	cmp	r3, r2
 8004912:	d901      	bls.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004914:	2303      	movs	r3, #3
 8004916:	e02a      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004918:	4b18      	ldr	r3, [pc, #96]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0ee      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004930:	d10d      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004932:	4b12      	ldr	r3, [pc, #72]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004946:	490d      	ldr	r1, [pc, #52]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]
 800494c:	e005      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800494e:	4b0b      	ldr	r3, [pc, #44]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	4a0a      	ldr	r2, [pc, #40]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004954:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004958:	6093      	str	r3, [r2, #8]
 800495a:	4b08      	ldr	r3, [pc, #32]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800495c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004966:	4905      	ldr	r1, [pc, #20]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004968:	4313      	orrs	r3, r2
 800496a:	670b      	str	r3, [r1, #112]	; 0x70
 800496c:	2300      	movs	r3, #0
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	42470068 	.word	0x42470068
 800497c:	40023800 	.word	0x40023800
 8004980:	40007000 	.word	0x40007000
 8004984:	42470e40 	.word	0x42470e40

08004988 <HAL_RCCEx_GetPeriphCLKFreq>:
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	2300      	movs	r3, #0
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d13e      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80049a6:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d12f      	bne.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80049bc:	4b1e      	ldr	r3, [pc, #120]	; (8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	e02f      	b.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80049c2:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ce:	d108      	bne.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80049d0:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049d8:	4a18      	ldr	r2, [pc, #96]	; (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80049da:	fbb2 f3f3 	udiv	r3, r2, r3
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	e007      	b.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80049e2:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ea:	4a15      	ldr	r2, [pc, #84]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	613b      	str	r3, [r7, #16]
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f8:	099b      	lsrs	r3, r3, #6
 80049fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	fb02 f303 	mul.w	r3, r2, r3
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a0c:	0f1b      	lsrs	r3, r3, #28
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	e002      	b.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	4618      	mov	r0, r3
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800
 8004a38:	00bb8000 	.word	0x00bb8000
 8004a3c:	007a1200 	.word	0x007a1200
 8004a40:	00f42400 	.word	0x00f42400

08004a44 <HAL_SPI_Init>:
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_SPI_Init+0x12>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e07b      	b.n	8004b4e <HAL_SPI_Init+0x10a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d108      	bne.n	8004a70 <HAL_SPI_Init+0x2c>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a66:	d009      	beq.n	8004a7c <HAL_SPI_Init+0x38>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	61da      	str	r2, [r3, #28]
 8004a6e:	e005      	b.n	8004a7c <HAL_SPI_Init+0x38>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	611a      	str	r2, [r3, #16]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	615a      	str	r2, [r3, #20]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	629a      	str	r2, [r3, #40]	; 0x28
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <HAL_SPI_Init+0x58>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fc fba2 	bl	80011e0 <HAL_SPI_MspInit>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b00:	ea42 0103 	orr.w	r1, r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	f003 0104 	and.w	r1, r3, #4
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	f003 0210 	and.w	r2, r3, #16
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b3c:	61da      	str	r2, [r3, #28]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <HAL_SPI_Transmit_IT>:
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	80fb      	strh	r3, [r7, #6]
 8004b66:	2300      	movs	r3, #0
 8004b68:	75fb      	strb	r3, [r7, #23]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_SPI_Transmit_IT+0x20>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e06f      	b.n	8004c58 <HAL_SPI_Transmit_IT+0x100>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_SPI_Transmit_IT+0x34>
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <HAL_SPI_Transmit_IT+0x3a>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	75fb      	strb	r3, [r7, #23]
 8004b90:	e05d      	b.n	8004c4e <HAL_SPI_Transmit_IT+0xf6>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d002      	beq.n	8004ba4 <HAL_SPI_Transmit_IT+0x4c>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	75fb      	strb	r3, [r7, #23]
 8004ba2:	e054      	b.n	8004c4e <HAL_SPI_Transmit_IT+0xf6>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	869a      	strh	r2, [r3, #52]	; 0x34
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	88fa      	ldrh	r2, [r7, #6]
 8004bc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	639a      	str	r2, [r3, #56]	; 0x38
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_SPI_Transmit_IT+0x94>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a1f      	ldr	r2, [pc, #124]	; (8004c64 <HAL_SPI_Transmit_IT+0x10c>)
 8004be8:	645a      	str	r2, [r3, #68]	; 0x44
 8004bea:	e002      	b.n	8004bf2 <HAL_SPI_Transmit_IT+0x9a>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <HAL_SPI_Transmit_IT+0x110>)
 8004bf0:	645a      	str	r2, [r3, #68]	; 0x44
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bfa:	d10f      	bne.n	8004c1c <HAL_SPI_Transmit_IT+0xc4>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b40      	cmp	r3, #64	; 0x40
 8004c38:	d008      	beq.n	8004c4c <HAL_SPI_Transmit_IT+0xf4>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e000      	b.n	8004c4e <HAL_SPI_Transmit_IT+0xf6>
 8004c4c:	bf00      	nop
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	08005389 	.word	0x08005389
 8004c68:	08005343 	.word	0x08005343

08004c6c <HAL_SPI_Receive_IT>:
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	4613      	mov	r3, r2
 8004c78:	80fb      	strh	r3, [r7, #6]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75fb      	strb	r3, [r7, #23]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d110      	bne.n	8004ca8 <HAL_SPI_Receive_IT+0x3c>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c8e:	d10b      	bne.n	8004ca8 <HAL_SPI_Receive_IT+0x3c>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2204      	movs	r2, #4
 8004c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f882 	bl	8004da8 <HAL_SPI_TransmitReceive_IT>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	e076      	b.n	8004d96 <HAL_SPI_Receive_IT+0x12a>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_SPI_Receive_IT+0x4a>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e06f      	b.n	8004d96 <HAL_SPI_Receive_IT+0x12a>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_Receive_IT+0x64>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	75fb      	strb	r3, [r7, #23]
 8004cce:	e05d      	b.n	8004d8c <HAL_SPI_Receive_IT+0x120>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_SPI_Receive_IT+0x70>
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <HAL_SPI_Receive_IT+0x76>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	75fb      	strb	r3, [r7, #23]
 8004ce0:	e054      	b.n	8004d8c <HAL_SPI_Receive_IT+0x120>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	639a      	str	r2, [r3, #56]	; 0x38
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	88fa      	ldrh	r2, [r7, #6]
 8004cfa:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	88fa      	ldrh	r2, [r7, #6]
 8004d00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	869a      	strh	r2, [r3, #52]	; 0x34
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_SPI_Receive_IT+0xbe>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4a1e      	ldr	r2, [pc, #120]	; (8004da0 <HAL_SPI_Receive_IT+0x134>)
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40
 8004d28:	e002      	b.n	8004d30 <HAL_SPI_Receive_IT+0xc4>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <HAL_SPI_Receive_IT+0x138>)
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d38:	d10f      	bne.n	8004d5a <HAL_SPI_Receive_IT+0xee>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004d68:	605a      	str	r2, [r3, #4]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b40      	cmp	r3, #64	; 0x40
 8004d76:	d008      	beq.n	8004d8a <HAL_SPI_Receive_IT+0x11e>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e000      	b.n	8004d8c <HAL_SPI_Receive_IT+0x120>
 8004d8a:	bf00      	nop
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	080052fd 	.word	0x080052fd
 8004da4:	080052b3 	.word	0x080052b3

08004da8 <HAL_SPI_TransmitReceive_IT>:
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	807b      	strh	r3, [r7, #2]
 8004db6:	2300      	movs	r3, #0
 8004db8:	75fb      	strb	r3, [r7, #23]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_SPI_TransmitReceive_IT+0x20>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e075      	b.n	8004eb4 <HAL_SPI_TransmitReceive_IT+0x10c>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dd6:	75bb      	strb	r3, [r7, #22]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	7dbb      	ldrb	r3, [r7, #22]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d00d      	beq.n	8004e00 <HAL_SPI_TransmitReceive_IT+0x58>
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dea:	d106      	bne.n	8004dfa <HAL_SPI_TransmitReceive_IT+0x52>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <HAL_SPI_TransmitReceive_IT+0x52>
 8004df4:	7dbb      	ldrb	r3, [r7, #22]
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d002      	beq.n	8004e00 <HAL_SPI_TransmitReceive_IT+0x58>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	75fb      	strb	r3, [r7, #23]
 8004dfe:	e054      	b.n	8004eaa <HAL_SPI_TransmitReceive_IT+0x102>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004e0c:	887b      	ldrh	r3, [r7, #2]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <HAL_SPI_TransmitReceive_IT+0x70>
 8004e12:	2301      	movs	r3, #1
 8004e14:	75fb      	strb	r3, [r7, #23]
 8004e16:	e048      	b.n	8004eaa <HAL_SPI_TransmitReceive_IT+0x102>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d003      	beq.n	8004e2c <HAL_SPI_TransmitReceive_IT+0x84>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2205      	movs	r2, #5
 8004e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	655a      	str	r2, [r3, #84]	; 0x54
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	887a      	ldrh	r2, [r7, #2]
 8004e3c:	869a      	strh	r2, [r3, #52]	; 0x34
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	887a      	ldrh	r2, [r7, #2]
 8004e42:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	639a      	str	r2, [r3, #56]	; 0x38
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	887a      	ldrh	r2, [r7, #2]
 8004e4e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	887a      	ldrh	r2, [r7, #2]
 8004e54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d006      	beq.n	8004e6c <HAL_SPI_TransmitReceive_IT+0xc4>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <HAL_SPI_TransmitReceive_IT+0x118>)
 8004e62:	641a      	str	r2, [r3, #64]	; 0x40
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8004e68:	645a      	str	r2, [r3, #68]	; 0x44
 8004e6a:	e005      	b.n	8004e78 <HAL_SPI_TransmitReceive_IT+0xd0>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4a16      	ldr	r2, [pc, #88]	; (8004ec8 <HAL_SPI_TransmitReceive_IT+0x120>)
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <HAL_SPI_TransmitReceive_IT+0x124>)
 8004e76:	645a      	str	r2, [r3, #68]	; 0x44
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d008      	beq.n	8004ea8 <HAL_SPI_TransmitReceive_IT+0x100>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e000      	b.n	8004eaa <HAL_SPI_TransmitReceive_IT+0x102>
 8004ea8:	bf00      	nop
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004eb2:	7dfb      	ldrb	r3, [r7, #23]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	080051f5 	.word	0x080051f5
 8004ec4:	08005255 	.word	0x08005255
 8004ec8:	08005131 	.word	0x08005131
 8004ecc:	08005195 	.word	0x08005195

08004ed0 <HAL_SPI_IRQHandler>:
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10e      	bne.n	8004f10 <HAL_SPI_IRQHandler+0x40>
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d009      	beq.n	8004f10 <HAL_SPI_IRQHandler+0x40>
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d004      	beq.n	8004f10 <HAL_SPI_IRQHandler+0x40>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
 8004f0e:	e0ce      	b.n	80050ae <HAL_SPI_IRQHandler+0x1de>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d009      	beq.n	8004f2e <HAL_SPI_IRQHandler+0x5e>
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d004      	beq.n	8004f2e <HAL_SPI_IRQHandler+0x5e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	4798      	blx	r3
 8004f2c:	e0bf      	b.n	80050ae <HAL_SPI_IRQHandler+0x1de>
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <HAL_SPI_IRQHandler+0x7e>
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d105      	bne.n	8004f4e <HAL_SPI_IRQHandler+0x7e>
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80b0 	beq.w	80050ae <HAL_SPI_IRQHandler+0x1de>
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80aa 	beq.w	80050ae <HAL_SPI_IRQHandler+0x1de>
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d023      	beq.n	8004fac <HAL_SPI_IRQHandler+0xdc>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d011      	beq.n	8004f94 <HAL_SPI_IRQHandler+0xc4>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f74:	f043 0204 	orr.w	r2, r3, #4
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	655a      	str	r2, [r3, #84]	; 0x54
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	e00b      	b.n	8004fac <HAL_SPI_IRQHandler+0xdc>
 8004f94:	2300      	movs	r3, #0
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	e080      	b.n	80050ae <HAL_SPI_IRQHandler+0x1de>
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d014      	beq.n	8004fe0 <HAL_SPI_IRQHandler+0x110>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fba:	f043 0201 	orr.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	655a      	str	r2, [r3, #84]	; 0x54
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00c      	beq.n	8005004 <HAL_SPI_IRQHandler+0x134>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	f043 0208 	orr.w	r2, r3, #8
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	655a      	str	r2, [r3, #84]	; 0x54
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005008:	2b00      	cmp	r3, #0
 800500a:	d04f      	beq.n	80050ac <HAL_SPI_IRQHandler+0x1dc>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800501a:	605a      	str	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d104      	bne.n	8005038 <HAL_SPI_IRQHandler+0x168>
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d034      	beq.n	80050a2 <HAL_SPI_IRQHandler+0x1d2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0203 	bic.w	r2, r2, #3
 8005046:	605a      	str	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d011      	beq.n	8005074 <HAL_SPI_IRQHandler+0x1a4>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005054:	4a17      	ldr	r2, [pc, #92]	; (80050b4 <HAL_SPI_IRQHandler+0x1e4>)
 8005056:	651a      	str	r2, [r3, #80]	; 0x50
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505c:	4618      	mov	r0, r3
 800505e:	f7fc fb66 	bl	800172e <HAL_DMA_Abort_IT>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_SPI_IRQHandler+0x1a4>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	655a      	str	r2, [r3, #84]	; 0x54
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005078:	2b00      	cmp	r3, #0
 800507a:	d016      	beq.n	80050aa <HAL_SPI_IRQHandler+0x1da>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005080:	4a0c      	ldr	r2, [pc, #48]	; (80050b4 <HAL_SPI_IRQHandler+0x1e4>)
 8005082:	651a      	str	r2, [r3, #80]	; 0x50
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005088:	4618      	mov	r0, r3
 800508a:	f7fc fb50 	bl	800172e <HAL_DMA_Abort_IT>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <HAL_SPI_IRQHandler+0x1da>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	655a      	str	r2, [r3, #84]	; 0x54
 80050a0:	e003      	b.n	80050aa <HAL_SPI_IRQHandler+0x1da>
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f826 	bl	80050f4 <HAL_SPI_ErrorCallback>
 80050a8:	e000      	b.n	80050ac <HAL_SPI_IRQHandler+0x1dc>
 80050aa:	bf00      	nop
 80050ac:	bf00      	nop
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	08005109 	.word	0x08005109

080050b8 <HAL_SPI_TxCpltCallback>:
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_SPI_RxCpltCallback>:
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_SPI_TxRxCpltCallback>:
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_SPI_ErrorCallback>:
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <SPI_DMAAbortOnError>:
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	86da      	strh	r2, [r3, #54]	; 0x36
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f7ff ffe6 	bl	80050f4 <HAL_SPI_ErrorCallback>
 8005128:	bf00      	nop
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <SPI_2linesRxISR_8BIT>:
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f103 020c 	add.w	r2, r3, #12
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	7812      	ldrb	r2, [r2, #0]
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	639a      	str	r2, [r3, #56]	; 0x38
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10f      	bne.n	800518c <SPI_2linesRxISR_8BIT+0x5c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800517a:	605a      	str	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <SPI_2linesRxISR_8BIT+0x5c>
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa50 	bl	800562c <SPI_CloseRxTx_ISR>
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <SPI_2linesTxISR_8BIT>:
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	7812      	ldrb	r2, [r2, #0]
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10f      	bne.n	80051ec <SPI_2linesTxISR_8BIT+0x58>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051da:	605a      	str	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <SPI_2linesTxISR_8BIT+0x58>
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fa20 	bl	800562c <SPI_CloseRxTx_ISR>
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <SPI_2linesRxISR_16BIT>:
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	b292      	uxth	r2, r2
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	1c9a      	adds	r2, r3, #2
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	639a      	str	r2, [r3, #56]	; 0x38
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10f      	bne.n	800524c <SPI_2linesRxISR_16BIT+0x58>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800523a:	605a      	str	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d102      	bne.n	800524c <SPI_2linesRxISR_16BIT+0x58>
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f9f0 	bl	800562c <SPI_CloseRxTx_ISR>
 800524c:	bf00      	nop
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <SPI_2linesTxISR_16BIT>:
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	881a      	ldrh	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60da      	str	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526c:	1c9a      	adds	r2, r3, #2
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	631a      	str	r2, [r3, #48]	; 0x30
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10f      	bne.n	80052aa <SPI_2linesTxISR_16BIT+0x56>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005298:	605a      	str	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <SPI_2linesTxISR_16BIT+0x56>
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f9c1 	bl	800562c <SPI_CloseRxTx_ISR>
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <SPI_RxISR_8BIT>:
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f103 020c 	add.w	r2, r3, #12
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	7812      	ldrb	r2, [r2, #0]
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d102      	bne.n	80052f4 <SPI_RxISR_8BIT+0x42>
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fa10 	bl	8005714 <SPI_CloseRx_ISR>
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <SPI_RxISR_16BIT>:
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	b292      	uxth	r2, r2
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	1c9a      	adds	r2, r3, #2
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	87da      	strh	r2, [r3, #62]	; 0x3e
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <SPI_RxISR_16BIT+0x3e>
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f9ed 	bl	8005714 <SPI_CloseRx_ISR>
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <SPI_TxISR_8BIT>:
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	330c      	adds	r3, #12
 8005354:	7812      	ldrb	r2, [r2, #0]
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005366:	b29b      	uxth	r3, r3
 8005368:	3b01      	subs	r3, #1
 800536a:	b29a      	uxth	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <SPI_TxISR_8BIT+0x3e>
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fa0a 	bl	8005794 <SPI_CloseTx_ISR>
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <SPI_TxISR_16BIT>:
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005394:	881a      	ldrh	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60da      	str	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	1c9a      	adds	r2, r3, #2
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <SPI_TxISR_16BIT+0x3c>
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f9e8 	bl	8005794 <SPI_CloseTx_ISR>
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <SPI_WaitFlagStateUntilTimeout>:
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	71fb      	strb	r3, [r7, #7]
 80053dc:	f7fc f866 	bl	80014ac <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	4413      	add	r3, r2
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	f7fc f85e 	bl	80014ac <HAL_GetTick>
 80053f0:	61b8      	str	r0, [r7, #24]
 80053f2:	4b39      	ldr	r3, [pc, #228]	; (80054d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	015b      	lsls	r3, r3, #5
 80053f8:	0d1b      	lsrs	r3, r3, #20
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	fb02 f303 	mul.w	r3, r2, r3
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	e054      	b.n	80054ae <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	d050      	beq.n	80054ae <SPI_WaitFlagStateUntilTimeout+0xe2>
 800540c:	f7fc f84e 	bl	80014ac <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	429a      	cmp	r2, r3
 800541a:	d902      	bls.n	8005422 <SPI_WaitFlagStateUntilTimeout+0x56>
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d13d      	bne.n	800549e <SPI_WaitFlagStateUntilTimeout+0xd2>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005430:	605a      	str	r2, [r3, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800543a:	d111      	bne.n	8005460 <SPI_WaitFlagStateUntilTimeout+0x94>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005444:	d004      	beq.n	8005450 <SPI_WaitFlagStateUntilTimeout+0x84>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544e:	d107      	bne.n	8005460 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005468:	d10f      	bne.n	800548a <SPI_WaitFlagStateUntilTimeout+0xbe>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800549a:	2303      	movs	r3, #3
 800549c:	e017      	b.n	80054ce <SPI_WaitFlagStateUntilTimeout+0x102>
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
 80054a4:	2300      	movs	r3, #0
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d19b      	bne.n	8005404 <SPI_WaitFlagStateUntilTimeout+0x38>
 80054cc:	2300      	movs	r3, #0
 80054ce:	4618      	mov	r0, r3
 80054d0:	3720      	adds	r7, #32
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000000 	.word	0x20000000

080054dc <SPI_EndRxTransaction>:
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054f0:	d111      	bne.n	8005516 <SPI_EndRxTransaction+0x3a>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fa:	d004      	beq.n	8005506 <SPI_EndRxTransaction+0x2a>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005504:	d107      	bne.n	8005516 <SPI_EndRxTransaction+0x3a>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800551e:	d12a      	bne.n	8005576 <SPI_EndRxTransaction+0x9a>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005528:	d012      	beq.n	8005550 <SPI_EndRxTransaction+0x74>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2200      	movs	r2, #0
 8005532:	2180      	movs	r1, #128	; 0x80
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f7ff ff49 	bl	80053cc <SPI_WaitFlagStateUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d02d      	beq.n	800559c <SPI_EndRxTransaction+0xc0>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005544:	f043 0220 	orr.w	r2, r3, #32
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	655a      	str	r2, [r3, #84]	; 0x54
 800554c:	2303      	movs	r3, #3
 800554e:	e026      	b.n	800559e <SPI_EndRxTransaction+0xc2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2200      	movs	r2, #0
 8005558:	2101      	movs	r1, #1
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff ff36 	bl	80053cc <SPI_WaitFlagStateUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01a      	beq.n	800559c <SPI_EndRxTransaction+0xc0>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556a:	f043 0220 	orr.w	r2, r3, #32
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	655a      	str	r2, [r3, #84]	; 0x54
 8005572:	2303      	movs	r3, #3
 8005574:	e013      	b.n	800559e <SPI_EndRxTransaction+0xc2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2200      	movs	r2, #0
 800557e:	2101      	movs	r1, #1
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f7ff ff23 	bl	80053cc <SPI_WaitFlagStateUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <SPI_EndRxTransaction+0xc0>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005590:	f043 0220 	orr.w	r2, r3, #32
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	655a      	str	r2, [r3, #84]	; 0x54
 8005598:	2303      	movs	r3, #3
 800559a:	e000      	b.n	800559e <SPI_EndRxTransaction+0xc2>
 800559c:	2300      	movs	r3, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <SPI_EndRxTxTransaction>:
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	4b1b      	ldr	r3, [pc, #108]	; (8005624 <SPI_EndRxTxTransaction+0x7c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1b      	ldr	r2, [pc, #108]	; (8005628 <SPI_EndRxTxTransaction+0x80>)
 80055ba:	fba2 2303 	umull	r2, r3, r2, r3
 80055be:	0d5b      	lsrs	r3, r3, #21
 80055c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055c4:	fb02 f303 	mul.w	r3, r2, r3
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055d2:	d112      	bne.n	80055fa <SPI_EndRxTxTransaction+0x52>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2200      	movs	r2, #0
 80055dc:	2180      	movs	r1, #128	; 0x80
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f7ff fef4 	bl	80053cc <SPI_WaitFlagStateUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d016      	beq.n	8005618 <SPI_EndRxTxTransaction+0x70>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ee:	f043 0220 	orr.w	r2, r3, #32
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	655a      	str	r2, [r3, #84]	; 0x54
 80055f6:	2303      	movs	r3, #3
 80055f8:	e00f      	b.n	800561a <SPI_EndRxTxTransaction+0x72>
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <SPI_EndRxTxTransaction+0x6e>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	3b01      	subs	r3, #1
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005610:	2b80      	cmp	r3, #128	; 0x80
 8005612:	d0f2      	beq.n	80055fa <SPI_EndRxTxTransaction+0x52>
 8005614:	e000      	b.n	8005618 <SPI_EndRxTxTransaction+0x70>
 8005616:	bf00      	nop
 8005618:	2300      	movs	r3, #0
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000000 	.word	0x20000000
 8005628:	165e9f81 	.word	0x165e9f81

0800562c <SPI_CloseRxTx_ISR>:
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	4b35      	ldr	r3, [pc, #212]	; (800570c <SPI_CloseRxTx_ISR+0xe0>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a35      	ldr	r2, [pc, #212]	; (8005710 <SPI_CloseRxTx_ISR+0xe4>)
 800563a:	fba2 2303 	umull	r2, r3, r2, r3
 800563e:	0a5b      	lsrs	r3, r3, #9
 8005640:	2264      	movs	r2, #100	; 0x64
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	f7fb ff30 	bl	80014ac <HAL_GetTick>
 800564c:	6178      	str	r0, [r7, #20]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0220 	bic.w	r2, r2, #32
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d106      	bne.n	8005672 <SPI_CloseRxTx_ISR+0x46>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005668:	f043 0220 	orr.w	r2, r3, #32
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	655a      	str	r2, [r3, #84]	; 0x54
 8005670:	e009      	b.n	8005686 <SPI_CloseRxTx_ISR+0x5a>
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	3b01      	subs	r3, #1
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0eb      	beq.n	800565e <SPI_CloseRxTx_ISR+0x32>
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	2164      	movs	r1, #100	; 0x64
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff ff8c 	bl	80055a8 <SPI_EndRxTxTransaction>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <SPI_CloseRxTx_ISR+0x76>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569a:	f043 0220 	orr.w	r2, r3, #32
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	655a      	str	r2, [r3, #84]	; 0x54
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <SPI_CloseRxTx_ISR+0x94>
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d115      	bne.n	80056f4 <SPI_CloseRxTx_ISR+0xc8>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d107      	bne.n	80056e4 <SPI_CloseRxTx_ISR+0xb8>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff fcf5 	bl	80050cc <HAL_SPI_RxCpltCallback>
 80056e2:	e00e      	b.n	8005702 <SPI_CloseRxTx_ISR+0xd6>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff fcf7 	bl	80050e0 <HAL_SPI_TxRxCpltCallback>
 80056f2:	e006      	b.n	8005702 <SPI_CloseRxTx_ISR+0xd6>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff fcf9 	bl	80050f4 <HAL_SPI_ErrorCallback>
 8005702:	bf00      	nop
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000000 	.word	0x20000000
 8005710:	057619f1 	.word	0x057619f1

08005714 <SPI_CloseRx_ISR>:
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800572a:	605a      	str	r2, [r3, #4]
 800572c:	f7fb febe 	bl	80014ac <HAL_GetTick>
 8005730:	4603      	mov	r3, r0
 8005732:	461a      	mov	r2, r3
 8005734:	2164      	movs	r1, #100	; 0x64
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fed0 	bl	80054dc <SPI_EndRxTransaction>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <SPI_CloseRx_ISR+0x3a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005746:	f043 0220 	orr.w	r2, r3, #32
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	655a      	str	r2, [r3, #84]	; 0x54
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10a      	bne.n	800576c <SPI_CloseRx_ISR+0x58>
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005778:	2b00      	cmp	r3, #0
 800577a:	d103      	bne.n	8005784 <SPI_CloseRx_ISR+0x70>
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff fca5 	bl	80050cc <HAL_SPI_RxCpltCallback>
 8005782:	e002      	b.n	800578a <SPI_CloseRx_ISR+0x76>
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff fcb5 	bl	80050f4 <HAL_SPI_ErrorCallback>
 800578a:	bf00      	nop
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <SPI_CloseTx_ISR>:
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	4b2c      	ldr	r3, [pc, #176]	; (8005850 <SPI_CloseTx_ISR+0xbc>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a2c      	ldr	r2, [pc, #176]	; (8005854 <SPI_CloseTx_ISR+0xc0>)
 80057a2:	fba2 2303 	umull	r2, r3, r2, r3
 80057a6:	0a5b      	lsrs	r3, r3, #9
 80057a8:	2264      	movs	r2, #100	; 0x64
 80057aa:	fb02 f303 	mul.w	r3, r2, r3
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	f7fb fe7c 	bl	80014ac <HAL_GetTick>
 80057b4:	6178      	str	r0, [r7, #20]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <SPI_CloseTx_ISR+0x36>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	f043 0220 	orr.w	r2, r3, #32
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54
 80057c8:	e009      	b.n	80057de <SPI_CloseTx_ISR+0x4a>
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0eb      	beq.n	80057b6 <SPI_CloseTx_ISR+0x22>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057ec:	605a      	str	r2, [r3, #4]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	2164      	movs	r1, #100	; 0x64
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fed8 	bl	80055a8 <SPI_EndRxTxTransaction>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <SPI_CloseTx_ISR+0x76>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005802:	f043 0220 	orr.w	r2, r3, #32
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	655a      	str	r2, [r3, #84]	; 0x54
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <SPI_CloseTx_ISR+0x94>
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <SPI_CloseTx_ISR+0xac>
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff fc5b 	bl	80050f4 <HAL_SPI_ErrorCallback>
 800583e:	e002      	b.n	8005846 <SPI_CloseTx_ISR+0xb2>
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff fc39 	bl	80050b8 <HAL_SPI_TxCpltCallback>
 8005846:	bf00      	nop
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000000 	.word	0x20000000
 8005854:	057619f1 	.word	0x057619f1

08005858 <USB_CoreInit>:
 8005858:	b084      	sub	sp, #16
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	f107 001c 	add.w	r0, r7, #28
 8005866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	2b01      	cmp	r3, #1
 800586e:	d122      	bne.n	80058b6 <USB_CoreInit+0x5e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	639a      	str	r2, [r3, #56]	; 0x38
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	60d3      	str	r3, [r2, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	60da      	str	r2, [r3, #12]
 8005898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d105      	bne.n	80058aa <USB_CoreInit+0x52>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	60da      	str	r2, [r3, #12]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f9c0 	bl	8005c30 <USB_CoreReset>
 80058b0:	4603      	mov	r3, r0
 80058b2:	73fb      	strb	r3, [r7, #15]
 80058b4:	e01a      	b.n	80058ec <USB_CoreInit+0x94>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60da      	str	r2, [r3, #12]
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f9b4 	bl	8005c30 <USB_CoreReset>
 80058c8:	4603      	mov	r3, r0
 80058ca:	73fb      	strb	r3, [r7, #15]
 80058cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <USB_CoreInit+0x88>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38
 80058de:	e005      	b.n	80058ec <USB_CoreInit+0x94>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d10b      	bne.n	800590a <USB_CoreInit+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f043 0206 	orr.w	r2, r3, #6
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	609a      	str	r2, [r3, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f043 0220 	orr.w	r2, r3, #32
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	609a      	str	r2, [r3, #8]
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005916:	b004      	add	sp, #16
 8005918:	4770      	bx	lr

0800591a <USB_EnableGlobalInt>:
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f043 0201 	orr.w	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	609a      	str	r2, [r3, #8]
 800592e:	2300      	movs	r3, #0
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <USB_DisableGlobalInt>:
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f023 0201 	bic.w	r2, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	609a      	str	r2, [r3, #8]
 8005950:	2300      	movs	r3, #0
 8005952:	4618      	mov	r0, r3
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <USB_SetCurrentMode>:
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	460b      	mov	r3, r1
 8005968:	70fb      	strb	r3, [r7, #3]
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60da      	str	r2, [r3, #12]
 800597a:	78fb      	ldrb	r3, [r7, #3]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d115      	bne.n	80059ac <USB_SetCurrentMode+0x4e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	60da      	str	r2, [r3, #12]
 800598c:	2001      	movs	r0, #1
 800598e:	f7fb fd99 	bl	80014c4 <HAL_Delay>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3301      	adds	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f93a 	bl	8005c12 <USB_GetMode>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d01e      	beq.n	80059e2 <USB_SetCurrentMode+0x84>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b31      	cmp	r3, #49	; 0x31
 80059a8:	d9f0      	bls.n	800598c <USB_SetCurrentMode+0x2e>
 80059aa:	e01a      	b.n	80059e2 <USB_SetCurrentMode+0x84>
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d115      	bne.n	80059de <USB_SetCurrentMode+0x80>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60da      	str	r2, [r3, #12]
 80059be:	2001      	movs	r0, #1
 80059c0:	f7fb fd80 	bl	80014c4 <HAL_Delay>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3301      	adds	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f921 	bl	8005c12 <USB_GetMode>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <USB_SetCurrentMode+0x84>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b31      	cmp	r3, #49	; 0x31
 80059da:	d9f0      	bls.n	80059be <USB_SetCurrentMode+0x60>
 80059dc:	e001      	b.n	80059e2 <USB_SetCurrentMode+0x84>
 80059de:	2301      	movs	r3, #1
 80059e0:	e005      	b.n	80059ee <USB_SetCurrentMode+0x90>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b32      	cmp	r3, #50	; 0x32
 80059e6:	d101      	bne.n	80059ec <USB_SetCurrentMode+0x8e>
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <USB_SetCurrentMode+0x90>
 80059ec:	2300      	movs	r3, #0
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <USB_FlushTxFifo>:
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <USB_FlushTxFifo+0x64>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d901      	bls.n	8005a18 <USB_FlushTxFifo+0x20>
 8005a14:	2303      	movs	r3, #3
 8005a16:	e01b      	b.n	8005a50 <USB_FlushTxFifo+0x58>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	daf2      	bge.n	8005a06 <USB_FlushTxFifo+0xe>
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	019b      	lsls	r3, r3, #6
 8005a28:	f043 0220 	orr.w	r2, r3, #32
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	611a      	str	r2, [r3, #16]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3301      	adds	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4a08      	ldr	r2, [pc, #32]	; (8005a5c <USB_FlushTxFifo+0x64>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d901      	bls.n	8005a42 <USB_FlushTxFifo+0x4a>
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e006      	b.n	8005a50 <USB_FlushTxFifo+0x58>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	d0f0      	beq.n	8005a30 <USB_FlushTxFifo+0x38>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	00030d40 	.word	0x00030d40

08005a60 <USB_FlushRxFifo>:
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4a11      	ldr	r2, [pc, #68]	; (8005abc <USB_FlushRxFifo+0x5c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d901      	bls.n	8005a7e <USB_FlushRxFifo+0x1e>
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e018      	b.n	8005ab0 <USB_FlushRxFifo+0x50>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	daf2      	bge.n	8005a6c <USB_FlushRxFifo+0xc>
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2210      	movs	r2, #16
 8005a8e:	611a      	str	r2, [r3, #16]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3301      	adds	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4a08      	ldr	r2, [pc, #32]	; (8005abc <USB_FlushRxFifo+0x5c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <USB_FlushRxFifo+0x42>
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e006      	b.n	8005ab0 <USB_FlushRxFifo+0x50>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f003 0310 	and.w	r3, r3, #16
 8005aaa:	2b10      	cmp	r3, #16
 8005aac:	d0f0      	beq.n	8005a90 <USB_FlushRxFifo+0x30>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	00030d40 	.word	0x00030d40

08005ac0 <USB_WritePacket>:
 8005ac0:	b480      	push	{r7}
 8005ac2:	b089      	sub	sp, #36	; 0x24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	4611      	mov	r1, r2
 8005acc:	461a      	mov	r2, r3
 8005ace:	460b      	mov	r3, r1
 8005ad0:	71fb      	strb	r3, [r7, #7]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	80bb      	strh	r3, [r7, #4]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d123      	bne.n	8005b2e <USB_WritePacket+0x6e>
 8005ae6:	88bb      	ldrh	r3, [r7, #4]
 8005ae8:	3303      	adds	r3, #3
 8005aea:	089b      	lsrs	r3, r3, #2
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	2300      	movs	r3, #0
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	e018      	b.n	8005b26 <USB_WritePacket+0x66>
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	031a      	lsls	r2, r3, #12
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b00:	461a      	mov	r2, r3
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	3301      	adds	r3, #1
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	3301      	adds	r3, #1
 8005b18:	61fb      	str	r3, [r7, #28]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	3301      	adds	r3, #1
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d3e2      	bcc.n	8005af4 <USB_WritePacket+0x34>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	4618      	mov	r0, r3
 8005b32:	3724      	adds	r7, #36	; 0x24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <USB_ReadPacket>:
 8005b3c:	b480      	push	{r7}
 8005b3e:	b08b      	sub	sp, #44	; 0x2c
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	4613      	mov	r3, r2
 8005b48:	80fb      	strh	r3, [r7, #6]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	61bb      	str	r3, [r7, #24]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
 8005b52:	88fb      	ldrh	r3, [r7, #6]
 8005b54:	089b      	lsrs	r3, r3, #2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	88fb      	ldrh	r3, [r7, #6]
 8005b5c:	f003 0303 	and.w	r3, r3, #3
 8005b60:	83fb      	strh	r3, [r7, #30]
 8005b62:	2300      	movs	r3, #0
 8005b64:	623b      	str	r3, [r7, #32]
 8005b66:	e014      	b.n	8005b92 <USB_ReadPacket+0x56>
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	3301      	adds	r3, #1
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	3301      	adds	r3, #1
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	3301      	adds	r3, #1
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	623b      	str	r3, [r7, #32]
 8005b92:	6a3a      	ldr	r2, [r7, #32]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d3e6      	bcc.n	8005b68 <USB_ReadPacket+0x2c>
 8005b9a:	8bfb      	ldrh	r3, [r7, #30]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01e      	beq.n	8005bde <USB_ReadPacket+0xa2>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	623b      	str	r3, [r7, #32]
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005baa:	461a      	mov	r2, r3
 8005bac:	f107 0310 	add.w	r3, r7, #16
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	623b      	str	r3, [r7, #32]
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	3301      	adds	r3, #1
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd2:	8bfb      	ldrh	r3, [r7, #30]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	83fb      	strh	r3, [r7, #30]
 8005bd8:	8bfb      	ldrh	r3, [r7, #30]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1ea      	bne.n	8005bb4 <USB_ReadPacket+0x78>
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	4618      	mov	r0, r3
 8005be2:	372c      	adds	r7, #44	; 0x2c
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <USB_ReadInterrupts>:
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4013      	ands	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <USB_GetMode>:
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	4618      	mov	r0, r3
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <USB_CoreReset>:
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4a13      	ldr	r2, [pc, #76]	; (8005c94 <USB_CoreReset+0x64>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d901      	bls.n	8005c4e <USB_CoreReset+0x1e>
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e01b      	b.n	8005c86 <USB_CoreReset+0x56>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	daf2      	bge.n	8005c3c <USB_CoreReset+0xc>
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f043 0201 	orr.w	r2, r3, #1
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	611a      	str	r2, [r3, #16]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4a09      	ldr	r2, [pc, #36]	; (8005c94 <USB_CoreReset+0x64>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d901      	bls.n	8005c78 <USB_CoreReset+0x48>
 8005c74:	2303      	movs	r3, #3
 8005c76:	e006      	b.n	8005c86 <USB_CoreReset+0x56>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d0f0      	beq.n	8005c66 <USB_CoreReset+0x36>
 8005c84:	2300      	movs	r3, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	00030d40 	.word	0x00030d40

08005c98 <USB_HostInit>:
 8005c98:	b084      	sub	sp, #16
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b086      	sub	sp, #24
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005caa:	2300      	movs	r3, #0
 8005cac:	75fb      	strb	r3, [r7, #23]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cb8:	461a      	mov	r2, r3
 8005cba:	2300      	movs	r3, #0
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d018      	beq.n	8005d20 <USB_HostInit+0x88>
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d10a      	bne.n	8005d0a <USB_HostInit+0x72>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d02:	f043 0304 	orr.w	r3, r3, #4
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	e014      	b.n	8005d34 <USB_HostInit+0x9c>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d18:	f023 0304 	bic.w	r3, r3, #4
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e009      	b.n	8005d34 <USB_HostInit+0x9c>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d2e:	f023 0304 	bic.w	r3, r3, #4
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	2110      	movs	r1, #16
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff fe5e 	bl	80059f8 <USB_FlushTxFifo>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <USB_HostInit+0xae>
 8005d42:	2301      	movs	r3, #1
 8005d44:	75fb      	strb	r3, [r7, #23]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff fe8a 	bl	8005a60 <USB_FlushRxFifo>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <USB_HostInit+0xbe>
 8005d52:	2301      	movs	r3, #1
 8005d54:	75fb      	strb	r3, [r7, #23]
 8005d56:	2300      	movs	r3, #0
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	e015      	b.n	8005d88 <USB_HostInit+0xf0>
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6e:	6093      	str	r3, [r2, #8]
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60d3      	str	r3, [r2, #12]
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	3301      	adds	r3, #1
 8005d86:	613b      	str	r3, [r7, #16]
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d3e5      	bcc.n	8005d5c <USB_HostInit+0xc4>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	619a      	str	r2, [r3, #24]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9c:	615a      	str	r2, [r3, #20]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00b      	beq.n	8005dc2 <USB_HostInit+0x12a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005db0:	625a      	str	r2, [r3, #36]	; 0x24
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a13      	ldr	r2, [pc, #76]	; (8005e04 <USB_HostInit+0x16c>)
 8005db6:	629a      	str	r2, [r3, #40]	; 0x28
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <USB_HostInit+0x170>)
 8005dbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005dc0:	e009      	b.n	8005dd6 <USB_HostInit+0x13e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2280      	movs	r2, #128	; 0x80
 8005dc6:	625a      	str	r2, [r3, #36]	; 0x24
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a10      	ldr	r2, [pc, #64]	; (8005e0c <USB_HostInit+0x174>)
 8005dcc:	629a      	str	r2, [r3, #40]	; 0x28
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a0f      	ldr	r2, [pc, #60]	; (8005e10 <USB_HostInit+0x178>)
 8005dd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d105      	bne.n	8005de8 <USB_HostInit+0x150>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	f043 0210 	orr.w	r2, r3, #16
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	619a      	str	r2, [r3, #24]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699a      	ldr	r2, [r3, #24]
 8005dec:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <USB_HostInit+0x17c>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6193      	str	r3, [r2, #24]
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e00:	b004      	add	sp, #16
 8005e02:	4770      	bx	lr
 8005e04:	01000200 	.word	0x01000200
 8005e08:	00e00300 	.word	0x00e00300
 8005e0c:	00600080 	.word	0x00600080
 8005e10:	004000e0 	.word	0x004000e0
 8005e14:	a3200008 	.word	0xa3200008

08005e18 <USB_InitFSLSPClkSel>:
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e36:	f023 0303 	bic.w	r3, r3, #3
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e50:	4313      	orrs	r3, r2
 8005e52:	600b      	str	r3, [r1, #0]
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d107      	bne.n	8005e6a <USB_InitFSLSPClkSel+0x52>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e60:	461a      	mov	r2, r3
 8005e62:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e66:	6053      	str	r3, [r2, #4]
 8005e68:	e009      	b.n	8005e7e <USB_InitFSLSPClkSel+0x66>
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d106      	bne.n	8005e7e <USB_InitFSLSPClkSel+0x66>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e76:	461a      	mov	r2, r3
 8005e78:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e7c:	6053      	str	r3, [r2, #4]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <USB_ResetPort>:
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60bb      	str	r3, [r7, #8]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005eac:	60bb      	str	r3, [r7, #8]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eba:	6013      	str	r3, [r2, #0]
 8005ebc:	2064      	movs	r0, #100	; 0x64
 8005ebe:	f7fb fb01 	bl	80014c4 <HAL_Delay>
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	200a      	movs	r0, #10
 8005ed2:	f7fb faf7 	bl	80014c4 <HAL_Delay>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <USB_DriveVbus>:
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	70fb      	strb	r3, [r7, #3]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60bb      	str	r3, [r7, #8]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d109      	bne.n	8005f24 <USB_DriveVbus+0x44>
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d106      	bne.n	8005f24 <USB_DriveVbus+0x44>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2e:	d109      	bne.n	8005f44 <USB_DriveVbus+0x64>
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <USB_DriveVbus+0x64>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	2300      	movs	r3, #0
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <USB_GetHostSpeed>:
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60bb      	str	r3, [r7, #8]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	0c5b      	lsrs	r3, r3, #17
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USB_GetCurrentFrame>:
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <USB_HC_Init>:
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	4608      	mov	r0, r1
 8005fae:	4611      	mov	r1, r2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	70fb      	strb	r3, [r7, #3]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	70bb      	strb	r3, [r7, #2]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	707b      	strb	r3, [r7, #1]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	77fb      	strb	r3, [r7, #31]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	613b      	str	r3, [r7, #16]
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd8:	6093      	str	r3, [r2, #8]
 8005fda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fde:	2b03      	cmp	r3, #3
 8005fe0:	d87e      	bhi.n	80060e0 <USB_HC_Init+0x13c>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <USB_HC_Init+0x44>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	08005ff9 	.word	0x08005ff9
 8005fec:	080060a3 	.word	0x080060a3
 8005ff0:	08005ff9 	.word	0x08005ff9
 8005ff4:	08006065 	.word	0x08006065
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006004:	461a      	mov	r2, r3
 8006006:	f240 439d 	movw	r3, #1181	; 0x49d
 800600a:	60d3      	str	r3, [r2, #12]
 800600c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006010:	2b00      	cmp	r3, #0
 8006012:	da10      	bge.n	8006036 <USB_HC_Init+0x92>
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	440a      	add	r2, r1
 800602a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006032:	60d3      	str	r3, [r2, #12]
 8006034:	e057      	b.n	80060e6 <USB_HC_Init+0x142>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603e:	2b00      	cmp	r3, #0
 8006040:	d051      	beq.n	80060e6 <USB_HC_Init+0x142>
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	4413      	add	r3, r2
 800604a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	78fa      	ldrb	r2, [r7, #3]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	440a      	add	r2, r1
 8006058:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800605c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006060:	60d3      	str	r3, [r2, #12]
 8006062:	e040      	b.n	80060e6 <USB_HC_Init+0x142>
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4413      	add	r3, r2
 800606c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006070:	461a      	mov	r2, r3
 8006072:	f240 639d 	movw	r3, #1693	; 0x69d
 8006076:	60d3      	str	r3, [r2, #12]
 8006078:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800607c:	2b00      	cmp	r3, #0
 800607e:	da34      	bge.n	80060ea <USB_HC_Init+0x146>
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4413      	add	r3, r2
 8006088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	78fa      	ldrb	r2, [r7, #3]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	440a      	add	r2, r1
 8006096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800609a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800609e:	60d3      	str	r3, [r2, #12]
 80060a0:	e023      	b.n	80060ea <USB_HC_Init+0x146>
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ae:	461a      	mov	r2, r3
 80060b0:	f240 2325 	movw	r3, #549	; 0x225
 80060b4:	60d3      	str	r3, [r2, #12]
 80060b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	da17      	bge.n	80060ee <USB_HC_Init+0x14a>
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	78fa      	ldrb	r2, [r7, #3]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060d8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80060dc:	60d3      	str	r3, [r2, #12]
 80060de:	e006      	b.n	80060ee <USB_HC_Init+0x14a>
 80060e0:	2301      	movs	r3, #1
 80060e2:	77fb      	strb	r3, [r7, #31]
 80060e4:	e004      	b.n	80060f0 <USB_HC_Init+0x14c>
 80060e6:	bf00      	nop
 80060e8:	e002      	b.n	80060f0 <USB_HC_Init+0x14c>
 80060ea:	bf00      	nop
 80060ec:	e000      	b.n	80060f0 <USB_HC_Init+0x14c>
 80060ee:	bf00      	nop
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	78fa      	ldrb	r2, [r7, #3]
 8006100:	0151      	lsls	r1, r2, #5
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	440a      	add	r2, r1
 8006106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800610a:	f043 0302 	orr.w	r3, r3, #2
 800610e:	60d3      	str	r3, [r2, #12]
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006116:	699a      	ldr	r2, [r3, #24]
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	2101      	movs	r1, #1
 8006120:	fa01 f303 	lsl.w	r3, r1, r3
 8006124:	6939      	ldr	r1, [r7, #16]
 8006126:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800612a:	4313      	orrs	r3, r2
 800612c:	618b      	str	r3, [r1, #24]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	619a      	str	r2, [r3, #24]
 800613a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800613e:	2b00      	cmp	r3, #0
 8006140:	da03      	bge.n	800614a <USB_HC_Init+0x1a6>
 8006142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	e001      	b.n	800614e <USB_HC_Init+0x1aa>
 800614a:	2300      	movs	r3, #0
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff feff 	bl	8005f52 <USB_GetHostSpeed>
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800615a:	2b02      	cmp	r3, #2
 800615c:	d106      	bne.n	800616c <USB_HC_Init+0x1c8>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d003      	beq.n	800616c <USB_HC_Init+0x1c8>
 8006164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	e001      	b.n	8006170 <USB_HC_Init+0x1cc>
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	787b      	ldrb	r3, [r7, #1]
 8006172:	059b      	lsls	r3, r3, #22
 8006174:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
 8006178:	78bb      	ldrb	r3, [r7, #2]
 800617a:	02db      	lsls	r3, r3, #11
 800617c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8006180:	431a      	orrs	r2, r3
 8006182:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006186:	049b      	lsls	r3, r3, #18
 8006188:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800618c:	431a      	orrs	r2, r3
 800618e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006194:	431a      	orrs	r2, r3
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	431a      	orrs	r2, r3
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	0159      	lsls	r1, r3, #5
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	440b      	add	r3, r1
 80061a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a6:	4619      	mov	r1, r3
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	600b      	str	r3, [r1, #0]
 80061ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d003      	beq.n	80061be <USB_HC_Init+0x21a>
 80061b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d10f      	bne.n	80061de <USB_HC_Init+0x23a>
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	78fa      	ldrb	r2, [r7, #3]
 80061ce:	0151      	lsls	r1, r2, #5
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	440a      	add	r2, r1
 80061d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	7ffb      	ldrb	r3, [r7, #31]
 80061e0:	4618      	mov	r0, r3
 80061e2:	3720      	adds	r7, #32
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <USB_HC_StartXfer>:
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08c      	sub	sp, #48	; 0x30
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	4613      	mov	r3, r2
 80061f4:	71fb      	strb	r3, [r7, #7]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	623b      	str	r3, [r7, #32]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	785b      	ldrb	r3, [r3, #1]
 80061fe:	61fb      	str	r3, [r7, #28]
 8006200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006204:	837b      	strh	r3, [r7, #26]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d02d      	beq.n	800626e <USB_HC_StartXfer+0x86>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	791b      	ldrb	r3, [r3, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d129      	bne.n	800626e <USB_HC_StartXfer+0x86>
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d117      	bne.n	8006250 <USB_HC_StartXfer+0x68>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	79db      	ldrb	r3, [r3, #7]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <USB_HC_StartXfer+0x48>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	79db      	ldrb	r3, [r3, #7]
 800622c:	2b02      	cmp	r3, #2
 800622e:	d10f      	bne.n	8006250 <USB_HC_StartXfer+0x68>
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	4413      	add	r3, r2
 8006238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	6a3a      	ldr	r2, [r7, #32]
 8006244:	440a      	add	r2, r1
 8006246:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	60d3      	str	r3, [r2, #12]
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10b      	bne.n	800626e <USB_HC_StartXfer+0x86>
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	795b      	ldrb	r3, [r3, #5]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d107      	bne.n	800626e <USB_HC_StartXfer+0x86>
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	785b      	ldrb	r3, [r3, #1]
 8006262:	4619      	mov	r1, r3
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 fa0f 	bl	8006688 <USB_DoPing>
 800626a:	2300      	movs	r3, #0
 800626c:	e0f8      	b.n	8006460 <USB_HC_StartXfer+0x278>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d018      	beq.n	80062a8 <USB_HC_StartXfer+0xc0>
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	8912      	ldrh	r2, [r2, #8]
 800627e:	4413      	add	r3, r2
 8006280:	3b01      	subs	r3, #1
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	8912      	ldrh	r2, [r2, #8]
 8006286:	fbb3 f3f2 	udiv	r3, r3, r2
 800628a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800628c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800628e:	8b7b      	ldrh	r3, [r7, #26]
 8006290:	429a      	cmp	r2, r3
 8006292:	d90b      	bls.n	80062ac <USB_HC_StartXfer+0xc4>
 8006294:	8b7b      	ldrh	r3, [r7, #26]
 8006296:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006298:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	8912      	ldrh	r2, [r2, #8]
 800629e:	fb03 f202 	mul.w	r2, r3, r2
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	611a      	str	r2, [r3, #16]
 80062a6:	e001      	b.n	80062ac <USB_HC_StartXfer+0xc4>
 80062a8:	2301      	movs	r3, #1
 80062aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	78db      	ldrb	r3, [r3, #3]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d007      	beq.n	80062c4 <USB_HC_StartXfer+0xdc>
 80062b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	8912      	ldrh	r2, [r2, #8]
 80062ba:	fb03 f202 	mul.w	r2, r3, r2
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	611a      	str	r2, [r3, #16]
 80062c2:	e003      	b.n	80062cc <USB_HC_StartXfer+0xe4>
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	695a      	ldr	r2, [r3, #20]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	611a      	str	r2, [r3, #16]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80062d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062d6:	04d9      	lsls	r1, r3, #19
 80062d8:	4b63      	ldr	r3, [pc, #396]	; (8006468 <USB_HC_StartXfer+0x280>)
 80062da:	400b      	ands	r3, r1
 80062dc:	431a      	orrs	r2, r3
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	7a9b      	ldrb	r3, [r3, #10]
 80062e2:	075b      	lsls	r3, r3, #29
 80062e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80062e8:	69f9      	ldr	r1, [r7, #28]
 80062ea:	0148      	lsls	r0, r1, #5
 80062ec:	6a39      	ldr	r1, [r7, #32]
 80062ee:	4401      	add	r1, r0
 80062f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80062f4:	4313      	orrs	r3, r2
 80062f6:	610b      	str	r3, [r1, #16]
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d009      	beq.n	8006312 <USB_HC_StartXfer+0x12a>
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	68d9      	ldr	r1, [r3, #12]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630e:	460a      	mov	r2, r1
 8006310:	615a      	str	r2, [r3, #20]
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	bf0c      	ite	eq
 8006322:	2301      	moveq	r3, #1
 8006324:	2300      	movne	r3, #0
 8006326:	b2db      	uxtb	r3, r3
 8006328:	767b      	strb	r3, [r7, #25]
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	4413      	add	r3, r2
 8006332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	0151      	lsls	r1, r2, #5
 800633c:	6a3a      	ldr	r2, [r7, #32]
 800633e:	440a      	add	r2, r1
 8006340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006344:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	4413      	add	r3, r2
 8006352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	7e7b      	ldrb	r3, [r7, #25]
 800635a:	075b      	lsls	r3, r3, #29
 800635c:	69f9      	ldr	r1, [r7, #28]
 800635e:	0148      	lsls	r0, r1, #5
 8006360:	6a39      	ldr	r1, [r7, #32]
 8006362:	4401      	add	r1, r0
 8006364:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006368:	4313      	orrs	r3, r2
 800636a:	600b      	str	r3, [r1, #0]
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	4413      	add	r3, r2
 8006374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	78db      	ldrb	r3, [r3, #3]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d004      	beq.n	8006396 <USB_HC_StartXfer+0x1ae>
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	e003      	b.n	800639e <USB_HC_StartXfer+0x1b6>
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b2:	461a      	mov	r2, r3
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	79fb      	ldrb	r3, [r7, #7]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <USB_HC_StartXfer+0x1da>
 80063be:	2300      	movs	r3, #0
 80063c0:	e04e      	b.n	8006460 <USB_HC_StartXfer+0x278>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	78db      	ldrb	r3, [r3, #3]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d149      	bne.n	800645e <USB_HC_StartXfer+0x276>
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d045      	beq.n	800645e <USB_HC_StartXfer+0x276>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	79db      	ldrb	r3, [r3, #7]
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d830      	bhi.n	800643c <USB_HC_StartXfer+0x254>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <USB_HC_StartXfer+0x1f8>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	08006415 	.word	0x08006415
 80063e8:	080063f1 	.word	0x080063f1
 80063ec:	08006415 	.word	0x08006415
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	3303      	adds	r3, #3
 80063f6:	089b      	lsrs	r3, r3, #2
 80063f8:	82fb      	strh	r3, [r7, #22]
 80063fa:	8afa      	ldrh	r2, [r7, #22]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	b29b      	uxth	r3, r3
 8006402:	429a      	cmp	r2, r3
 8006404:	d91c      	bls.n	8006440 <USB_HC_StartXfer+0x258>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	f043 0220 	orr.w	r2, r3, #32
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	619a      	str	r2, [r3, #24]
 8006412:	e015      	b.n	8006440 <USB_HC_StartXfer+0x258>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	3303      	adds	r3, #3
 800641a:	089b      	lsrs	r3, r3, #2
 800641c:	82fb      	strh	r3, [r7, #22]
 800641e:	8afa      	ldrh	r2, [r7, #22]
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	b29b      	uxth	r3, r3
 800642a:	429a      	cmp	r2, r3
 800642c:	d90a      	bls.n	8006444 <USB_HC_StartXfer+0x25c>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	619a      	str	r2, [r3, #24]
 800643a:	e003      	b.n	8006444 <USB_HC_StartXfer+0x25c>
 800643c:	bf00      	nop
 800643e:	e002      	b.n	8006446 <USB_HC_StartXfer+0x25e>
 8006440:	bf00      	nop
 8006442:	e000      	b.n	8006446 <USB_HC_StartXfer+0x25e>
 8006444:	bf00      	nop
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	68d9      	ldr	r1, [r3, #12]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	785a      	ldrb	r2, [r3, #1]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	b29b      	uxth	r3, r3
 8006454:	2000      	movs	r0, #0
 8006456:	9000      	str	r0, [sp, #0]
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f7ff fb31 	bl	8005ac0 <USB_WritePacket>
 800645e:	2300      	movs	r3, #0
 8006460:	4618      	mov	r0, r3
 8006462:	3728      	adds	r7, #40	; 0x28
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	1ff80000 	.word	0x1ff80000

0800646c <USB_HC_ReadInterrupt>:
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	b29b      	uxth	r3, r3
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <USB_HC_Halt>:
 800648e:	b480      	push	{r7}
 8006490:	b089      	sub	sp, #36	; 0x24
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	460b      	mov	r3, r1
 8006498:	70fb      	strb	r3, [r7, #3]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	61fb      	str	r3, [r7, #28]
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	61bb      	str	r3, [r7, #24]
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	0c9b      	lsrs	r3, r3, #18
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	0fdb      	lsrs	r3, r3, #31
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b20      	cmp	r3, #32
 80064dc:	d104      	bne.n	80064e8 <USB_HC_Halt+0x5a>
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <USB_HC_Halt+0x5a>
 80064e4:	2300      	movs	r3, #0
 80064e6:	e0c8      	b.n	800667a <USB_HC_Halt+0x1ec>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <USB_HC_Halt+0x66>
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d163      	bne.n	80065bc <USB_HC_Halt+0x12e>
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	0151      	lsls	r1, r2, #5
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	440a      	add	r2, r1
 800650a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800650e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f003 0320 	and.w	r3, r3, #32
 800651c:	2b00      	cmp	r3, #0
 800651e:	f040 80ab 	bne.w	8006678 <USB_HC_Halt+0x1ea>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d133      	bne.n	8006596 <USB_HC_Halt+0x108>
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4413      	add	r3, r2
 8006536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	0151      	lsls	r1, r2, #5
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	440a      	add	r2, r1
 8006544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006548:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	440a      	add	r2, r1
 8006564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3301      	adds	r3, #1
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800657a:	d81d      	bhi.n	80065b8 <USB_HC_Halt+0x12a>
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800658e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006592:	d0ec      	beq.n	800656e <USB_HC_Halt+0xe0>
 8006594:	e070      	b.n	8006678 <USB_HC_Halt+0x1ea>
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	4413      	add	r3, r2
 800659e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	0151      	lsls	r1, r2, #5
 80065a8:	69fa      	ldr	r2, [r7, #28]
 80065aa:	440a      	add	r2, r1
 80065ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	e05f      	b.n	8006678 <USB_HC_Halt+0x1ea>
 80065b8:	bf00      	nop
 80065ba:	e05d      	b.n	8006678 <USB_HC_Halt+0x1ea>
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d133      	bne.n	8006654 <USB_HC_Halt+0x1c6>
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	0151      	lsls	r1, r2, #5
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	440a      	add	r2, r1
 8006602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	4413      	add	r3, r2
 8006614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	0151      	lsls	r1, r2, #5
 800661e:	69fa      	ldr	r2, [r7, #28]
 8006620:	440a      	add	r2, r1
 8006622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3301      	adds	r3, #1
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006638:	d81d      	bhi.n	8006676 <USB_HC_Halt+0x1e8>
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	4413      	add	r3, r2
 8006642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800664c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006650:	d0ec      	beq.n	800662c <USB_HC_Halt+0x19e>
 8006652:	e011      	b.n	8006678 <USB_HC_Halt+0x1ea>
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	4413      	add	r3, r2
 800665c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	0151      	lsls	r1, r2, #5
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	440a      	add	r2, r1
 800666a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800666e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	e000      	b.n	8006678 <USB_HC_Halt+0x1ea>
 8006676:	bf00      	nop
 8006678:	2300      	movs	r3, #0
 800667a:	4618      	mov	r0, r3
 800667c:	3724      	adds	r7, #36	; 0x24
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
	...

08006688 <USB_DoPing>:
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	613b      	str	r3, [r7, #16]
 800669c:	2301      	movs	r3, #1
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	04da      	lsls	r2, r3, #19
 80066a4:	4b15      	ldr	r3, [pc, #84]	; (80066fc <USB_DoPing+0x74>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066b8:	6113      	str	r3, [r2, #16]
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	60bb      	str	r3, [r7, #8]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066d0:	60bb      	str	r3, [r7, #8]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066d8:	60bb      	str	r3, [r7, #8]
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e6:	461a      	mov	r2, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	2300      	movs	r3, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	1ff80000 	.word	0x1ff80000

08006700 <USB_StopHost>:
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	2300      	movs	r3, #0
 800670a:	77fb      	strb	r3, [r7, #31]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff f911 	bl	800593c <USB_DisableGlobalInt>
 800671a:	2110      	movs	r1, #16
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff f96b 	bl	80059f8 <USB_FlushTxFifo>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <USB_StopHost+0x2c>
 8006728:	2301      	movs	r3, #1
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff f997 	bl	8005a60 <USB_FlushRxFifo>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <USB_StopHost+0x3c>
 8006738:	2301      	movs	r3, #1
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	2300      	movs	r3, #0
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	e01f      	b.n	8006782 <USB_StopHost+0x82>
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	4413      	add	r3, r2
 800674a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006760:	613b      	str	r3, [r7, #16]
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4413      	add	r3, r2
 8006772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006776:	461a      	mov	r2, r3
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	3301      	adds	r3, #1
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	2b0f      	cmp	r3, #15
 8006786:	d9dc      	bls.n	8006742 <USB_StopHost+0x42>
 8006788:	2300      	movs	r3, #0
 800678a:	61bb      	str	r3, [r7, #24]
 800678c:	e034      	b.n	80067f8 <USB_StopHost+0xf8>
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	4413      	add	r3, r2
 8006796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	613b      	str	r3, [r7, #16]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c2:	461a      	mov	r2, r3
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3301      	adds	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067d4:	d80c      	bhi.n	80067f0 <USB_StopHost+0xf0>
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067ec:	d0ec      	beq.n	80067c8 <USB_StopHost+0xc8>
 80067ee:	e000      	b.n	80067f2 <USB_StopHost+0xf2>
 80067f0:	bf00      	nop
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	3301      	adds	r3, #1
 80067f6:	61bb      	str	r3, [r7, #24]
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	2b0f      	cmp	r3, #15
 80067fc:	d9c7      	bls.n	800678e <USB_StopHost+0x8e>
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006804:	461a      	mov	r2, r3
 8006806:	f04f 33ff 	mov.w	r3, #4294967295
 800680a:	6153      	str	r3, [r2, #20]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f04f 32ff 	mov.w	r2, #4294967295
 8006812:	615a      	str	r2, [r3, #20]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff f880 	bl	800591a <USB_EnableGlobalInt>
 800681a:	7ffb      	ldrb	r3, [r7, #31]
 800681c:	4618      	mov	r0, r3
 800681e:	3720      	adds	r7, #32
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006824:	b590      	push	{r4, r7, lr}
 8006826:	b089      	sub	sp, #36	; 0x24
 8006828:	af04      	add	r7, sp, #16
 800682a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800682c:	2301      	movs	r3, #1
 800682e:	2202      	movs	r2, #2
 8006830:	2102      	movs	r1, #2
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fc66 	bl	8007104 <USBH_FindInterface>
 8006838:	4603      	mov	r3, r0
 800683a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	2bff      	cmp	r3, #255	; 0xff
 8006840:	d002      	beq.n	8006848 <USBH_CDC_InterfaceInit+0x24>
 8006842:	7bfb      	ldrb	r3, [r7, #15]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d901      	bls.n	800684c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006848:	2302      	movs	r3, #2
 800684a:	e13d      	b.n	8006ac8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fc3b 	bl	80070cc <USBH_SelectInterface>
 8006856:	4603      	mov	r3, r0
 8006858:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006860:	2302      	movs	r3, #2
 8006862:	e131      	b.n	8006ac8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800686a:	2050      	movs	r0, #80	; 0x50
 800686c:	f002 fad2 	bl	8008e14 <malloc>
 8006870:	4603      	mov	r3, r0
 8006872:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006884:	2302      	movs	r3, #2
 8006886:	e11f      	b.n	8006ac8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006888:	2250      	movs	r2, #80	; 0x50
 800688a:	2100      	movs	r1, #0
 800688c:	68b8      	ldr	r0, [r7, #8]
 800688e:	f002 fb7d 	bl	8008f8c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	211a      	movs	r1, #26
 8006898:	fb01 f303 	mul.w	r3, r1, r3
 800689c:	4413      	add	r3, r2
 800689e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	b25b      	sxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	da15      	bge.n	80068d6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	211a      	movs	r1, #26
 80068b0:	fb01 f303 	mul.w	r3, r1, r3
 80068b4:	4413      	add	r3, r2
 80068b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068ba:	781a      	ldrb	r2, [r3, #0]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	211a      	movs	r1, #26
 80068c6:	fb01 f303 	mul.w	r3, r1, r3
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068d0:	881a      	ldrh	r2, [r3, #0]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 ff2e 	bl	800873e <USBH_AllocPipe>
 80068e2:	4603      	mov	r3, r0
 80068e4:	461a      	mov	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	7819      	ldrb	r1, [r3, #0]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	7858      	ldrb	r0, [r3, #1]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	8952      	ldrh	r2, [r2, #10]
 8006902:	9202      	str	r2, [sp, #8]
 8006904:	2203      	movs	r2, #3
 8006906:	9201      	str	r2, [sp, #4]
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	4623      	mov	r3, r4
 800690c:	4602      	mov	r2, r0
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 fee6 	bl	80086e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2200      	movs	r2, #0
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f002 f9f5 	bl	8008d0c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006922:	2300      	movs	r3, #0
 8006924:	2200      	movs	r2, #0
 8006926:	210a      	movs	r1, #10
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fbeb 	bl	8007104 <USBH_FindInterface>
 800692e:	4603      	mov	r3, r0
 8006930:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	2bff      	cmp	r3, #255	; 0xff
 8006936:	d002      	beq.n	800693e <USBH_CDC_InterfaceInit+0x11a>
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d901      	bls.n	8006942 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800693e:	2302      	movs	r3, #2
 8006940:	e0c2      	b.n	8006ac8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	211a      	movs	r1, #26
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	4413      	add	r3, r2
 800694e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	b25b      	sxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	da16      	bge.n	8006988 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	211a      	movs	r1, #26
 8006960:	fb01 f303 	mul.w	r3, r1, r3
 8006964:	4413      	add	r3, r2
 8006966:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	211a      	movs	r1, #26
 8006976:	fb01 f303 	mul.w	r3, r1, r3
 800697a:	4413      	add	r3, r2
 800697c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006980:	881a      	ldrh	r2, [r3, #0]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	835a      	strh	r2, [r3, #26]
 8006986:	e015      	b.n	80069b4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	211a      	movs	r1, #26
 800698e:	fb01 f303 	mul.w	r3, r1, r3
 8006992:	4413      	add	r3, r2
 8006994:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006998:	781a      	ldrb	r2, [r3, #0]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	211a      	movs	r1, #26
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069ae:	881a      	ldrh	r2, [r3, #0]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	211a      	movs	r1, #26
 80069ba:	fb01 f303 	mul.w	r3, r1, r3
 80069be:	4413      	add	r3, r2
 80069c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	b25b      	sxtb	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	da16      	bge.n	80069fa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	211a      	movs	r1, #26
 80069d2:	fb01 f303 	mul.w	r3, r1, r3
 80069d6:	4413      	add	r3, r2
 80069d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	211a      	movs	r1, #26
 80069e8:	fb01 f303 	mul.w	r3, r1, r3
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069f2:	881a      	ldrh	r2, [r3, #0]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	835a      	strh	r2, [r3, #26]
 80069f8:	e015      	b.n	8006a26 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	211a      	movs	r1, #26
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	4413      	add	r3, r2
 8006a06:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a0a:	781a      	ldrb	r2, [r3, #0]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	211a      	movs	r1, #26
 8006a16:	fb01 f303 	mul.w	r3, r1, r3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a20:	881a      	ldrh	r2, [r3, #0]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	7b9b      	ldrb	r3, [r3, #14]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 fe86 	bl	800873e <USBH_AllocPipe>
 8006a32:	4603      	mov	r3, r0
 8006a34:	461a      	mov	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	7bdb      	ldrb	r3, [r3, #15]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 fe7c 	bl	800873e <USBH_AllocPipe>
 8006a46:	4603      	mov	r3, r0
 8006a48:	461a      	mov	r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	7b59      	ldrb	r1, [r3, #13]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	7b98      	ldrb	r0, [r3, #14]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	8b12      	ldrh	r2, [r2, #24]
 8006a66:	9202      	str	r2, [sp, #8]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	9201      	str	r2, [sp, #4]
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	4623      	mov	r3, r4
 8006a70:	4602      	mov	r2, r0
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 fe34 	bl	80086e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	7b19      	ldrb	r1, [r3, #12]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	7bd8      	ldrb	r0, [r3, #15]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	8b52      	ldrh	r2, [r2, #26]
 8006a90:	9202      	str	r2, [sp, #8]
 8006a92:	2202      	movs	r2, #2
 8006a94:	9201      	str	r2, [sp, #4]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	4623      	mov	r3, r4
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 fe1f 	bl	80086e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	7b5b      	ldrb	r3, [r3, #13]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f002 f92a 	bl	8008d0c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	7b1b      	ldrb	r3, [r3, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f002 f923 	bl	8008d0c <USBH_LL_SetToggle>

  return USBH_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd90      	pop	{r4, r7, pc}

08006ad0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00e      	beq.n	8006b08 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 fe14 	bl	800871e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 fe3f 	bl	8008780 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	7b1b      	ldrb	r3, [r3, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00e      	beq.n	8006b2e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	7b1b      	ldrb	r3, [r3, #12]
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 fe01 	bl	800871e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	7b1b      	ldrb	r3, [r3, #12]
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 fe2c 	bl	8008780 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	7b5b      	ldrb	r3, [r3, #13]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00e      	beq.n	8006b54 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	7b5b      	ldrb	r3, [r3, #13]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f001 fdee 	bl	800871e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	7b5b      	ldrb	r3, [r3, #13]
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f001 fe19 	bl	8008780 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00b      	beq.n	8006b78 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f002 f95b 	bl	8008e24 <free>
    phost->pActiveClass->pData = 0U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b74:	2200      	movs	r2, #0
 8006b76:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3340      	adds	r3, #64	; 0x40
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f8b1 	bl	8006d02 <GetLineCoding>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bb0:	2102      	movs	r1, #2
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d877      	bhi.n	8006cd4 <USBH_CDC_Process+0x114>
 8006be4:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <USBH_CDC_Process+0x2c>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006c01 	.word	0x08006c01
 8006bf0:	08006c07 	.word	0x08006c07
 8006bf4:	08006c37 	.word	0x08006c37
 8006bf8:	08006cab 	.word	0x08006cab
 8006bfc:	08006cb9 	.word	0x08006cb9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	73fb      	strb	r3, [r7, #15]
      break;
 8006c04:	e06d      	b.n	8006ce2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f897 	bl	8006d40 <SetLineCoding>
 8006c12:	4603      	mov	r3, r0
 8006c14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c24:	e058      	b.n	8006cd8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d055      	beq.n	8006cd8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2204      	movs	r2, #4
 8006c30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c34:	e050      	b.n	8006cd8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	3340      	adds	r3, #64	; 0x40
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f860 	bl	8006d02 <GetLineCoding>
 8006c42:	4603      	mov	r3, r0
 8006c44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d126      	bne.n	8006c9a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5e:	791b      	ldrb	r3, [r3, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d13b      	bne.n	8006cdc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d133      	bne.n	8006cdc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c7e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d12b      	bne.n	8006cdc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d124      	bne.n	8006cdc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f958 	bl	8006f48 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c98:	e020      	b.n	8006cdc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d01d      	beq.n	8006cdc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2204      	movs	r2, #4
 8006ca4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ca8:	e018      	b.n	8006cdc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f867 	bl	8006d7e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f8da 	bl	8006e6a <CDC_ProcessReception>
      break;
 8006cb6:	e014      	b.n	8006ce2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006cb8:	2100      	movs	r1, #0
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 ffef 	bl	8007c9e <USBH_ClrFeature>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10a      	bne.n	8006ce0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006cd2:	e005      	b.n	8006ce0 <USBH_CDC_Process+0x120>

    default:
      break;
 8006cd4:	bf00      	nop
 8006cd6:	e004      	b.n	8006ce2 <USBH_CDC_Process+0x122>
      break;
 8006cd8:	bf00      	nop
 8006cda:	e002      	b.n	8006ce2 <USBH_CDC_Process+0x122>
      break;
 8006cdc:	bf00      	nop
 8006cde:	e000      	b.n	8006ce2 <USBH_CDC_Process+0x122>
      break;
 8006ce0:	bf00      	nop

  }

  return status;
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	22a1      	movs	r2, #161	; 0xa1
 8006d10:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2221      	movs	r2, #33	; 0x21
 8006d16:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2207      	movs	r2, #7
 8006d28:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2207      	movs	r2, #7
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 fa83 	bl	800823c <USBH_CtlReq>
 8006d36:	4603      	mov	r3, r0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2221      	movs	r2, #33	; 0x21
 8006d4e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2207      	movs	r2, #7
 8006d66:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2207      	movs	r2, #7
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 fa64 	bl	800823c <USBH_CtlReq>
 8006d74:	4603      	mov	r3, r0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b086      	sub	sp, #24
 8006d82:	af02      	add	r7, sp, #8
 8006d84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d002      	beq.n	8006da4 <CDC_ProcessTransmission+0x26>
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d023      	beq.n	8006dea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006da2:	e05e      	b.n	8006e62 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	8b12      	ldrh	r2, [r2, #24]
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d90b      	bls.n	8006dc8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	69d9      	ldr	r1, [r3, #28]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8b1a      	ldrh	r2, [r3, #24]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	7b5b      	ldrb	r3, [r3, #13]
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	9000      	str	r0, [sp, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fc4a 	bl	800865a <USBH_BulkSendData>
 8006dc6:	e00b      	b.n	8006de0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	7b5b      	ldrb	r3, [r3, #13]
 8006dd6:	2001      	movs	r0, #1
 8006dd8:	9000      	str	r0, [sp, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fc3d 	bl	800865a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2202      	movs	r2, #2
 8006de4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006de8:	e03b      	b.n	8006e62 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	7b5b      	ldrb	r3, [r3, #13]
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 ff61 	bl	8008cb8 <USBH_LL_GetURBState>
 8006df6:	4603      	mov	r3, r0
 8006df8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006dfa:	7afb      	ldrb	r3, [r7, #11]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d128      	bne.n	8006e52 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	8b12      	ldrh	r2, [r2, #24]
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d90e      	bls.n	8006e2a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	8b12      	ldrh	r2, [r2, #24]
 8006e14:	1a9a      	subs	r2, r3, r2
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	8b12      	ldrh	r2, [r2, #24]
 8006e22:	441a      	add	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	61da      	str	r2, [r3, #28]
 8006e28:	e002      	b.n	8006e30 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d004      	beq.n	8006e42 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e40:	e00e      	b.n	8006e60 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f868 	bl	8006f20 <USBH_CDC_TransmitCallback>
      break;
 8006e50:	e006      	b.n	8006e60 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e52:	7afb      	ldrb	r3, [r7, #11]
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d103      	bne.n	8006e60 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e60:	bf00      	nop
  }
}
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d002      	beq.n	8006e90 <CDC_ProcessReception+0x26>
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d00e      	beq.n	8006eac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e8e:	e043      	b.n	8006f18 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	6a19      	ldr	r1, [r3, #32]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	8b5a      	ldrh	r2, [r3, #26]
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	7b1b      	ldrb	r3, [r3, #12]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 fc01 	bl	80086a4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2204      	movs	r2, #4
 8006ea6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006eaa:	e035      	b.n	8006f18 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	7b1b      	ldrb	r3, [r3, #12]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 ff00 	bl	8008cb8 <USBH_LL_GetURBState>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ebc:	7cfb      	ldrb	r3, [r7, #19]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d129      	bne.n	8006f16 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	7b1b      	ldrb	r3, [r3, #12]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 fe63 	bl	8008b94 <USBH_LL_GetLastXferSize>
 8006ece:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d016      	beq.n	8006f08 <CDC_ProcessReception+0x9e>
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	8b5b      	ldrh	r3, [r3, #26]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d910      	bls.n	8006f08 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	1ad2      	subs	r2, r2, r3
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	6a1a      	ldr	r2, [r3, #32]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	441a      	add	r2, r3
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2203      	movs	r2, #3
 8006f02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f06:	e006      	b.n	8006f16 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f80f 	bl	8006f34 <USBH_CDC_ReceiveCallback>
      break;
 8006f16:	bf00      	nop
  }
}
 8006f18:	bf00      	nop
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	4613      	mov	r3, r2
 8006f68:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f70:	2302      	movs	r3, #2
 8006f72:	e029      	b.n	8006fc8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	79fa      	ldrb	r2, [r7, #7]
 8006f78:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f81f 	bl	8006fd0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f001 fd33 	bl	8008a2c <USBH_LL_Init>

  return USBH_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e009      	b.n	8006ff6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	33e0      	adds	r3, #224	; 0xe0
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	2200      	movs	r2, #0
 8006fee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b0f      	cmp	r3, #15
 8006ffa:	d9f2      	bls.n	8006fe2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	e009      	b.n	8007016 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4413      	add	r3, r2
 8007008:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800700c:	2200      	movs	r2, #0
 800700e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3301      	adds	r3, #1
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800701c:	d3f1      	bcc.n	8007002 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2240      	movs	r2, #64	; 0x40
 8007042:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d016      	beq.n	80070ba <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10e      	bne.n	80070b4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800709c:	1c59      	adds	r1, r3, #1
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	33de      	adds	r3, #222	; 0xde
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]
 80070b2:	e004      	b.n	80070be <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80070b4:	2302      	movs	r3, #2
 80070b6:	73fb      	strb	r3, [r7, #15]
 80070b8:	e001      	b.n	80070be <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80070ba:	2302      	movs	r3, #2
 80070bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070be:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80070e2:	78fa      	ldrb	r2, [r7, #3]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d204      	bcs.n	80070f2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	78fa      	ldrb	r2, [r7, #3]
 80070ec:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80070f0:	e001      	b.n	80070f6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80070f2:	2302      	movs	r3, #2
 80070f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	4608      	mov	r0, r1
 800710e:	4611      	mov	r1, r2
 8007110:	461a      	mov	r2, r3
 8007112:	4603      	mov	r3, r0
 8007114:	70fb      	strb	r3, [r7, #3]
 8007116:	460b      	mov	r3, r1
 8007118:	70bb      	strb	r3, [r7, #2]
 800711a:	4613      	mov	r3, r2
 800711c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007122:	2300      	movs	r3, #0
 8007124:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800712c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800712e:	e025      	b.n	800717c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007130:	7dfb      	ldrb	r3, [r7, #23]
 8007132:	221a      	movs	r2, #26
 8007134:	fb02 f303 	mul.w	r3, r2, r3
 8007138:	3308      	adds	r3, #8
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	3302      	adds	r3, #2
 8007140:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	795b      	ldrb	r3, [r3, #5]
 8007146:	78fa      	ldrb	r2, [r7, #3]
 8007148:	429a      	cmp	r2, r3
 800714a:	d002      	beq.n	8007152 <USBH_FindInterface+0x4e>
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	2bff      	cmp	r3, #255	; 0xff
 8007150:	d111      	bne.n	8007176 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007156:	78ba      	ldrb	r2, [r7, #2]
 8007158:	429a      	cmp	r2, r3
 800715a:	d002      	beq.n	8007162 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800715c:	78bb      	ldrb	r3, [r7, #2]
 800715e:	2bff      	cmp	r3, #255	; 0xff
 8007160:	d109      	bne.n	8007176 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007166:	787a      	ldrb	r2, [r7, #1]
 8007168:	429a      	cmp	r2, r3
 800716a:	d002      	beq.n	8007172 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800716c:	787b      	ldrb	r3, [r7, #1]
 800716e:	2bff      	cmp	r3, #255	; 0xff
 8007170:	d101      	bne.n	8007176 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007172:	7dfb      	ldrb	r3, [r7, #23]
 8007174:	e006      	b.n	8007184 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007176:	7dfb      	ldrb	r3, [r7, #23]
 8007178:	3301      	adds	r3, #1
 800717a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d9d6      	bls.n	8007130 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007182:	23ff      	movs	r3, #255	; 0xff
}
 8007184:	4618      	mov	r0, r3
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 fc83 	bl	8008aa4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800719e:	2101      	movs	r1, #1
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 fd9c 	bl	8008cde <USBH_LL_DriverVBUS>

  return USBH_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af04      	add	r7, sp, #16
 80071b6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071b8:	2302      	movs	r3, #2
 80071ba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d102      	bne.n	80071d2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2203      	movs	r2, #3
 80071d0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b0b      	cmp	r3, #11
 80071da:	f200 81be 	bhi.w	800755a <USBH_Process+0x3aa>
 80071de:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <USBH_Process+0x34>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	08007215 	.word	0x08007215
 80071e8:	08007247 	.word	0x08007247
 80071ec:	080072af 	.word	0x080072af
 80071f0:	080074f5 	.word	0x080074f5
 80071f4:	0800755b 	.word	0x0800755b
 80071f8:	08007353 	.word	0x08007353
 80071fc:	0800749b 	.word	0x0800749b
 8007200:	08007389 	.word	0x08007389
 8007204:	080073a9 	.word	0x080073a9
 8007208:	080073c9 	.word	0x080073c9
 800720c:	0800740d 	.word	0x0800740d
 8007210:	080074dd 	.word	0x080074dd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 819e 	beq.w	800755e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007228:	20c8      	movs	r0, #200	; 0xc8
 800722a:	f001 fd9f 	bl	8008d6c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 fc95 	bl	8008b5e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007244:	e18b      	b.n	800755e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800724c:	2b01      	cmp	r3, #1
 800724e:	d107      	bne.n	8007260 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800725e:	e18d      	b.n	800757c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800726a:	d914      	bls.n	8007296 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007272:	3301      	adds	r3, #1
 8007274:	b2da      	uxtb	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007282:	2b03      	cmp	r3, #3
 8007284:	d903      	bls.n	800728e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	220d      	movs	r2, #13
 800728a:	701a      	strb	r2, [r3, #0]
      break;
 800728c:	e176      	b.n	800757c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	701a      	strb	r2, [r3, #0]
      break;
 8007294:	e172      	b.n	800757c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800729c:	f103 020a 	add.w	r2, r3, #10
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80072a6:	200a      	movs	r0, #10
 80072a8:	f001 fd60 	bl	8008d6c <USBH_Delay>
      break;
 80072ac:	e166      	b.n	800757c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072be:	2104      	movs	r1, #4
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80072c4:	2064      	movs	r0, #100	; 0x64
 80072c6:	f001 fd51 	bl	8008d6c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 fc20 	bl	8008b10 <USBH_LL_GetSpeed>
 80072d0:	4603      	mov	r3, r0
 80072d2:	461a      	mov	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2205      	movs	r2, #5
 80072de:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80072e0:	2100      	movs	r1, #0
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 fa2b 	bl	800873e <USBH_AllocPipe>
 80072e8:	4603      	mov	r3, r0
 80072ea:	461a      	mov	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80072f0:	2180      	movs	r1, #128	; 0x80
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 fa23 	bl	800873e <USBH_AllocPipe>
 80072f8:	4603      	mov	r3, r0
 80072fa:	461a      	mov	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	7919      	ldrb	r1, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007314:	b292      	uxth	r2, r2
 8007316:	9202      	str	r2, [sp, #8]
 8007318:	2200      	movs	r2, #0
 800731a:	9201      	str	r2, [sp, #4]
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	4603      	mov	r3, r0
 8007320:	2280      	movs	r2, #128	; 0x80
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f001 f9dc 	bl	80086e0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	7959      	ldrb	r1, [r3, #5]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800733c:	b292      	uxth	r2, r2
 800733e:	9202      	str	r2, [sp, #8]
 8007340:	2200      	movs	r2, #0
 8007342:	9201      	str	r2, [sp, #4]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	4603      	mov	r3, r0
 8007348:	2200      	movs	r2, #0
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 f9c8 	bl	80086e0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007350:	e114      	b.n	800757c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f918 	bl	8007588 <USBH_HandleEnum>
 8007358:	4603      	mov	r3, r0
 800735a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	f040 80fe 	bne.w	8007562 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007374:	2b01      	cmp	r3, #1
 8007376:	d103      	bne.n	8007380 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2208      	movs	r2, #8
 800737c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800737e:	e0f0      	b.n	8007562 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2207      	movs	r2, #7
 8007384:	701a      	strb	r2, [r3, #0]
      break;
 8007386:	e0ec      	b.n	8007562 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 80e9 	beq.w	8007566 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800739a:	2101      	movs	r1, #1
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2208      	movs	r2, #8
 80073a4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80073a6:	e0de      	b.n	8007566 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fc2c 	bl	8007c10 <USBH_SetCfg>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 80d5 	bne.w	800756a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2209      	movs	r2, #9
 80073c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073c6:	e0d0      	b.n	800756a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80073ce:	f003 0320 	and.w	r3, r3, #32
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d016      	beq.n	8007404 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80073d6:	2101      	movs	r1, #1
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fc3c 	bl	8007c56 <USBH_SetFeature>
 80073de:	4603      	mov	r3, r0
 80073e0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d103      	bne.n	80073f2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	220a      	movs	r2, #10
 80073ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073f0:	e0bd      	b.n	800756e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80073f2:	7bbb      	ldrb	r3, [r7, #14]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	f040 80b9 	bne.w	800756e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	220a      	movs	r2, #10
 8007400:	701a      	strb	r2, [r3, #0]
      break;
 8007402:	e0b4      	b.n	800756e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	220a      	movs	r2, #10
 8007408:	701a      	strb	r2, [r3, #0]
      break;
 800740a:	e0b0      	b.n	800756e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 80ad 	beq.w	8007572 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007420:	2300      	movs	r3, #0
 8007422:	73fb      	strb	r3, [r7, #15]
 8007424:	e016      	b.n	8007454 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007426:	7bfa      	ldrb	r2, [r7, #15]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	32de      	adds	r2, #222	; 0xde
 800742c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007430:	791a      	ldrb	r2, [r3, #4]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007438:	429a      	cmp	r2, r3
 800743a:	d108      	bne.n	800744e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800743c:	7bfa      	ldrb	r2, [r7, #15]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	32de      	adds	r2, #222	; 0xde
 8007442:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800744c:	e005      	b.n	800745a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	3301      	adds	r3, #1
 8007452:	73fb      	strb	r3, [r7, #15]
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0e5      	beq.n	8007426 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007460:	2b00      	cmp	r3, #0
 8007462:	d016      	beq.n	8007492 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	4798      	blx	r3
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d109      	bne.n	800748a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2206      	movs	r2, #6
 800747a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007482:	2103      	movs	r1, #3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007488:	e073      	b.n	8007572 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	220d      	movs	r2, #13
 800748e:	701a      	strb	r2, [r3, #0]
      break;
 8007490:	e06f      	b.n	8007572 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	220d      	movs	r2, #13
 8007496:	701a      	strb	r2, [r3, #0]
      break;
 8007498:	e06b      	b.n	8007572 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d017      	beq.n	80074d4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	4798      	blx	r3
 80074b0:	4603      	mov	r3, r0
 80074b2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d103      	bne.n	80074c4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	220b      	movs	r2, #11
 80074c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074c2:	e058      	b.n	8007576 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d154      	bne.n	8007576 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	220d      	movs	r2, #13
 80074d0:	701a      	strb	r2, [r3, #0]
      break;
 80074d2:	e050      	b.n	8007576 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	220d      	movs	r2, #13
 80074d8:	701a      	strb	r2, [r3, #0]
      break;
 80074da:	e04c      	b.n	8007576 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d049      	beq.n	800757a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	4798      	blx	r3
      }
      break;
 80074f2:	e042      	b.n	800757a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff fd67 	bl	8006fd0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007508:	2b00      	cmp	r3, #0
 800750a:	d009      	beq.n	8007520 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007530:	2105      	movs	r1, #5
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b01      	cmp	r3, #1
 8007540:	d107      	bne.n	8007552 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff fe20 	bl	8007190 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007550:	e014      	b.n	800757c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 faa6 	bl	8008aa4 <USBH_LL_Start>
      break;
 8007558:	e010      	b.n	800757c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800755a:	bf00      	nop
 800755c:	e00e      	b.n	800757c <USBH_Process+0x3cc>
      break;
 800755e:	bf00      	nop
 8007560:	e00c      	b.n	800757c <USBH_Process+0x3cc>
      break;
 8007562:	bf00      	nop
 8007564:	e00a      	b.n	800757c <USBH_Process+0x3cc>
    break;
 8007566:	bf00      	nop
 8007568:	e008      	b.n	800757c <USBH_Process+0x3cc>
      break;
 800756a:	bf00      	nop
 800756c:	e006      	b.n	800757c <USBH_Process+0x3cc>
      break;
 800756e:	bf00      	nop
 8007570:	e004      	b.n	800757c <USBH_Process+0x3cc>
      break;
 8007572:	bf00      	nop
 8007574:	e002      	b.n	800757c <USBH_Process+0x3cc>
      break;
 8007576:	bf00      	nop
 8007578:	e000      	b.n	800757c <USBH_Process+0x3cc>
      break;
 800757a:	bf00      	nop
  }
  return USBH_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop

08007588 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af04      	add	r7, sp, #16
 800758e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007590:	2301      	movs	r3, #1
 8007592:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007594:	2301      	movs	r3, #1
 8007596:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	2b07      	cmp	r3, #7
 800759e:	f200 81c1 	bhi.w	8007924 <USBH_HandleEnum+0x39c>
 80075a2:	a201      	add	r2, pc, #4	; (adr r2, 80075a8 <USBH_HandleEnum+0x20>)
 80075a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a8:	080075c9 	.word	0x080075c9
 80075ac:	08007687 	.word	0x08007687
 80075b0:	080076f1 	.word	0x080076f1
 80075b4:	0800777f 	.word	0x0800777f
 80075b8:	080077e9 	.word	0x080077e9
 80075bc:	08007859 	.word	0x08007859
 80075c0:	0800789f 	.word	0x0800789f
 80075c4:	080078e5 	.word	0x080078e5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80075c8:	2108      	movs	r1, #8
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa50 	bl	8007a70 <USBH_Get_DevDesc>
 80075d0:	4603      	mov	r3, r0
 80075d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d130      	bne.n	800763c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	7919      	ldrb	r1, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075fe:	b292      	uxth	r2, r2
 8007600:	9202      	str	r2, [sp, #8]
 8007602:	2200      	movs	r2, #0
 8007604:	9201      	str	r2, [sp, #4]
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	4603      	mov	r3, r0
 800760a:	2280      	movs	r2, #128	; 0x80
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 f867 	bl	80086e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	7959      	ldrb	r1, [r3, #5]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007626:	b292      	uxth	r2, r2
 8007628:	9202      	str	r2, [sp, #8]
 800762a:	2200      	movs	r2, #0
 800762c:	9201      	str	r2, [sp, #4]
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	4603      	mov	r3, r0
 8007632:	2200      	movs	r2, #0
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 f853 	bl	80086e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800763a:	e175      	b.n	8007928 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	2b03      	cmp	r3, #3
 8007640:	f040 8172 	bne.w	8007928 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800764a:	3301      	adds	r3, #1
 800764c:	b2da      	uxtb	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800765a:	2b03      	cmp	r3, #3
 800765c:	d903      	bls.n	8007666 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	220d      	movs	r2, #13
 8007662:	701a      	strb	r2, [r3, #0]
      break;
 8007664:	e160      	b.n	8007928 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	795b      	ldrb	r3, [r3, #5]
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 f887 	bl	8008780 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	791b      	ldrb	r3, [r3, #4]
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f001 f881 	bl	8008780 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
      break;
 8007684:	e150      	b.n	8007928 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007686:	2112      	movs	r1, #18
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f9f1 	bl	8007a70 <USBH_Get_DevDesc>
 800768e:	4603      	mov	r3, r0
 8007690:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007692:	7bbb      	ldrb	r3, [r7, #14]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d103      	bne.n	80076a0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800769e:	e145      	b.n	800792c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	f040 8142 	bne.w	800792c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ae:	3301      	adds	r3, #1
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d903      	bls.n	80076ca <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	220d      	movs	r2, #13
 80076c6:	701a      	strb	r2, [r3, #0]
      break;
 80076c8:	e130      	b.n	800792c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	795b      	ldrb	r3, [r3, #5]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 f855 	bl	8008780 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	791b      	ldrb	r3, [r3, #4]
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 f84f 	bl	8008780 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	701a      	strb	r2, [r3, #0]
      break;
 80076ee:	e11d      	b.n	800792c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80076f0:	2101      	movs	r1, #1
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa68 	bl	8007bc8 <USBH_SetAddress>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d132      	bne.n	8007768 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007702:	2002      	movs	r0, #2
 8007704:	f001 fb32 	bl	8008d6c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2203      	movs	r2, #3
 8007714:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	7919      	ldrb	r1, [r3, #4]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800772a:	b292      	uxth	r2, r2
 800772c:	9202      	str	r2, [sp, #8]
 800772e:	2200      	movs	r2, #0
 8007730:	9201      	str	r2, [sp, #4]
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	4603      	mov	r3, r0
 8007736:	2280      	movs	r2, #128	; 0x80
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 ffd1 	bl	80086e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	7959      	ldrb	r1, [r3, #5]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007752:	b292      	uxth	r2, r2
 8007754:	9202      	str	r2, [sp, #8]
 8007756:	2200      	movs	r2, #0
 8007758:	9201      	str	r2, [sp, #4]
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	4603      	mov	r3, r0
 800775e:	2200      	movs	r2, #0
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 ffbd 	bl	80086e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007766:	e0e3      	b.n	8007930 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	2b03      	cmp	r3, #3
 800776c:	f040 80e0 	bne.w	8007930 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	220d      	movs	r2, #13
 8007774:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	705a      	strb	r2, [r3, #1]
      break;
 800777c:	e0d8      	b.n	8007930 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800777e:	2109      	movs	r1, #9
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f99d 	bl	8007ac0 <USBH_Get_CfgDesc>
 8007786:	4603      	mov	r3, r0
 8007788:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800778a:	7bbb      	ldrb	r3, [r7, #14]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d103      	bne.n	8007798 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2204      	movs	r2, #4
 8007794:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007796:	e0cd      	b.n	8007934 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	2b03      	cmp	r3, #3
 800779c:	f040 80ca 	bne.w	8007934 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077a6:	3301      	adds	r3, #1
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d903      	bls.n	80077c2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	220d      	movs	r2, #13
 80077be:	701a      	strb	r2, [r3, #0]
      break;
 80077c0:	e0b8      	b.n	8007934 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	795b      	ldrb	r3, [r3, #5]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 ffd9 	bl	8008780 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	791b      	ldrb	r3, [r3, #4]
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 ffd3 	bl	8008780 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	701a      	strb	r2, [r3, #0]
      break;
 80077e6:	e0a5      	b.n	8007934 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f965 	bl	8007ac0 <USBH_Get_CfgDesc>
 80077f6:	4603      	mov	r3, r0
 80077f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d103      	bne.n	8007808 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2205      	movs	r2, #5
 8007804:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007806:	e097      	b.n	8007938 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	2b03      	cmp	r3, #3
 800780c:	f040 8094 	bne.w	8007938 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007816:	3301      	adds	r3, #1
 8007818:	b2da      	uxtb	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007826:	2b03      	cmp	r3, #3
 8007828:	d903      	bls.n	8007832 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	220d      	movs	r2, #13
 800782e:	701a      	strb	r2, [r3, #0]
      break;
 8007830:	e082      	b.n	8007938 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	795b      	ldrb	r3, [r3, #5]
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 ffa1 	bl	8008780 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	791b      	ldrb	r3, [r3, #4]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 ff9b 	bl	8008780 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	701a      	strb	r2, [r3, #0]
      break;
 8007856:	e06f      	b.n	8007938 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800785e:	2b00      	cmp	r3, #0
 8007860:	d019      	beq.n	8007896 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800786e:	23ff      	movs	r3, #255	; 0xff
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f949 	bl	8007b08 <USBH_Get_StringDesc>
 8007876:	4603      	mov	r3, r0
 8007878:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d103      	bne.n	8007888 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2206      	movs	r2, #6
 8007884:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007886:	e059      	b.n	800793c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b03      	cmp	r3, #3
 800788c:	d156      	bne.n	800793c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2206      	movs	r2, #6
 8007892:	705a      	strb	r2, [r3, #1]
      break;
 8007894:	e052      	b.n	800793c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2206      	movs	r2, #6
 800789a:	705a      	strb	r2, [r3, #1]
      break;
 800789c:	e04e      	b.n	800793c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d019      	beq.n	80078dc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078b4:	23ff      	movs	r3, #255	; 0xff
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f926 	bl	8007b08 <USBH_Get_StringDesc>
 80078bc:	4603      	mov	r3, r0
 80078be:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d103      	bne.n	80078ce <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2207      	movs	r2, #7
 80078ca:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078cc:	e038      	b.n	8007940 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d135      	bne.n	8007940 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2207      	movs	r2, #7
 80078d8:	705a      	strb	r2, [r3, #1]
      break;
 80078da:	e031      	b.n	8007940 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2207      	movs	r2, #7
 80078e0:	705a      	strb	r2, [r3, #1]
      break;
 80078e2:	e02d      	b.n	8007940 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d017      	beq.n	800791e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078fa:	23ff      	movs	r3, #255	; 0xff
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f903 	bl	8007b08 <USBH_Get_StringDesc>
 8007902:	4603      	mov	r3, r0
 8007904:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d102      	bne.n	8007912 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007910:	e018      	b.n	8007944 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	2b03      	cmp	r3, #3
 8007916:	d115      	bne.n	8007944 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	73fb      	strb	r3, [r7, #15]
      break;
 800791c:	e012      	b.n	8007944 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
      break;
 8007922:	e00f      	b.n	8007944 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007924:	bf00      	nop
 8007926:	e00e      	b.n	8007946 <USBH_HandleEnum+0x3be>
      break;
 8007928:	bf00      	nop
 800792a:	e00c      	b.n	8007946 <USBH_HandleEnum+0x3be>
      break;
 800792c:	bf00      	nop
 800792e:	e00a      	b.n	8007946 <USBH_HandleEnum+0x3be>
      break;
 8007930:	bf00      	nop
 8007932:	e008      	b.n	8007946 <USBH_HandleEnum+0x3be>
      break;
 8007934:	bf00      	nop
 8007936:	e006      	b.n	8007946 <USBH_HandleEnum+0x3be>
      break;
 8007938:	bf00      	nop
 800793a:	e004      	b.n	8007946 <USBH_HandleEnum+0x3be>
      break;
 800793c:	bf00      	nop
 800793e:	e002      	b.n	8007946 <USBH_HandleEnum+0x3be>
      break;
 8007940:	bf00      	nop
 8007942:	e000      	b.n	8007946 <USBH_HandleEnum+0x3be>
      break;
 8007944:	bf00      	nop
  }
  return Status;
 8007946:	7bfb      	ldrb	r3, [r7, #15]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007962:	bf00      	nop
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f804 	bl	8007992 <USBH_HandleSof>
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b0b      	cmp	r3, #11
 80079a2:	d10a      	bne.n	80079ba <USBH_HandleSof+0x28>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d005      	beq.n	80079ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
  }
}
 80079ba:	bf00      	nop
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80079d2:	bf00      	nop
}
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80079ee:	bf00      	nop
}
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 f846 	bl	8008ada <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	791b      	ldrb	r3, [r3, #4]
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fe93 	bl	8008780 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	795b      	ldrb	r3, [r3, #5]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fe8d 	bl	8008780 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a82:	78fb      	ldrb	r3, [r7, #3]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a8e:	2100      	movs	r1, #0
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f864 	bl	8007b5e <USBH_GetDescriptor>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10a      	bne.n	8007ab6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007aac:	78fa      	ldrb	r2, [r7, #3]
 8007aae:	b292      	uxth	r2, r2
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	f000 f919 	bl	8007ce8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	331c      	adds	r3, #28
 8007ad0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007ad2:	887b      	ldrh	r3, [r7, #2]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007adc:	2100      	movs	r1, #0
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f83d 	bl	8007b5e <USBH_GetDescriptor>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d107      	bne.n	8007afe <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007aee:	887b      	ldrh	r3, [r7, #2]
 8007af0:	461a      	mov	r2, r3
 8007af2:	68b9      	ldr	r1, [r7, #8]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f989 	bl	8007e0c <USBH_ParseCfgDesc>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	607a      	str	r2, [r7, #4]
 8007b12:	461a      	mov	r2, r3
 8007b14:	460b      	mov	r3, r1
 8007b16:	72fb      	strb	r3, [r7, #11]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007b1c:	7afb      	ldrb	r3, [r7, #11]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b24:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007b2c:	893b      	ldrh	r3, [r7, #8]
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	460b      	mov	r3, r1
 8007b32:	2100      	movs	r1, #0
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 f812 	bl	8007b5e <USBH_GetDescriptor>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d107      	bne.n	8007b54 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b4a:	893a      	ldrh	r2, [r7, #8]
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fb26 	bl	80081a0 <USBH_ParseStringDesc>
  }

  return status;
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	607b      	str	r3, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	72fb      	strb	r3, [r7, #11]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	789b      	ldrb	r3, [r3, #2]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d11c      	bne.n	8007bb2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b78:	7afb      	ldrb	r3, [r7, #11]
 8007b7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2206      	movs	r2, #6
 8007b88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	893a      	ldrh	r2, [r7, #8]
 8007b8e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b90:	893b      	ldrh	r3, [r7, #8]
 8007b92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b9a:	d104      	bne.n	8007ba6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f240 4209 	movw	r2, #1033	; 0x409
 8007ba2:	829a      	strh	r2, [r3, #20]
 8007ba4:	e002      	b.n	8007bac <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8b3a      	ldrh	r2, [r7, #24]
 8007bb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007bb2:	8b3b      	ldrh	r3, [r7, #24]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 fb3f 	bl	800823c <USBH_CtlReq>
 8007bbe:	4603      	mov	r3, r0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	789b      	ldrb	r3, [r3, #2]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d10f      	bne.n	8007bfc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2205      	movs	r2, #5
 8007be6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007be8:	78fb      	ldrb	r3, [r7, #3]
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2100      	movs	r1, #0
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fb1b 	bl	800823c <USBH_CtlReq>
 8007c06:	4603      	mov	r3, r0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	789b      	ldrb	r3, [r3, #2]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d10e      	bne.n	8007c42 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2209      	movs	r2, #9
 8007c2e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	887a      	ldrh	r2, [r7, #2]
 8007c34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c42:	2200      	movs	r2, #0
 8007c44:	2100      	movs	r1, #0
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 faf8 	bl	800823c <USBH_CtlReq>
 8007c4c:	4603      	mov	r3, r0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b082      	sub	sp, #8
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	789b      	ldrb	r3, [r3, #2]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d10f      	bne.n	8007c8a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2203      	movs	r2, #3
 8007c74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fad4 	bl	800823c <USBH_CtlReq>
 8007c94:	4603      	mov	r3, r0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	789b      	ldrb	r3, [r3, #2]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d10f      	bne.n	8007cd2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007cc4:	78fb      	ldrb	r3, [r7, #3]
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fab0 	bl	800823c <USBH_CtlReq>
 8007cdc:	4603      	mov	r3, r0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	781a      	ldrb	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	785a      	ldrb	r2, [r3, #1]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	3302      	adds	r3, #2
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	3303      	adds	r3, #3
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	021b      	lsls	r3, r3, #8
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	791a      	ldrb	r2, [r3, #4]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	795a      	ldrb	r2, [r3, #5]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	799a      	ldrb	r2, [r3, #6]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	79da      	ldrb	r2, [r3, #7]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	79db      	ldrb	r3, [r3, #7]
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	dc0f      	bgt.n	8007d6a <USBH_ParseDevDesc+0x82>
 8007d4a:	2b08      	cmp	r3, #8
 8007d4c:	db14      	blt.n	8007d78 <USBH_ParseDevDesc+0x90>
 8007d4e:	3b08      	subs	r3, #8
 8007d50:	4a2d      	ldr	r2, [pc, #180]	; (8007e08 <USBH_ParseDevDesc+0x120>)
 8007d52:	fa22 f303 	lsr.w	r3, r2, r3
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bf14      	ite	ne
 8007d5e:	2301      	movne	r3, #1
 8007d60:	2300      	moveq	r3, #0
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d102      	bne.n	8007d6e <USBH_ParseDevDesc+0x86>
 8007d68:	e006      	b.n	8007d78 <USBH_ParseDevDesc+0x90>
 8007d6a:	2b40      	cmp	r3, #64	; 0x40
 8007d6c:	d104      	bne.n	8007d78 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	79da      	ldrb	r2, [r3, #7]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	71da      	strb	r2, [r3, #7]
      break;
 8007d76:	e003      	b.n	8007d80 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2240      	movs	r2, #64	; 0x40
 8007d7c:	71da      	strb	r2, [r3, #7]
      break;
 8007d7e:	bf00      	nop
  }

  if (length > 8U)
 8007d80:	88fb      	ldrh	r3, [r7, #6]
 8007d82:	2b08      	cmp	r3, #8
 8007d84:	d939      	bls.n	8007dfa <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	3308      	adds	r3, #8
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	3309      	adds	r3, #9
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	021b      	lsls	r3, r3, #8
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	330a      	adds	r3, #10
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	330b      	adds	r3, #11
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	021b      	lsls	r3, r3, #8
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	4313      	orrs	r3, r2
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	330c      	adds	r3, #12
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	330d      	adds	r3, #13
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	021b      	lsls	r3, r3, #8
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	7b9a      	ldrb	r2, [r3, #14]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	7bda      	ldrb	r2, [r3, #15]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	7c1a      	ldrb	r2, [r3, #16]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	7c5a      	ldrb	r2, [r3, #17]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	745a      	strb	r2, [r3, #17]
  }
}
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	01000101 	.word	0x01000101

08007e0c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08c      	sub	sp, #48	; 0x30
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	4613      	mov	r3, r2
 8007e18:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e20:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	785a      	ldrb	r2, [r3, #1]
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	3302      	adds	r3, #2
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	3303      	adds	r3, #3
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	4313      	orrs	r3, r2
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e68:	bf28      	it	cs
 8007e6a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	791a      	ldrb	r2, [r3, #4]
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	795a      	ldrb	r2, [r3, #5]
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	799a      	ldrb	r2, [r3, #6]
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	79da      	ldrb	r2, [r3, #7]
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	7a1a      	ldrb	r2, [r3, #8]
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b09      	cmp	r3, #9
 8007ea2:	d002      	beq.n	8007eaa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	2209      	movs	r2, #9
 8007ea8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007eaa:	88fb      	ldrh	r3, [r7, #6]
 8007eac:	2b09      	cmp	r3, #9
 8007eae:	f240 809d 	bls.w	8007fec <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007eb2:	2309      	movs	r3, #9
 8007eb4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007eba:	e081      	b.n	8007fc0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ebc:	f107 0316 	add.w	r3, r7, #22
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ec4:	f000 f99f 	bl	8008206 <USBH_GetNextDesc>
 8007ec8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	785b      	ldrb	r3, [r3, #1]
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d176      	bne.n	8007fc0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	2b09      	cmp	r3, #9
 8007ed8:	d002      	beq.n	8007ee0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007edc:	2209      	movs	r2, #9
 8007ede:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ee4:	221a      	movs	r2, #26
 8007ee6:	fb02 f303 	mul.w	r3, r2, r3
 8007eea:	3308      	adds	r3, #8
 8007eec:	6a3a      	ldr	r2, [r7, #32]
 8007eee:	4413      	add	r3, r2
 8007ef0:	3302      	adds	r3, #2
 8007ef2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ef6:	69f8      	ldr	r0, [r7, #28]
 8007ef8:	f000 f87e 	bl	8007ff8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f06:	e043      	b.n	8007f90 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f08:	f107 0316 	add.w	r3, r7, #22
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f10:	f000 f979 	bl	8008206 <USBH_GetNextDesc>
 8007f14:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	785b      	ldrb	r3, [r3, #1]
 8007f1a:	2b05      	cmp	r3, #5
 8007f1c:	d138      	bne.n	8007f90 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	795b      	ldrb	r3, [r3, #5]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d10f      	bne.n	8007f46 <USBH_ParseCfgDesc+0x13a>
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	799b      	ldrb	r3, [r3, #6]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d10b      	bne.n	8007f46 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	79db      	ldrb	r3, [r3, #7]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10f      	bne.n	8007f56 <USBH_ParseCfgDesc+0x14a>
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b09      	cmp	r3, #9
 8007f3c:	d00b      	beq.n	8007f56 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	2209      	movs	r2, #9
 8007f42:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f44:	e007      	b.n	8007f56 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	2b07      	cmp	r3, #7
 8007f4c:	d004      	beq.n	8007f58 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	2207      	movs	r2, #7
 8007f52:	701a      	strb	r2, [r3, #0]
 8007f54:	e000      	b.n	8007f58 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f56:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f5c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f60:	3201      	adds	r2, #1
 8007f62:	00d2      	lsls	r2, r2, #3
 8007f64:	211a      	movs	r1, #26
 8007f66:	fb01 f303 	mul.w	r3, r1, r3
 8007f6a:	4413      	add	r3, r2
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	6a3a      	ldr	r2, [r7, #32]
 8007f70:	4413      	add	r3, r2
 8007f72:	3304      	adds	r3, #4
 8007f74:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f78:	69b9      	ldr	r1, [r7, #24]
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 f86b 	bl	8008056 <USBH_ParseEPDesc>
 8007f80:	4603      	mov	r3, r0
 8007f82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007f86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	791b      	ldrb	r3, [r3, #4]
 8007f94:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d204      	bcs.n	8007fa6 <USBH_ParseCfgDesc+0x19a>
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	885a      	ldrh	r2, [r3, #2]
 8007fa0:	8afb      	ldrh	r3, [r7, #22]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d8b0      	bhi.n	8007f08 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	791b      	ldrb	r3, [r3, #4]
 8007faa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d201      	bcs.n	8007fb6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e01c      	b.n	8007ff0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fba:	3301      	adds	r3, #1
 8007fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d805      	bhi.n	8007fd4 <USBH_ParseCfgDesc+0x1c8>
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	885a      	ldrh	r2, [r3, #2]
 8007fcc:	8afb      	ldrh	r3, [r7, #22]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	f63f af74 	bhi.w	8007ebc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	791b      	ldrb	r3, [r3, #4]
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	bf28      	it	cs
 8007fdc:	2302      	movcs	r3, #2
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d201      	bcs.n	8007fec <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e001      	b.n	8007ff0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007fec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3730      	adds	r7, #48	; 0x30
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781a      	ldrb	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	785a      	ldrb	r2, [r3, #1]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	789a      	ldrb	r2, [r3, #2]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	78da      	ldrb	r2, [r3, #3]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	791a      	ldrb	r2, [r3, #4]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	795a      	ldrb	r2, [r3, #5]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	799a      	ldrb	r2, [r3, #6]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	79da      	ldrb	r2, [r3, #7]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	7a1a      	ldrb	r2, [r3, #8]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	721a      	strb	r2, [r3, #8]
}
 800804a:	bf00      	nop
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008056:	b480      	push	{r7}
 8008058:	b087      	sub	sp, #28
 800805a:	af00      	add	r7, sp, #0
 800805c:	60f8      	str	r0, [r7, #12]
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	781a      	ldrb	r2, [r3, #0]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	785a      	ldrb	r2, [r3, #1]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	789a      	ldrb	r2, [r3, #2]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	78da      	ldrb	r2, [r3, #3]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3304      	adds	r3, #4
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	b29a      	uxth	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	3305      	adds	r3, #5
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	b29b      	uxth	r3, r3
 8008096:	021b      	lsls	r3, r3, #8
 8008098:	b29b      	uxth	r3, r3
 800809a:	4313      	orrs	r3, r2
 800809c:	b29a      	uxth	r2, r3
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	799a      	ldrb	r2, [r3, #6]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	889b      	ldrh	r3, [r3, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d102      	bne.n	80080b8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80080b2:	2303      	movs	r3, #3
 80080b4:	75fb      	strb	r3, [r7, #23]
 80080b6:	e033      	b.n	8008120 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	889b      	ldrh	r3, [r3, #4]
 80080bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80080c0:	f023 0307 	bic.w	r3, r3, #7
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	889b      	ldrh	r3, [r3, #4]
 80080ce:	b21a      	sxth	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3304      	adds	r3, #4
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	b299      	uxth	r1, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3305      	adds	r3, #5
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	021b      	lsls	r3, r3, #8
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	430b      	orrs	r3, r1
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d110      	bne.n	8008112 <USBH_ParseEPDesc+0xbc>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3304      	adds	r3, #4
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	b299      	uxth	r1, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3305      	adds	r3, #5
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	021b      	lsls	r3, r3, #8
 8008102:	b29b      	uxth	r3, r3
 8008104:	430b      	orrs	r3, r1
 8008106:	b29b      	uxth	r3, r3
 8008108:	b21b      	sxth	r3, r3
 800810a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800810e:	b21b      	sxth	r3, r3
 8008110:	e001      	b.n	8008116 <USBH_ParseEPDesc+0xc0>
 8008112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008116:	4313      	orrs	r3, r2
 8008118:	b21b      	sxth	r3, r3
 800811a:	b29a      	uxth	r2, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008126:	2b00      	cmp	r3, #0
 8008128:	d116      	bne.n	8008158 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	78db      	ldrb	r3, [r3, #3]
 800812e:	f003 0303 	and.w	r3, r3, #3
 8008132:	2b01      	cmp	r3, #1
 8008134:	d005      	beq.n	8008142 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	78db      	ldrb	r3, [r3, #3]
 800813a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800813e:	2b03      	cmp	r3, #3
 8008140:	d127      	bne.n	8008192 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	799b      	ldrb	r3, [r3, #6]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d003      	beq.n	8008152 <USBH_ParseEPDesc+0xfc>
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	799b      	ldrb	r3, [r3, #6]
 800814e:	2b10      	cmp	r3, #16
 8008150:	d91f      	bls.n	8008192 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008152:	2303      	movs	r3, #3
 8008154:	75fb      	strb	r3, [r7, #23]
 8008156:	e01c      	b.n	8008192 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	78db      	ldrb	r3, [r3, #3]
 800815c:	f003 0303 	and.w	r3, r3, #3
 8008160:	2b01      	cmp	r3, #1
 8008162:	d10a      	bne.n	800817a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	799b      	ldrb	r3, [r3, #6]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <USBH_ParseEPDesc+0x11e>
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	799b      	ldrb	r3, [r3, #6]
 8008170:	2b10      	cmp	r3, #16
 8008172:	d90e      	bls.n	8008192 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008174:	2303      	movs	r3, #3
 8008176:	75fb      	strb	r3, [r7, #23]
 8008178:	e00b      	b.n	8008192 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	78db      	ldrb	r3, [r3, #3]
 800817e:	f003 0303 	and.w	r3, r3, #3
 8008182:	2b03      	cmp	r3, #3
 8008184:	d105      	bne.n	8008192 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	799b      	ldrb	r3, [r3, #6]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800818e:	2303      	movs	r3, #3
 8008190:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
}
 8008194:	4618      	mov	r0, r3
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	4613      	mov	r3, r2
 80081ac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3301      	adds	r3, #1
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d120      	bne.n	80081fa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	1e9a      	subs	r2, r3, #2
 80081be:	88fb      	ldrh	r3, [r7, #6]
 80081c0:	4293      	cmp	r3, r2
 80081c2:	bf28      	it	cs
 80081c4:	4613      	movcs	r3, r2
 80081c6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3302      	adds	r3, #2
 80081cc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80081ce:	2300      	movs	r3, #0
 80081d0:	82fb      	strh	r3, [r7, #22]
 80081d2:	e00b      	b.n	80081ec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80081d4:	8afb      	ldrh	r3, [r7, #22]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4413      	add	r3, r2
 80081da:	781a      	ldrb	r2, [r3, #0]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	701a      	strb	r2, [r3, #0]
      pdest++;
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	3301      	adds	r3, #1
 80081e4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80081e6:	8afb      	ldrh	r3, [r7, #22]
 80081e8:	3302      	adds	r3, #2
 80081ea:	82fb      	strh	r3, [r7, #22]
 80081ec:	8afa      	ldrh	r2, [r7, #22]
 80081ee:	8abb      	ldrh	r3, [r7, #20]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d3ef      	bcc.n	80081d4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	2200      	movs	r2, #0
 80081f8:	701a      	strb	r2, [r3, #0]
  }
}
 80081fa:	bf00      	nop
 80081fc:	371c      	adds	r7, #28
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008206:	b480      	push	{r7}
 8008208:	b085      	sub	sp, #20
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	881a      	ldrh	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	b29b      	uxth	r3, r3
 800821a:	4413      	add	r3, r2
 800821c:	b29a      	uxth	r2, r3
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4413      	add	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800822e:	68fb      	ldr	r3, [r7, #12]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	4613      	mov	r3, r2
 8008248:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800824a:	2301      	movs	r3, #1
 800824c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	789b      	ldrb	r3, [r3, #2]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d002      	beq.n	800825c <USBH_CtlReq+0x20>
 8008256:	2b02      	cmp	r3, #2
 8008258:	d00f      	beq.n	800827a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800825a:	e027      	b.n	80082ac <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	88fa      	ldrh	r2, [r7, #6]
 8008266:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2201      	movs	r2, #1
 800826c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2202      	movs	r2, #2
 8008272:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008274:	2301      	movs	r3, #1
 8008276:	75fb      	strb	r3, [r7, #23]
      break;
 8008278:	e018      	b.n	80082ac <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 f81c 	bl	80082b8 <USBH_HandleControl>
 8008280:	4603      	mov	r3, r0
 8008282:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <USBH_CtlReq+0x54>
 800828a:	7dfb      	ldrb	r3, [r7, #23]
 800828c:	2b03      	cmp	r3, #3
 800828e:	d106      	bne.n	800829e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	761a      	strb	r2, [r3, #24]
      break;
 800829c:	e005      	b.n	80082aa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800829e:	7dfb      	ldrb	r3, [r7, #23]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d102      	bne.n	80082aa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2201      	movs	r2, #1
 80082a8:	709a      	strb	r2, [r3, #2]
      break;
 80082aa:	bf00      	nop
  }
  return status;
 80082ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af02      	add	r7, sp, #8
 80082be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	7e1b      	ldrb	r3, [r3, #24]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	2b0a      	cmp	r3, #10
 80082d0:	f200 8156 	bhi.w	8008580 <USBH_HandleControl+0x2c8>
 80082d4:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <USBH_HandleControl+0x24>)
 80082d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082da:	bf00      	nop
 80082dc:	08008309 	.word	0x08008309
 80082e0:	08008323 	.word	0x08008323
 80082e4:	0800838d 	.word	0x0800838d
 80082e8:	080083b3 	.word	0x080083b3
 80082ec:	080083eb 	.word	0x080083eb
 80082f0:	08008415 	.word	0x08008415
 80082f4:	08008467 	.word	0x08008467
 80082f8:	08008489 	.word	0x08008489
 80082fc:	080084c5 	.word	0x080084c5
 8008300:	080084eb 	.word	0x080084eb
 8008304:	08008529 	.word	0x08008529
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f103 0110 	add.w	r1, r3, #16
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	795b      	ldrb	r3, [r3, #5]
 8008312:	461a      	mov	r2, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f943 	bl	80085a0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2202      	movs	r2, #2
 800831e:	761a      	strb	r2, [r3, #24]
      break;
 8008320:	e139      	b.n	8008596 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	795b      	ldrb	r3, [r3, #5]
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fcc5 	bl	8008cb8 <USBH_LL_GetURBState>
 800832e:	4603      	mov	r3, r0
 8008330:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008332:	7bbb      	ldrb	r3, [r7, #14]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d11e      	bne.n	8008376 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	7c1b      	ldrb	r3, [r3, #16]
 800833c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008340:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	8adb      	ldrh	r3, [r3, #22]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800834a:	7b7b      	ldrb	r3, [r7, #13]
 800834c:	2b80      	cmp	r3, #128	; 0x80
 800834e:	d103      	bne.n	8008358 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2203      	movs	r2, #3
 8008354:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008356:	e115      	b.n	8008584 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2205      	movs	r2, #5
 800835c:	761a      	strb	r2, [r3, #24]
      break;
 800835e:	e111      	b.n	8008584 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008360:	7b7b      	ldrb	r3, [r7, #13]
 8008362:	2b80      	cmp	r3, #128	; 0x80
 8008364:	d103      	bne.n	800836e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2209      	movs	r2, #9
 800836a:	761a      	strb	r2, [r3, #24]
      break;
 800836c:	e10a      	b.n	8008584 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2207      	movs	r2, #7
 8008372:	761a      	strb	r2, [r3, #24]
      break;
 8008374:	e106      	b.n	8008584 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	2b04      	cmp	r3, #4
 800837a:	d003      	beq.n	8008384 <USBH_HandleControl+0xcc>
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	2b02      	cmp	r3, #2
 8008380:	f040 8100 	bne.w	8008584 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	220b      	movs	r2, #11
 8008388:	761a      	strb	r2, [r3, #24]
      break;
 800838a:	e0fb      	b.n	8008584 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008392:	b29a      	uxth	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6899      	ldr	r1, [r3, #8]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	899a      	ldrh	r2, [r3, #12]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	791b      	ldrb	r3, [r3, #4]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f93a 	bl	800861e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2204      	movs	r2, #4
 80083ae:	761a      	strb	r2, [r3, #24]
      break;
 80083b0:	e0f1      	b.n	8008596 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	791b      	ldrb	r3, [r3, #4]
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fc7d 	bl	8008cb8 <USBH_LL_GetURBState>
 80083be:	4603      	mov	r3, r0
 80083c0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d102      	bne.n	80083ce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2209      	movs	r2, #9
 80083cc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	2b05      	cmp	r3, #5
 80083d2:	d102      	bne.n	80083da <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80083d4:	2303      	movs	r3, #3
 80083d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083d8:	e0d6      	b.n	8008588 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80083da:	7bbb      	ldrb	r3, [r7, #14]
 80083dc:	2b04      	cmp	r3, #4
 80083de:	f040 80d3 	bne.w	8008588 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	220b      	movs	r2, #11
 80083e6:	761a      	strb	r2, [r3, #24]
      break;
 80083e8:	e0ce      	b.n	8008588 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6899      	ldr	r1, [r3, #8]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	899a      	ldrh	r2, [r3, #12]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	795b      	ldrb	r3, [r3, #5]
 80083f6:	2001      	movs	r0, #1
 80083f8:	9000      	str	r0, [sp, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f8ea 	bl	80085d4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008406:	b29a      	uxth	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2206      	movs	r2, #6
 8008410:	761a      	strb	r2, [r3, #24]
      break;
 8008412:	e0c0      	b.n	8008596 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	795b      	ldrb	r3, [r3, #5]
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fc4c 	bl	8008cb8 <USBH_LL_GetURBState>
 8008420:	4603      	mov	r3, r0
 8008422:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008424:	7bbb      	ldrb	r3, [r7, #14]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d103      	bne.n	8008432 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2207      	movs	r2, #7
 800842e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008430:	e0ac      	b.n	800858c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008432:	7bbb      	ldrb	r3, [r7, #14]
 8008434:	2b05      	cmp	r3, #5
 8008436:	d105      	bne.n	8008444 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	220c      	movs	r2, #12
 800843c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800843e:	2303      	movs	r3, #3
 8008440:	73fb      	strb	r3, [r7, #15]
      break;
 8008442:	e0a3      	b.n	800858c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	2b02      	cmp	r3, #2
 8008448:	d103      	bne.n	8008452 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2205      	movs	r2, #5
 800844e:	761a      	strb	r2, [r3, #24]
      break;
 8008450:	e09c      	b.n	800858c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	2b04      	cmp	r3, #4
 8008456:	f040 8099 	bne.w	800858c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	220b      	movs	r2, #11
 800845e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008460:	2302      	movs	r3, #2
 8008462:	73fb      	strb	r3, [r7, #15]
      break;
 8008464:	e092      	b.n	800858c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	791b      	ldrb	r3, [r3, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	2100      	movs	r1, #0
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f8d5 	bl	800861e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800847a:	b29a      	uxth	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2208      	movs	r2, #8
 8008484:	761a      	strb	r2, [r3, #24]

      break;
 8008486:	e086      	b.n	8008596 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	791b      	ldrb	r3, [r3, #4]
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fc12 	bl	8008cb8 <USBH_LL_GetURBState>
 8008494:	4603      	mov	r3, r0
 8008496:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d105      	bne.n	80084aa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	220d      	movs	r2, #13
 80084a2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084a8:	e072      	b.n	8008590 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	2b04      	cmp	r3, #4
 80084ae:	d103      	bne.n	80084b8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	220b      	movs	r2, #11
 80084b4:	761a      	strb	r2, [r3, #24]
      break;
 80084b6:	e06b      	b.n	8008590 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
 80084ba:	2b05      	cmp	r3, #5
 80084bc:	d168      	bne.n	8008590 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80084be:	2303      	movs	r3, #3
 80084c0:	73fb      	strb	r3, [r7, #15]
      break;
 80084c2:	e065      	b.n	8008590 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	795b      	ldrb	r3, [r3, #5]
 80084c8:	2201      	movs	r2, #1
 80084ca:	9200      	str	r2, [sp, #0]
 80084cc:	2200      	movs	r2, #0
 80084ce:	2100      	movs	r1, #0
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f87f 	bl	80085d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084dc:	b29a      	uxth	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	220a      	movs	r2, #10
 80084e6:	761a      	strb	r2, [r3, #24]
      break;
 80084e8:	e055      	b.n	8008596 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	795b      	ldrb	r3, [r3, #5]
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fbe1 	bl	8008cb8 <USBH_LL_GetURBState>
 80084f6:	4603      	mov	r3, r0
 80084f8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d105      	bne.n	800850c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	220d      	movs	r2, #13
 8008508:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800850a:	e043      	b.n	8008594 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800850c:	7bbb      	ldrb	r3, [r7, #14]
 800850e:	2b02      	cmp	r3, #2
 8008510:	d103      	bne.n	800851a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2209      	movs	r2, #9
 8008516:	761a      	strb	r2, [r3, #24]
      break;
 8008518:	e03c      	b.n	8008594 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	2b04      	cmp	r3, #4
 800851e:	d139      	bne.n	8008594 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	220b      	movs	r2, #11
 8008524:	761a      	strb	r2, [r3, #24]
      break;
 8008526:	e035      	b.n	8008594 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	7e5b      	ldrb	r3, [r3, #25]
 800852c:	3301      	adds	r3, #1
 800852e:	b2da      	uxtb	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	765a      	strb	r2, [r3, #25]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	7e5b      	ldrb	r3, [r3, #25]
 8008538:	2b02      	cmp	r3, #2
 800853a:	d806      	bhi.n	800854a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008548:	e025      	b.n	8008596 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008550:	2106      	movs	r1, #6
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	795b      	ldrb	r3, [r3, #5]
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f90c 	bl	8008780 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	791b      	ldrb	r3, [r3, #4]
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f906 	bl	8008780 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800857a:	2302      	movs	r3, #2
 800857c:	73fb      	strb	r3, [r7, #15]
      break;
 800857e:	e00a      	b.n	8008596 <USBH_HandleControl+0x2de>

    default:
      break;
 8008580:	bf00      	nop
 8008582:	e008      	b.n	8008596 <USBH_HandleControl+0x2de>
      break;
 8008584:	bf00      	nop
 8008586:	e006      	b.n	8008596 <USBH_HandleControl+0x2de>
      break;
 8008588:	bf00      	nop
 800858a:	e004      	b.n	8008596 <USBH_HandleControl+0x2de>
      break;
 800858c:	bf00      	nop
 800858e:	e002      	b.n	8008596 <USBH_HandleControl+0x2de>
      break;
 8008590:	bf00      	nop
 8008592:	e000      	b.n	8008596 <USBH_HandleControl+0x2de>
      break;
 8008594:	bf00      	nop
  }

  return status;
 8008596:	7bfb      	ldrb	r3, [r7, #15]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af04      	add	r7, sp, #16
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	4613      	mov	r3, r2
 80085ac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085ae:	79f9      	ldrb	r1, [r7, #7]
 80085b0:	2300      	movs	r3, #0
 80085b2:	9303      	str	r3, [sp, #12]
 80085b4:	2308      	movs	r3, #8
 80085b6:	9302      	str	r3, [sp, #8]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	9301      	str	r3, [sp, #4]
 80085bc:	2300      	movs	r3, #0
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	2300      	movs	r3, #0
 80085c2:	2200      	movs	r2, #0
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 fb46 	bl	8008c56 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af04      	add	r7, sp, #16
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	4611      	mov	r1, r2
 80085e0:	461a      	mov	r2, r3
 80085e2:	460b      	mov	r3, r1
 80085e4:	80fb      	strh	r3, [r7, #6]
 80085e6:	4613      	mov	r3, r2
 80085e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085f8:	7979      	ldrb	r1, [r7, #5]
 80085fa:	7e3b      	ldrb	r3, [r7, #24]
 80085fc:	9303      	str	r3, [sp, #12]
 80085fe:	88fb      	ldrh	r3, [r7, #6]
 8008600:	9302      	str	r3, [sp, #8]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	2301      	movs	r3, #1
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	2300      	movs	r3, #0
 800860c:	2200      	movs	r2, #0
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f000 fb21 	bl	8008c56 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b088      	sub	sp, #32
 8008622:	af04      	add	r7, sp, #16
 8008624:	60f8      	str	r0, [r7, #12]
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	4611      	mov	r1, r2
 800862a:	461a      	mov	r2, r3
 800862c:	460b      	mov	r3, r1
 800862e:	80fb      	strh	r3, [r7, #6]
 8008630:	4613      	mov	r3, r2
 8008632:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008634:	7979      	ldrb	r1, [r7, #5]
 8008636:	2300      	movs	r3, #0
 8008638:	9303      	str	r3, [sp, #12]
 800863a:	88fb      	ldrh	r3, [r7, #6]
 800863c:	9302      	str	r3, [sp, #8]
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	9301      	str	r3, [sp, #4]
 8008642:	2301      	movs	r3, #1
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	2300      	movs	r3, #0
 8008648:	2201      	movs	r2, #1
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fb03 	bl	8008c56 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008650:	2300      	movs	r3, #0

}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b088      	sub	sp, #32
 800865e:	af04      	add	r7, sp, #16
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	4611      	mov	r1, r2
 8008666:	461a      	mov	r2, r3
 8008668:	460b      	mov	r3, r1
 800866a:	80fb      	strh	r3, [r7, #6]
 800866c:	4613      	mov	r3, r2
 800866e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800867e:	7979      	ldrb	r1, [r7, #5]
 8008680:	7e3b      	ldrb	r3, [r7, #24]
 8008682:	9303      	str	r3, [sp, #12]
 8008684:	88fb      	ldrh	r3, [r7, #6]
 8008686:	9302      	str	r3, [sp, #8]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	9301      	str	r3, [sp, #4]
 800868c:	2301      	movs	r3, #1
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	2302      	movs	r3, #2
 8008692:	2200      	movs	r2, #0
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 fade 	bl	8008c56 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af04      	add	r7, sp, #16
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4611      	mov	r1, r2
 80086b0:	461a      	mov	r2, r3
 80086b2:	460b      	mov	r3, r1
 80086b4:	80fb      	strh	r3, [r7, #6]
 80086b6:	4613      	mov	r3, r2
 80086b8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086ba:	7979      	ldrb	r1, [r7, #5]
 80086bc:	2300      	movs	r3, #0
 80086be:	9303      	str	r3, [sp, #12]
 80086c0:	88fb      	ldrh	r3, [r7, #6]
 80086c2:	9302      	str	r3, [sp, #8]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	9301      	str	r3, [sp, #4]
 80086c8:	2301      	movs	r3, #1
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	2302      	movs	r3, #2
 80086ce:	2201      	movs	r2, #1
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 fac0 	bl	8008c56 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af04      	add	r7, sp, #16
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	4608      	mov	r0, r1
 80086ea:	4611      	mov	r1, r2
 80086ec:	461a      	mov	r2, r3
 80086ee:	4603      	mov	r3, r0
 80086f0:	70fb      	strb	r3, [r7, #3]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70bb      	strb	r3, [r7, #2]
 80086f6:	4613      	mov	r3, r2
 80086f8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80086fa:	7878      	ldrb	r0, [r7, #1]
 80086fc:	78ba      	ldrb	r2, [r7, #2]
 80086fe:	78f9      	ldrb	r1, [r7, #3]
 8008700:	8b3b      	ldrh	r3, [r7, #24]
 8008702:	9302      	str	r3, [sp, #8]
 8008704:	7d3b      	ldrb	r3, [r7, #20]
 8008706:	9301      	str	r3, [sp, #4]
 8008708:	7c3b      	ldrb	r3, [r7, #16]
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	4603      	mov	r3, r0
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa53 	bl	8008bba <USBH_LL_OpenPipe>

  return USBH_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b082      	sub	sp, #8
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	460b      	mov	r3, r1
 8008728:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800872a:	78fb      	ldrb	r3, [r7, #3]
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa72 	bl	8008c18 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
 8008746:	460b      	mov	r3, r1
 8008748:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f836 	bl	80087bc <USBH_GetFreePipe>
 8008750:	4603      	mov	r3, r0
 8008752:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008754:	89fb      	ldrh	r3, [r7, #14]
 8008756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800875a:	4293      	cmp	r3, r2
 800875c:	d00a      	beq.n	8008774 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800875e:	78fa      	ldrb	r2, [r7, #3]
 8008760:	89fb      	ldrh	r3, [r7, #14]
 8008762:	f003 030f 	and.w	r3, r3, #15
 8008766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	33e0      	adds	r3, #224	; 0xe0
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	440b      	add	r3, r1
 8008772:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008774:	89fb      	ldrh	r3, [r7, #14]
 8008776:	b2db      	uxtb	r3, r3
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	2b0f      	cmp	r3, #15
 8008790:	d80d      	bhi.n	80087ae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008792:	78fb      	ldrb	r3, [r7, #3]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	33e0      	adds	r3, #224	; 0xe0
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80087a4:	6879      	ldr	r1, [r7, #4]
 80087a6:	33e0      	adds	r3, #224	; 0xe0
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087c8:	2300      	movs	r3, #0
 80087ca:	73fb      	strb	r3, [r7, #15]
 80087cc:	e00f      	b.n	80087ee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	33e0      	adds	r3, #224	; 0xe0
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d102      	bne.n	80087e8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	e007      	b.n	80087f8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	3301      	adds	r3, #1
 80087ec:	73fb      	strb	r3, [r7, #15]
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	2b0f      	cmp	r3, #15
 80087f2:	d9ec      	bls.n	80087ce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80087f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008808:	2201      	movs	r2, #1
 800880a:	490e      	ldr	r1, [pc, #56]	; (8008844 <MX_USB_HOST_Init+0x40>)
 800880c:	480e      	ldr	r0, [pc, #56]	; (8008848 <MX_USB_HOST_Init+0x44>)
 800880e:	f7fe fba5 	bl	8006f5c <USBH_Init>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008818:	f7f8 fb9a 	bl	8000f50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800881c:	490b      	ldr	r1, [pc, #44]	; (800884c <MX_USB_HOST_Init+0x48>)
 800881e:	480a      	ldr	r0, [pc, #40]	; (8008848 <MX_USB_HOST_Init+0x44>)
 8008820:	f7fe fc2a 	bl	8007078 <USBH_RegisterClass>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800882a:	f7f8 fb91 	bl	8000f50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800882e:	4806      	ldr	r0, [pc, #24]	; (8008848 <MX_USB_HOST_Init+0x44>)
 8008830:	f7fe fcae 	bl	8007190 <USBH_Start>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800883a:	f7f8 fb89 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800883e:	bf00      	nop
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	08008865 	.word	0x08008865
 8008848:	200001b8 	.word	0x200001b8
 800884c:	2000000c 	.word	0x2000000c

08008850 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008854:	4802      	ldr	r0, [pc, #8]	; (8008860 <MX_USB_HOST_Process+0x10>)
 8008856:	f7fe fcab 	bl	80071b0 <USBH_Process>
}
 800885a:	bf00      	nop
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	200001b8 	.word	0x200001b8

08008864 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	3b01      	subs	r3, #1
 8008874:	2b04      	cmp	r3, #4
 8008876:	d819      	bhi.n	80088ac <USBH_UserProcess+0x48>
 8008878:	a201      	add	r2, pc, #4	; (adr r2, 8008880 <USBH_UserProcess+0x1c>)
 800887a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887e:	bf00      	nop
 8008880:	080088ad 	.word	0x080088ad
 8008884:	0800889d 	.word	0x0800889d
 8008888:	080088ad 	.word	0x080088ad
 800888c:	080088a5 	.word	0x080088a5
 8008890:	08008895 	.word	0x08008895
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008894:	4b09      	ldr	r3, [pc, #36]	; (80088bc <USBH_UserProcess+0x58>)
 8008896:	2203      	movs	r2, #3
 8008898:	701a      	strb	r2, [r3, #0]
  break;
 800889a:	e008      	b.n	80088ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800889c:	4b07      	ldr	r3, [pc, #28]	; (80088bc <USBH_UserProcess+0x58>)
 800889e:	2202      	movs	r2, #2
 80088a0:	701a      	strb	r2, [r3, #0]
  break;
 80088a2:	e004      	b.n	80088ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80088a4:	4b05      	ldr	r3, [pc, #20]	; (80088bc <USBH_UserProcess+0x58>)
 80088a6:	2201      	movs	r2, #1
 80088a8:	701a      	strb	r2, [r3, #0]
  break;
 80088aa:	e000      	b.n	80088ae <USBH_UserProcess+0x4a>

  default:
  break;
 80088ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80088ae:	bf00      	nop
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	20000590 	.word	0x20000590

080088c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b08a      	sub	sp, #40	; 0x28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088c8:	f107 0314 	add.w	r3, r7, #20
 80088cc:	2200      	movs	r2, #0
 80088ce:	601a      	str	r2, [r3, #0]
 80088d0:	605a      	str	r2, [r3, #4]
 80088d2:	609a      	str	r2, [r3, #8]
 80088d4:	60da      	str	r2, [r3, #12]
 80088d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088e0:	d147      	bne.n	8008972 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088e2:	2300      	movs	r3, #0
 80088e4:	613b      	str	r3, [r7, #16]
 80088e6:	4b25      	ldr	r3, [pc, #148]	; (800897c <HAL_HCD_MspInit+0xbc>)
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	4a24      	ldr	r2, [pc, #144]	; (800897c <HAL_HCD_MspInit+0xbc>)
 80088ec:	f043 0301 	orr.w	r3, r3, #1
 80088f0:	6313      	str	r3, [r2, #48]	; 0x30
 80088f2:	4b22      	ldr	r3, [pc, #136]	; (800897c <HAL_HCD_MspInit+0xbc>)
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	613b      	str	r3, [r7, #16]
 80088fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80088fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008904:	2300      	movs	r3, #0
 8008906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008908:	2300      	movs	r3, #0
 800890a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800890c:	f107 0314 	add.w	r3, r7, #20
 8008910:	4619      	mov	r1, r3
 8008912:	481b      	ldr	r0, [pc, #108]	; (8008980 <HAL_HCD_MspInit+0xc0>)
 8008914:	f7f8 ff2e 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008918:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800891c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800891e:	2302      	movs	r3, #2
 8008920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008922:	2300      	movs	r3, #0
 8008924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008926:	2300      	movs	r3, #0
 8008928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800892a:	230a      	movs	r3, #10
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800892e:	f107 0314 	add.w	r3, r7, #20
 8008932:	4619      	mov	r1, r3
 8008934:	4812      	ldr	r0, [pc, #72]	; (8008980 <HAL_HCD_MspInit+0xc0>)
 8008936:	f7f8 ff1d 	bl	8001774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800893a:	4b10      	ldr	r3, [pc, #64]	; (800897c <HAL_HCD_MspInit+0xbc>)
 800893c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893e:	4a0f      	ldr	r2, [pc, #60]	; (800897c <HAL_HCD_MspInit+0xbc>)
 8008940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008944:	6353      	str	r3, [r2, #52]	; 0x34
 8008946:	2300      	movs	r3, #0
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	4b0c      	ldr	r3, [pc, #48]	; (800897c <HAL_HCD_MspInit+0xbc>)
 800894c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800894e:	4a0b      	ldr	r2, [pc, #44]	; (800897c <HAL_HCD_MspInit+0xbc>)
 8008950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008954:	6453      	str	r3, [r2, #68]	; 0x44
 8008956:	4b09      	ldr	r3, [pc, #36]	; (800897c <HAL_HCD_MspInit+0xbc>)
 8008958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008962:	2200      	movs	r2, #0
 8008964:	2100      	movs	r1, #0
 8008966:	2043      	movs	r0, #67	; 0x43
 8008968:	f7f8 feab 	bl	80016c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800896c:	2043      	movs	r0, #67	; 0x43
 800896e:	f7f8 fec4 	bl	80016fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008972:	bf00      	nop
 8008974:	3728      	adds	r7, #40	; 0x28
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	40023800 	.word	0x40023800
 8008980:	40020000 	.word	0x40020000

08008984 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe ffeb 	bl	800796e <USBH_LL_IncTimer>
}
 8008998:	bf00      	nop
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7ff f823 	bl	80079fa <USBH_LL_Connect>
}
 80089b4:	bf00      	nop
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7ff f82c 	bl	8007a28 <USBH_LL_Disconnect>
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
 80089e4:	4613      	mov	r3, r2
 80089e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fe ffdd 	bl	80079c2 <USBH_LL_PortEnabled>
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe ffdd 	bl	80079de <USBH_LL_PortDisabled>
}
 8008a24:	bf00      	nop
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d12a      	bne.n	8008a94 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a3e:	4a18      	ldr	r2, [pc, #96]	; (8008aa0 <USBH_LL_Init+0x74>)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a15      	ldr	r2, [pc, #84]	; (8008aa0 <USBH_LL_Init+0x74>)
 8008a4a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a4e:	4b14      	ldr	r3, [pc, #80]	; (8008aa0 <USBH_LL_Init+0x74>)
 8008a50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a54:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008a56:	4b12      	ldr	r3, [pc, #72]	; (8008aa0 <USBH_LL_Init+0x74>)
 8008a58:	2208      	movs	r2, #8
 8008a5a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a5c:	4b10      	ldr	r3, [pc, #64]	; (8008aa0 <USBH_LL_Init+0x74>)
 8008a5e:	2201      	movs	r2, #1
 8008a60:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a62:	4b0f      	ldr	r3, [pc, #60]	; (8008aa0 <USBH_LL_Init+0x74>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a68:	4b0d      	ldr	r3, [pc, #52]	; (8008aa0 <USBH_LL_Init+0x74>)
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	; (8008aa0 <USBH_LL_Init+0x74>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008a74:	480a      	ldr	r0, [pc, #40]	; (8008aa0 <USBH_LL_Init+0x74>)
 8008a76:	f7f9 f832 	bl	8001ade <HAL_HCD_Init>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a80:	f7f8 fa66 	bl	8000f50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a84:	4806      	ldr	r0, [pc, #24]	; (8008aa0 <USBH_LL_Init+0x74>)
 8008a86:	f7f9 fc16 	bl	80022b6 <HAL_HCD_GetCurrentFrame>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7fe ff5e 	bl	8007950 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20000594 	.word	0x20000594

08008aa4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7f9 fb85 	bl	80021ca <HAL_HCD_Start>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 f95c 	bl	8008d84 <USBH_Get_USB_Status>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7f9 fb8d 	bl	8002210 <HAL_HCD_Stop>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 f941 	bl	8008d84 <USBH_Get_USB_Status>
 8008b02:	4603      	mov	r3, r0
 8008b04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7f9 fbd5 	bl	80022d2 <HAL_HCD_GetCurrentSpeed>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d00c      	beq.n	8008b48 <USBH_LL_GetSpeed+0x38>
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d80d      	bhi.n	8008b4e <USBH_LL_GetSpeed+0x3e>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <USBH_LL_GetSpeed+0x2c>
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d003      	beq.n	8008b42 <USBH_LL_GetSpeed+0x32>
 8008b3a:	e008      	b.n	8008b4e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b40:	e008      	b.n	8008b54 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b42:	2301      	movs	r3, #1
 8008b44:	73fb      	strb	r3, [r7, #15]
    break;
 8008b46:	e005      	b.n	8008b54 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b48:	2302      	movs	r3, #2
 8008b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4c:	e002      	b.n	8008b54 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	73fb      	strb	r3, [r7, #15]
    break;
 8008b52:	bf00      	nop
  }
  return  speed;
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7f9 fb68 	bl	800224a <HAL_HCD_ResetPort>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 f8ff 	bl	8008d84 <USBH_Get_USB_Status>
 8008b86:	4603      	mov	r3, r0
 8008b88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ba6:	78fa      	ldrb	r2, [r7, #3]
 8008ba8:	4611      	mov	r1, r2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7f9 fb6f 	bl	800228e <HAL_HCD_HC_GetXferCount>
 8008bb0:	4603      	mov	r3, r0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008bba:	b590      	push	{r4, r7, lr}
 8008bbc:	b089      	sub	sp, #36	; 0x24
 8008bbe:	af04      	add	r7, sp, #16
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	4608      	mov	r0, r1
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	4603      	mov	r3, r0
 8008bca:	70fb      	strb	r3, [r7, #3]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70bb      	strb	r3, [r7, #2]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008be2:	787c      	ldrb	r4, [r7, #1]
 8008be4:	78ba      	ldrb	r2, [r7, #2]
 8008be6:	78f9      	ldrb	r1, [r7, #3]
 8008be8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bea:	9302      	str	r3, [sp, #8]
 8008bec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	4623      	mov	r3, r4
 8008bfa:	f7f8 ffd2 	bl	8001ba2 <HAL_HCD_HC_Init>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 f8bd 	bl	8008d84 <USBH_Get_USB_Status>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd90      	pop	{r4, r7, pc}

08008c18 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	4611      	mov	r1, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7f9 f842 	bl	8001cc0 <HAL_HCD_HC_Halt>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 f89e 	bl	8008d84 <USBH_Get_USB_Status>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008c56:	b590      	push	{r4, r7, lr}
 8008c58:	b089      	sub	sp, #36	; 0x24
 8008c5a:	af04      	add	r7, sp, #16
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	4608      	mov	r0, r1
 8008c60:	4611      	mov	r1, r2
 8008c62:	461a      	mov	r2, r3
 8008c64:	4603      	mov	r3, r0
 8008c66:	70fb      	strb	r3, [r7, #3]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70bb      	strb	r3, [r7, #2]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c7e:	787c      	ldrb	r4, [r7, #1]
 8008c80:	78ba      	ldrb	r2, [r7, #2]
 8008c82:	78f9      	ldrb	r1, [r7, #3]
 8008c84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c88:	9303      	str	r3, [sp, #12]
 8008c8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c8c:	9302      	str	r3, [sp, #8]
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	9301      	str	r3, [sp, #4]
 8008c92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	4623      	mov	r3, r4
 8008c9a:	f7f9 f835 	bl	8001d08 <HAL_HCD_HC_SubmitRequest>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 f86d 	bl	8008d84 <USBH_Get_USB_Status>
 8008caa:	4603      	mov	r3, r0
 8008cac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd90      	pop	{r4, r7, pc}

08008cb8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cca:	78fa      	ldrb	r2, [r7, #3]
 8008ccc:	4611      	mov	r1, r2
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7f9 fac9 	bl	8002266 <HAL_HCD_HC_GetURBState>
 8008cd4:	4603      	mov	r3, r0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b082      	sub	sp, #8
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d103      	bne.n	8008cfc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 f870 	bl	8008ddc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008cfc:	20c8      	movs	r0, #200	; 0xc8
 8008cfe:	f7f8 fbe1 	bl	80014c4 <HAL_Delay>
  return USBH_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	70fb      	strb	r3, [r7, #3]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d22:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	212c      	movs	r1, #44	; 0x2c
 8008d2a:	fb01 f303 	mul.w	r3, r1, r3
 8008d2e:	4413      	add	r3, r2
 8008d30:	333b      	adds	r3, #59	; 0x3b
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d009      	beq.n	8008d4c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008d38:	78fb      	ldrb	r3, [r7, #3]
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	212c      	movs	r1, #44	; 0x2c
 8008d3e:	fb01 f303 	mul.w	r3, r1, r3
 8008d42:	4413      	add	r3, r2
 8008d44:	3354      	adds	r3, #84	; 0x54
 8008d46:	78ba      	ldrb	r2, [r7, #2]
 8008d48:	701a      	strb	r2, [r3, #0]
 8008d4a:	e008      	b.n	8008d5e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008d4c:	78fb      	ldrb	r3, [r7, #3]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	212c      	movs	r1, #44	; 0x2c
 8008d52:	fb01 f303 	mul.w	r3, r1, r3
 8008d56:	4413      	add	r3, r2
 8008d58:	3355      	adds	r3, #85	; 0x55
 8008d5a:	78ba      	ldrb	r2, [r7, #2]
 8008d5c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7f8 fba5 	bl	80014c4 <HAL_Delay>
}
 8008d7a:	bf00      	nop
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
	...

08008d84 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d92:	79fb      	ldrb	r3, [r7, #7]
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d817      	bhi.n	8008dc8 <USBH_Get_USB_Status+0x44>
 8008d98:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <USBH_Get_USB_Status+0x1c>)
 8008d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9e:	bf00      	nop
 8008da0:	08008db1 	.word	0x08008db1
 8008da4:	08008db7 	.word	0x08008db7
 8008da8:	08008dbd 	.word	0x08008dbd
 8008dac:	08008dc3 	.word	0x08008dc3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]
    break;
 8008db4:	e00b      	b.n	8008dce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008db6:	2302      	movs	r3, #2
 8008db8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dba:	e008      	b.n	8008dce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc0:	e005      	b.n	8008dce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc6:	e002      	b.n	8008dce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008dc8:	2302      	movs	r3, #2
 8008dca:	73fb      	strb	r3, [r7, #15]
    break;
 8008dcc:	bf00      	nop
  }
  return usb_status;
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <MX_DriverVbusFS>:
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	71fb      	strb	r3, [r7, #7]
 8008de6:	79fb      	ldrb	r3, [r7, #7]
 8008de8:	73fb      	strb	r3, [r7, #15]
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d102      	bne.n	8008df6 <MX_DriverVbusFS+0x1a>
 8008df0:	2300      	movs	r3, #0
 8008df2:	73fb      	strb	r3, [r7, #15]
 8008df4:	e001      	b.n	8008dfa <MX_DriverVbusFS+0x1e>
 8008df6:	2301      	movs	r3, #1
 8008df8:	73fb      	strb	r3, [r7, #15]
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	2101      	movs	r1, #1
 8008e00:	4803      	ldr	r0, [pc, #12]	; (8008e10 <MX_DriverVbusFS+0x34>)
 8008e02:	f7f8 fe53 	bl	8001aac <HAL_GPIO_WritePin>
 8008e06:	bf00      	nop
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	40020800 	.word	0x40020800

08008e14 <malloc>:
 8008e14:	4b02      	ldr	r3, [pc, #8]	; (8008e20 <malloc+0xc>)
 8008e16:	4601      	mov	r1, r0
 8008e18:	6818      	ldr	r0, [r3, #0]
 8008e1a:	f000 b82b 	b.w	8008e74 <_malloc_r>
 8008e1e:	bf00      	nop
 8008e20:	20000078 	.word	0x20000078

08008e24 <free>:
 8008e24:	4b02      	ldr	r3, [pc, #8]	; (8008e30 <free+0xc>)
 8008e26:	4601      	mov	r1, r0
 8008e28:	6818      	ldr	r0, [r3, #0]
 8008e2a:	f000 b8f3 	b.w	8009014 <_free_r>
 8008e2e:	bf00      	nop
 8008e30:	20000078 	.word	0x20000078

08008e34 <sbrk_aligned>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	4e0e      	ldr	r6, [pc, #56]	; (8008e70 <sbrk_aligned+0x3c>)
 8008e38:	460c      	mov	r4, r1
 8008e3a:	6831      	ldr	r1, [r6, #0]
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	b911      	cbnz	r1, 8008e46 <sbrk_aligned+0x12>
 8008e40:	f000 f8ac 	bl	8008f9c <_sbrk_r>
 8008e44:	6030      	str	r0, [r6, #0]
 8008e46:	4621      	mov	r1, r4
 8008e48:	4628      	mov	r0, r5
 8008e4a:	f000 f8a7 	bl	8008f9c <_sbrk_r>
 8008e4e:	1c43      	adds	r3, r0, #1
 8008e50:	d00a      	beq.n	8008e68 <sbrk_aligned+0x34>
 8008e52:	1cc4      	adds	r4, r0, #3
 8008e54:	f024 0403 	bic.w	r4, r4, #3
 8008e58:	42a0      	cmp	r0, r4
 8008e5a:	d007      	beq.n	8008e6c <sbrk_aligned+0x38>
 8008e5c:	1a21      	subs	r1, r4, r0
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f000 f89c 	bl	8008f9c <_sbrk_r>
 8008e64:	3001      	adds	r0, #1
 8008e66:	d101      	bne.n	8008e6c <sbrk_aligned+0x38>
 8008e68:	f04f 34ff 	mov.w	r4, #4294967295
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}
 8008e70:	2000089c 	.word	0x2000089c

08008e74 <_malloc_r>:
 8008e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e78:	1ccd      	adds	r5, r1, #3
 8008e7a:	f025 0503 	bic.w	r5, r5, #3
 8008e7e:	3508      	adds	r5, #8
 8008e80:	2d0c      	cmp	r5, #12
 8008e82:	bf38      	it	cc
 8008e84:	250c      	movcc	r5, #12
 8008e86:	2d00      	cmp	r5, #0
 8008e88:	4607      	mov	r7, r0
 8008e8a:	db01      	blt.n	8008e90 <_malloc_r+0x1c>
 8008e8c:	42a9      	cmp	r1, r5
 8008e8e:	d905      	bls.n	8008e9c <_malloc_r+0x28>
 8008e90:	230c      	movs	r3, #12
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	2600      	movs	r6, #0
 8008e96:	4630      	mov	r0, r6
 8008e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f70 <_malloc_r+0xfc>
 8008ea0:	f000 f868 	bl	8008f74 <__malloc_lock>
 8008ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ea8:	461c      	mov	r4, r3
 8008eaa:	bb5c      	cbnz	r4, 8008f04 <_malloc_r+0x90>
 8008eac:	4629      	mov	r1, r5
 8008eae:	4638      	mov	r0, r7
 8008eb0:	f7ff ffc0 	bl	8008e34 <sbrk_aligned>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	d155      	bne.n	8008f66 <_malloc_r+0xf2>
 8008eba:	f8d8 4000 	ldr.w	r4, [r8]
 8008ebe:	4626      	mov	r6, r4
 8008ec0:	2e00      	cmp	r6, #0
 8008ec2:	d145      	bne.n	8008f50 <_malloc_r+0xdc>
 8008ec4:	2c00      	cmp	r4, #0
 8008ec6:	d048      	beq.n	8008f5a <_malloc_r+0xe6>
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4638      	mov	r0, r7
 8008ece:	eb04 0903 	add.w	r9, r4, r3
 8008ed2:	f000 f863 	bl	8008f9c <_sbrk_r>
 8008ed6:	4581      	cmp	r9, r0
 8008ed8:	d13f      	bne.n	8008f5a <_malloc_r+0xe6>
 8008eda:	6821      	ldr	r1, [r4, #0]
 8008edc:	1a6d      	subs	r5, r5, r1
 8008ede:	4629      	mov	r1, r5
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	f7ff ffa7 	bl	8008e34 <sbrk_aligned>
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	d037      	beq.n	8008f5a <_malloc_r+0xe6>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	442b      	add	r3, r5
 8008eee:	6023      	str	r3, [r4, #0]
 8008ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d038      	beq.n	8008f6a <_malloc_r+0xf6>
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	42a2      	cmp	r2, r4
 8008efc:	d12b      	bne.n	8008f56 <_malloc_r+0xe2>
 8008efe:	2200      	movs	r2, #0
 8008f00:	605a      	str	r2, [r3, #4]
 8008f02:	e00f      	b.n	8008f24 <_malloc_r+0xb0>
 8008f04:	6822      	ldr	r2, [r4, #0]
 8008f06:	1b52      	subs	r2, r2, r5
 8008f08:	d41f      	bmi.n	8008f4a <_malloc_r+0xd6>
 8008f0a:	2a0b      	cmp	r2, #11
 8008f0c:	d917      	bls.n	8008f3e <_malloc_r+0xca>
 8008f0e:	1961      	adds	r1, r4, r5
 8008f10:	42a3      	cmp	r3, r4
 8008f12:	6025      	str	r5, [r4, #0]
 8008f14:	bf18      	it	ne
 8008f16:	6059      	strne	r1, [r3, #4]
 8008f18:	6863      	ldr	r3, [r4, #4]
 8008f1a:	bf08      	it	eq
 8008f1c:	f8c8 1000 	streq.w	r1, [r8]
 8008f20:	5162      	str	r2, [r4, r5]
 8008f22:	604b      	str	r3, [r1, #4]
 8008f24:	4638      	mov	r0, r7
 8008f26:	f104 060b 	add.w	r6, r4, #11
 8008f2a:	f000 f829 	bl	8008f80 <__malloc_unlock>
 8008f2e:	f026 0607 	bic.w	r6, r6, #7
 8008f32:	1d23      	adds	r3, r4, #4
 8008f34:	1af2      	subs	r2, r6, r3
 8008f36:	d0ae      	beq.n	8008e96 <_malloc_r+0x22>
 8008f38:	1b9b      	subs	r3, r3, r6
 8008f3a:	50a3      	str	r3, [r4, r2]
 8008f3c:	e7ab      	b.n	8008e96 <_malloc_r+0x22>
 8008f3e:	42a3      	cmp	r3, r4
 8008f40:	6862      	ldr	r2, [r4, #4]
 8008f42:	d1dd      	bne.n	8008f00 <_malloc_r+0x8c>
 8008f44:	f8c8 2000 	str.w	r2, [r8]
 8008f48:	e7ec      	b.n	8008f24 <_malloc_r+0xb0>
 8008f4a:	4623      	mov	r3, r4
 8008f4c:	6864      	ldr	r4, [r4, #4]
 8008f4e:	e7ac      	b.n	8008eaa <_malloc_r+0x36>
 8008f50:	4634      	mov	r4, r6
 8008f52:	6876      	ldr	r6, [r6, #4]
 8008f54:	e7b4      	b.n	8008ec0 <_malloc_r+0x4c>
 8008f56:	4613      	mov	r3, r2
 8008f58:	e7cc      	b.n	8008ef4 <_malloc_r+0x80>
 8008f5a:	230c      	movs	r3, #12
 8008f5c:	603b      	str	r3, [r7, #0]
 8008f5e:	4638      	mov	r0, r7
 8008f60:	f000 f80e 	bl	8008f80 <__malloc_unlock>
 8008f64:	e797      	b.n	8008e96 <_malloc_r+0x22>
 8008f66:	6025      	str	r5, [r4, #0]
 8008f68:	e7dc      	b.n	8008f24 <_malloc_r+0xb0>
 8008f6a:	605b      	str	r3, [r3, #4]
 8008f6c:	deff      	udf	#255	; 0xff
 8008f6e:	bf00      	nop
 8008f70:	20000898 	.word	0x20000898

08008f74 <__malloc_lock>:
 8008f74:	4801      	ldr	r0, [pc, #4]	; (8008f7c <__malloc_lock+0x8>)
 8008f76:	f000 b84b 	b.w	8009010 <__retarget_lock_acquire_recursive>
 8008f7a:	bf00      	nop
 8008f7c:	200009dc 	.word	0x200009dc

08008f80 <__malloc_unlock>:
 8008f80:	4801      	ldr	r0, [pc, #4]	; (8008f88 <__malloc_unlock+0x8>)
 8008f82:	f000 b846 	b.w	8009012 <__retarget_lock_release_recursive>
 8008f86:	bf00      	nop
 8008f88:	200009dc 	.word	0x200009dc

08008f8c <memset>:
 8008f8c:	4402      	add	r2, r0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d100      	bne.n	8008f96 <memset+0xa>
 8008f94:	4770      	bx	lr
 8008f96:	f803 1b01 	strb.w	r1, [r3], #1
 8008f9a:	e7f9      	b.n	8008f90 <memset+0x4>

08008f9c <_sbrk_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	4d06      	ldr	r5, [pc, #24]	; (8008fb8 <_sbrk_r+0x1c>)
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	4608      	mov	r0, r1
 8008fa6:	602b      	str	r3, [r5, #0]
 8008fa8:	f7f8 f9a8 	bl	80012fc <_sbrk>
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d102      	bne.n	8008fb6 <_sbrk_r+0x1a>
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	b103      	cbz	r3, 8008fb6 <_sbrk_r+0x1a>
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	200009d8 	.word	0x200009d8

08008fbc <__errno>:
 8008fbc:	4b01      	ldr	r3, [pc, #4]	; (8008fc4 <__errno+0x8>)
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20000078 	.word	0x20000078

08008fc8 <__libc_init_array>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	4d0d      	ldr	r5, [pc, #52]	; (8009000 <__libc_init_array+0x38>)
 8008fcc:	4c0d      	ldr	r4, [pc, #52]	; (8009004 <__libc_init_array+0x3c>)
 8008fce:	1b64      	subs	r4, r4, r5
 8008fd0:	10a4      	asrs	r4, r4, #2
 8008fd2:	2600      	movs	r6, #0
 8008fd4:	42a6      	cmp	r6, r4
 8008fd6:	d109      	bne.n	8008fec <__libc_init_array+0x24>
 8008fd8:	4d0b      	ldr	r5, [pc, #44]	; (8009008 <__libc_init_array+0x40>)
 8008fda:	4c0c      	ldr	r4, [pc, #48]	; (800900c <__libc_init_array+0x44>)
 8008fdc:	f000 f866 	bl	80090ac <_init>
 8008fe0:	1b64      	subs	r4, r4, r5
 8008fe2:	10a4      	asrs	r4, r4, #2
 8008fe4:	2600      	movs	r6, #0
 8008fe6:	42a6      	cmp	r6, r4
 8008fe8:	d105      	bne.n	8008ff6 <__libc_init_array+0x2e>
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff0:	4798      	blx	r3
 8008ff2:	3601      	adds	r6, #1
 8008ff4:	e7ee      	b.n	8008fd4 <__libc_init_array+0xc>
 8008ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ffa:	4798      	blx	r3
 8008ffc:	3601      	adds	r6, #1
 8008ffe:	e7f2      	b.n	8008fe6 <__libc_init_array+0x1e>
 8009000:	080090e8 	.word	0x080090e8
 8009004:	080090e8 	.word	0x080090e8
 8009008:	080090e8 	.word	0x080090e8
 800900c:	080090ec 	.word	0x080090ec

08009010 <__retarget_lock_acquire_recursive>:
 8009010:	4770      	bx	lr

08009012 <__retarget_lock_release_recursive>:
 8009012:	4770      	bx	lr

08009014 <_free_r>:
 8009014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009016:	2900      	cmp	r1, #0
 8009018:	d044      	beq.n	80090a4 <_free_r+0x90>
 800901a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800901e:	9001      	str	r0, [sp, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	f1a1 0404 	sub.w	r4, r1, #4
 8009026:	bfb8      	it	lt
 8009028:	18e4      	addlt	r4, r4, r3
 800902a:	f7ff ffa3 	bl	8008f74 <__malloc_lock>
 800902e:	4a1e      	ldr	r2, [pc, #120]	; (80090a8 <_free_r+0x94>)
 8009030:	9801      	ldr	r0, [sp, #4]
 8009032:	6813      	ldr	r3, [r2, #0]
 8009034:	b933      	cbnz	r3, 8009044 <_free_r+0x30>
 8009036:	6063      	str	r3, [r4, #4]
 8009038:	6014      	str	r4, [r2, #0]
 800903a:	b003      	add	sp, #12
 800903c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009040:	f7ff bf9e 	b.w	8008f80 <__malloc_unlock>
 8009044:	42a3      	cmp	r3, r4
 8009046:	d908      	bls.n	800905a <_free_r+0x46>
 8009048:	6825      	ldr	r5, [r4, #0]
 800904a:	1961      	adds	r1, r4, r5
 800904c:	428b      	cmp	r3, r1
 800904e:	bf01      	itttt	eq
 8009050:	6819      	ldreq	r1, [r3, #0]
 8009052:	685b      	ldreq	r3, [r3, #4]
 8009054:	1949      	addeq	r1, r1, r5
 8009056:	6021      	streq	r1, [r4, #0]
 8009058:	e7ed      	b.n	8009036 <_free_r+0x22>
 800905a:	461a      	mov	r2, r3
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	b10b      	cbz	r3, 8009064 <_free_r+0x50>
 8009060:	42a3      	cmp	r3, r4
 8009062:	d9fa      	bls.n	800905a <_free_r+0x46>
 8009064:	6811      	ldr	r1, [r2, #0]
 8009066:	1855      	adds	r5, r2, r1
 8009068:	42a5      	cmp	r5, r4
 800906a:	d10b      	bne.n	8009084 <_free_r+0x70>
 800906c:	6824      	ldr	r4, [r4, #0]
 800906e:	4421      	add	r1, r4
 8009070:	1854      	adds	r4, r2, r1
 8009072:	42a3      	cmp	r3, r4
 8009074:	6011      	str	r1, [r2, #0]
 8009076:	d1e0      	bne.n	800903a <_free_r+0x26>
 8009078:	681c      	ldr	r4, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	6053      	str	r3, [r2, #4]
 800907e:	440c      	add	r4, r1
 8009080:	6014      	str	r4, [r2, #0]
 8009082:	e7da      	b.n	800903a <_free_r+0x26>
 8009084:	d902      	bls.n	800908c <_free_r+0x78>
 8009086:	230c      	movs	r3, #12
 8009088:	6003      	str	r3, [r0, #0]
 800908a:	e7d6      	b.n	800903a <_free_r+0x26>
 800908c:	6825      	ldr	r5, [r4, #0]
 800908e:	1961      	adds	r1, r4, r5
 8009090:	428b      	cmp	r3, r1
 8009092:	bf04      	itt	eq
 8009094:	6819      	ldreq	r1, [r3, #0]
 8009096:	685b      	ldreq	r3, [r3, #4]
 8009098:	6063      	str	r3, [r4, #4]
 800909a:	bf04      	itt	eq
 800909c:	1949      	addeq	r1, r1, r5
 800909e:	6021      	streq	r1, [r4, #0]
 80090a0:	6054      	str	r4, [r2, #4]
 80090a2:	e7ca      	b.n	800903a <_free_r+0x26>
 80090a4:	b003      	add	sp, #12
 80090a6:	bd30      	pop	{r4, r5, pc}
 80090a8:	20000898 	.word	0x20000898

080090ac <_init>:
 80090ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ae:	bf00      	nop
 80090b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090b2:	bc08      	pop	{r3}
 80090b4:	469e      	mov	lr, r3
 80090b6:	4770      	bx	lr

080090b8 <_fini>:
 80090b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ba:	bf00      	nop
 80090bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090be:	bc08      	pop	{r3}
 80090c0:	469e      	mov	lr, r3
 80090c2:	4770      	bx	lr
