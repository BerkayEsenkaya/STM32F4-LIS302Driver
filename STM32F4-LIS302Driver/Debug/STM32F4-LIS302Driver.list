
STM32F4-LIS302Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009034  08009034  00019034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009050  08009050  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009050  08009050  00019050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009058  08009058  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009058  08009058  00019058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800905c  0800905c  0001905c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000964  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009e0  200009e0  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001771b  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f32  00000000  00000000  0003780a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001250  00000000  00000000  0003b740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dec  00000000  00000000  0003c990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004fe9  00000000  00000000  0003d77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019da6  00000000  00000000  00042765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc282  00000000  00000000  0005c50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004eb4  00000000  00000000  00128790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0012d644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800901c 	.word	0x0800901c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800901c 	.word	0x0800901c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <LIS3DSH_Read_Reg>:
uint8_t LIS3DSH_Init(SPI_HandleTypeDef *handle){

}


uint8_t LIS3DSH_Read_Reg(uint8_t RegAddr, uint8_t *rxBuff,uint8_t lenght){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	4603      	mov	r3, r0
 80004cc:	6039      	str	r1, [r7, #0]
 80004ce:	71fb      	strb	r3, [r7, #7]
 80004d0:	4613      	mov	r3, r2
 80004d2:	71bb      	strb	r3, [r7, #6]
	uint8_t txBuff[1];

	txBuff[0] = RegAddr | LIS3DSH_SPIMODE_READ;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	733b      	strb	r3, [r7, #12]

	SPI_TransmitReceive(SPI_NO1, txBuff, rxBuff, 1, lenght);
 80004de:	f107 010c 	add.w	r1, r7, #12
 80004e2:	79bb      	ldrb	r3, [r7, #6]
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2301      	movs	r3, #1
 80004e8:	683a      	ldr	r2, [r7, #0]
 80004ea:	2001      	movs	r0, #1
 80004ec:	f000 fcee 	bl	8000ecc <SPI_TransmitReceive>
}
 80004f0:	bf00      	nop
 80004f2:	4618      	mov	r0, r3
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <LIS3DSH_Write_Reg>:

uint8_t LIS3DSH_Write_Reg(uint8_t RegAddr, uint8_t *data,uint8_t lenght){
 80004fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004fe:	b089      	sub	sp, #36	; 0x24
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
 8000508:	4613      	mov	r3, r2
 800050a:	71bb      	strb	r3, [r7, #6]
 800050c:	466b      	mov	r3, sp
 800050e:	461e      	mov	r6, r3
	uint8_t txBuff[lenght+1];
 8000510:	79bb      	ldrb	r3, [r7, #6]
 8000512:	1c59      	adds	r1, r3, #1
 8000514:	1e4b      	subs	r3, r1, #1
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	460a      	mov	r2, r1
 800051a:	2300      	movs	r3, #0
 800051c:	4690      	mov	r8, r2
 800051e:	4699      	mov	r9, r3
 8000520:	f04f 0200 	mov.w	r2, #0
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800052c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000530:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000534:	460a      	mov	r2, r1
 8000536:	2300      	movs	r3, #0
 8000538:	4614      	mov	r4, r2
 800053a:	461d      	mov	r5, r3
 800053c:	f04f 0200 	mov.w	r2, #0
 8000540:	f04f 0300 	mov.w	r3, #0
 8000544:	00eb      	lsls	r3, r5, #3
 8000546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800054a:	00e2      	lsls	r2, r4, #3
 800054c:	460b      	mov	r3, r1
 800054e:	3307      	adds	r3, #7
 8000550:	08db      	lsrs	r3, r3, #3
 8000552:	00db      	lsls	r3, r3, #3
 8000554:	ebad 0d03 	sub.w	sp, sp, r3
 8000558:	ab02      	add	r3, sp, #8
 800055a:	3300      	adds	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
	uint8_t i;

	txBuff[0] = RegAddr & LIS3DSH_SPIMODE_WRITE;
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000564:	b2da      	uxtb	r2, r3
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	701a      	strb	r2, [r3, #0]
	for(i=1;i<lenght+1;i++){
 800056a:	2301      	movs	r3, #1
 800056c:	75fb      	strb	r3, [r7, #23]
 800056e:	e00a      	b.n	8000586 <LIS3DSH_Write_Reg+0x8c>
	  txBuff[i] = data[i-1];
 8000570:	7dfb      	ldrb	r3, [r7, #23]
 8000572:	3b01      	subs	r3, #1
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	441a      	add	r2, r3
 8000578:	7dfb      	ldrb	r3, [r7, #23]
 800057a:	7811      	ldrb	r1, [r2, #0]
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<lenght+1;i++){
 8000580:	7dfb      	ldrb	r3, [r7, #23]
 8000582:	3301      	adds	r3, #1
 8000584:	75fb      	strb	r3, [r7, #23]
 8000586:	79ba      	ldrb	r2, [r7, #6]
 8000588:	7dfb      	ldrb	r3, [r7, #23]
 800058a:	429a      	cmp	r2, r3
 800058c:	d2f0      	bcs.n	8000570 <LIS3DSH_Write_Reg+0x76>
	}

	SPI_TransmitReceive(SPI_NO1, txBuff, NULL, lenght, 0);
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	2200      	movs	r2, #0
 8000592:	9200      	str	r2, [sp, #0]
 8000594:	2200      	movs	r2, #0
 8000596:	68f9      	ldr	r1, [r7, #12]
 8000598:	2001      	movs	r0, #1
 800059a:	f000 fc97 	bl	8000ecc <SPI_TransmitReceive>
 800059e:	46b5      	mov	sp, r6
}
 80005a0:	bf00      	nop
 80005a2:	4618      	mov	r0, r3
 80005a4:	371c      	adds	r7, #28
 80005a6:	46bd      	mov	sp, r7
 80005a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080005ac <LIS3DSH_Reg_Set_Ctrl3>:
    SetReg.sm2_en = sm2_en;
    txBuff[0] = SetReg.CTRL2;
    LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL2, txBuff, 2);
}

uint8_t LIS3DSH_Reg_Set_Ctrl3(LIS3DSH_DR_EN_T dren, LIS3DSH_IEA_T iea, LIS3DSH_IEL_T iel, LIS3DSH_INT2_EN_T int2_en, LIS3DSH_INT1_EN_T int1_en, LIS3DSH_VFILT_T Vfilt, LIS3DSH_STRT_T reset){
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4604      	mov	r4, r0
 80005b4:	4608      	mov	r0, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	4623      	mov	r3, r4
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	4603      	mov	r3, r0
 80005c0:	71bb      	strb	r3, [r7, #6]
 80005c2:	460b      	mov	r3, r1
 80005c4:	717b      	strb	r3, [r7, #5]
 80005c6:	4613      	mov	r3, r2
 80005c8:	713b      	strb	r3, [r7, #4]
	LIS3DSH_REG_CTRL_3_T SetReg;
    uint8_t txBuff[1];
    SetReg.dren = dren;
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	7b3b      	ldrb	r3, [r7, #12]
 80005d4:	f362 1386 	bfi	r3, r2, #6, #1
 80005d8:	733b      	strb	r3, [r7, #12]
    SetReg.iea = iea;
 80005da:	79bb      	ldrb	r3, [r7, #6]
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	7b3b      	ldrb	r3, [r7, #12]
 80005e4:	f362 1345 	bfi	r3, r2, #5, #1
 80005e8:	733b      	strb	r3, [r7, #12]
    SetReg.iel = iel;
 80005ea:	797b      	ldrb	r3, [r7, #5]
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	7b3b      	ldrb	r3, [r7, #12]
 80005f4:	f362 1304 	bfi	r3, r2, #4, #1
 80005f8:	733b      	strb	r3, [r7, #12]
    SetReg.int2en = int2_en;
 80005fa:	793b      	ldrb	r3, [r7, #4]
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	b2da      	uxtb	r2, r3
 8000602:	7b3b      	ldrb	r3, [r7, #12]
 8000604:	f362 03c3 	bfi	r3, r2, #3, #1
 8000608:	733b      	strb	r3, [r7, #12]
    SetReg.int1en = int1_en;
 800060a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	7b3b      	ldrb	r3, [r7, #12]
 8000616:	f362 0382 	bfi	r3, r2, #2, #1
 800061a:	733b      	strb	r3, [r7, #12]
    SetReg.vfilt = Vfilt;
 800061c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	b2da      	uxtb	r2, r3
 8000626:	7b3b      	ldrb	r3, [r7, #12]
 8000628:	f362 0341 	bfi	r3, r2, #1, #1
 800062c:	733b      	strb	r3, [r7, #12]
    SetReg.reset = reset;
 800062e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	b2da      	uxtb	r2, r3
 8000638:	7b3b      	ldrb	r3, [r7, #12]
 800063a:	f362 0300 	bfi	r3, r2, #0, #1
 800063e:	733b      	strb	r3, [r7, #12]
    txBuff[0] = SetReg.CTRL3;
 8000640:	7b3b      	ldrb	r3, [r7, #12]
 8000642:	723b      	strb	r3, [r7, #8]
    LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL3, txBuff, 2);
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2202      	movs	r2, #2
 800064a:	4619      	mov	r1, r3
 800064c:	2023      	movs	r0, #35	; 0x23
 800064e:	f7ff ff54 	bl	80004fa <LIS3DSH_Write_Reg>
}
 8000652:	bf00      	nop
 8000654:	4618      	mov	r0, r3
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	bd90      	pop	{r4, r7, pc}

0800065c <LIS3DSH_Reg_Set_Ctrl4>:

uint8_t LIS3DSH_Reg_Set_Ctrl4(LIS3DSH_ODR_T odrVal, LIS3DSH_BDU_T bduVal, LIS3DSH_XEN_T StateXAxis, LIS3DSH_YEN_T StateYAxis, LIS3DSH_ZEN_T StateZAxis ){
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	4604      	mov	r4, r0
 8000664:	4608      	mov	r0, r1
 8000666:	4611      	mov	r1, r2
 8000668:	461a      	mov	r2, r3
 800066a:	4623      	mov	r3, r4
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	4603      	mov	r3, r0
 8000670:	71bb      	strb	r3, [r7, #6]
 8000672:	460b      	mov	r3, r1
 8000674:	717b      	strb	r3, [r7, #5]
 8000676:	4613      	mov	r3, r2
 8000678:	713b      	strb	r3, [r7, #4]
    LIS3DSH_REG_CTRL_4_T SetReg;
    uint8_t txBuff[1];
    SetReg.odr = odrVal;
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 030f 	and.w	r3, r3, #15
 8000680:	b2da      	uxtb	r2, r3
 8000682:	7b3b      	ldrb	r3, [r7, #12]
 8000684:	f362 1307 	bfi	r3, r2, #4, #4
 8000688:	733b      	strb	r3, [r7, #12]
    SetReg.bdu = bduVal;
 800068a:	79bb      	ldrb	r3, [r7, #6]
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	7b3b      	ldrb	r3, [r7, #12]
 8000694:	f362 03c3 	bfi	r3, r2, #3, #1
 8000698:	733b      	strb	r3, [r7, #12]
    SetReg.xaxis_en = StateXAxis;
 800069a:	797b      	ldrb	r3, [r7, #5]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	7b3b      	ldrb	r3, [r7, #12]
 80006a4:	f362 0300 	bfi	r3, r2, #0, #1
 80006a8:	733b      	strb	r3, [r7, #12]
    SetReg.yaxis_en = StateYAxis;
 80006aa:	793b      	ldrb	r3, [r7, #4]
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	7b3b      	ldrb	r3, [r7, #12]
 80006b4:	f362 0341 	bfi	r3, r2, #1, #1
 80006b8:	733b      	strb	r3, [r7, #12]
    SetReg.zaxis_en = StateZAxis;
 80006ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	7b3b      	ldrb	r3, [r7, #12]
 80006c6:	f362 0382 	bfi	r3, r2, #2, #1
 80006ca:	733b      	strb	r3, [r7, #12]
    txBuff[0] = SetReg.CTRL4;
 80006cc:	7b3b      	ldrb	r3, [r7, #12]
 80006ce:	723b      	strb	r3, [r7, #8]
    LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL4, txBuff, 2);
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2202      	movs	r2, #2
 80006d6:	4619      	mov	r1, r3
 80006d8:	2020      	movs	r0, #32
 80006da:	f7ff ff0e 	bl	80004fa <LIS3DSH_Write_Reg>
}
 80006de:	bf00      	nop
 80006e0:	4618      	mov	r0, r3
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd90      	pop	{r4, r7, pc}

080006e8 <LIS3DSH_Reg_Set_Ctrl5>:

uint8_t LIS3DSH_Reg_Set_Ctrl5(LIS3DSH_BW_T bw,LIS3DSH_FSCALE_T scale, LIS3DSH_ST_T selftest ,LIS3DSH_SIM_T spiMode ){
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4604      	mov	r4, r0
 80006f0:	4608      	mov	r0, r1
 80006f2:	4611      	mov	r1, r2
 80006f4:	461a      	mov	r2, r3
 80006f6:	4623      	mov	r3, r4
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	4603      	mov	r3, r0
 80006fc:	71bb      	strb	r3, [r7, #6]
 80006fe:	460b      	mov	r3, r1
 8000700:	717b      	strb	r3, [r7, #5]
 8000702:	4613      	mov	r3, r2
 8000704:	713b      	strb	r3, [r7, #4]
	LIS3DSH_REG_CTRL_5_T SetReg;
	save.scale = scale;
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <LIS3DSH_Reg_Set_Ctrl5+0x80>)
 8000708:	79bb      	ldrb	r3, [r7, #6]
 800070a:	7013      	strb	r3, [r2, #0]
	uint8_t txBuff[1];
	SetReg.bandwith = bw;
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 0303 	and.w	r3, r3, #3
 8000712:	b2da      	uxtb	r2, r3
 8000714:	7b3b      	ldrb	r3, [r7, #12]
 8000716:	f362 1387 	bfi	r3, r2, #6, #2
 800071a:	733b      	strb	r3, [r7, #12]
	SetReg.scale = scale;
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	b2da      	uxtb	r2, r3
 8000724:	7b3b      	ldrb	r3, [r7, #12]
 8000726:	f362 03c5 	bfi	r3, r2, #3, #3
 800072a:	733b      	strb	r3, [r7, #12]
	SetReg.selftest = selftest;
 800072c:	797b      	ldrb	r3, [r7, #5]
 800072e:	f003 0303 	and.w	r3, r3, #3
 8000732:	b2da      	uxtb	r2, r3
 8000734:	7b3b      	ldrb	r3, [r7, #12]
 8000736:	f362 0342 	bfi	r3, r2, #1, #2
 800073a:	733b      	strb	r3, [r7, #12]
	SetReg.spiMode = spiMode;
 800073c:	793b      	ldrb	r3, [r7, #4]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	b2da      	uxtb	r2, r3
 8000744:	7b3b      	ldrb	r3, [r7, #12]
 8000746:	f362 0300 	bfi	r3, r2, #0, #1
 800074a:	733b      	strb	r3, [r7, #12]
	txBuff[0] = SetReg.CTRL5;
 800074c:	7b3b      	ldrb	r3, [r7, #12]
 800074e:	723b      	strb	r3, [r7, #8]
	LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL5, txBuff, 2);
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2202      	movs	r2, #2
 8000756:	4619      	mov	r1, r3
 8000758:	2024      	movs	r0, #36	; 0x24
 800075a:	f7ff fece 	bl	80004fa <LIS3DSH_Write_Reg>
}
 800075e:	bf00      	nop
 8000760:	4618      	mov	r0, r3
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	bd90      	pop	{r4, r7, pc}
 8000768:	200000b8 	.word	0x200000b8

0800076c <LIS3DSH_Reg_Set_Ctrl6>:

uint8_t LIS3DSH_Reg_Set_Ctrl6(uint8_t boot, LIS3DSH_FIFO_EN_T fifo_en, LIS3DSH_WTM_EN_T wtm_en, LIS3DSH_ADD_INC_T reg_inc_en, LIS3DSH_P1_EMPTY_T fifo_empty_int, LIS3DSH_P1_WTM_T fifo_wtm_int, LIS3DSH_P1_OVERRUN_T fifo_ovr_int, LIS3DSH_P2_BOOT_T bootint){
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	4604      	mov	r4, r0
 8000774:	4608      	mov	r0, r1
 8000776:	4611      	mov	r1, r2
 8000778:	461a      	mov	r2, r3
 800077a:	4623      	mov	r3, r4
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	4603      	mov	r3, r0
 8000780:	71bb      	strb	r3, [r7, #6]
 8000782:	460b      	mov	r3, r1
 8000784:	717b      	strb	r3, [r7, #5]
 8000786:	4613      	mov	r3, r2
 8000788:	713b      	strb	r3, [r7, #4]
	LIS3DSH_REG_CTRL_6_T SetReg;
	uint8_t txBuff[1];
	SetReg.boot = boot;
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	b2da      	uxtb	r2, r3
 8000792:	7b3b      	ldrb	r3, [r7, #12]
 8000794:	f362 13c7 	bfi	r3, r2, #7, #1
 8000798:	733b      	strb	r3, [r7, #12]
	SetReg.fifo_en = fifo_en;
 800079a:	79bb      	ldrb	r3, [r7, #6]
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	7b3b      	ldrb	r3, [r7, #12]
 80007a4:	f362 1386 	bfi	r3, r2, #6, #1
 80007a8:	733b      	strb	r3, [r7, #12]
	SetReg.wtm_en = wtm_en;
 80007aa:	797b      	ldrb	r3, [r7, #5]
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	7b3b      	ldrb	r3, [r7, #12]
 80007b4:	f362 1345 	bfi	r3, r2, #5, #1
 80007b8:	733b      	strb	r3, [r7, #12]
	SetReg.reg_inc_en = reg_inc_en;
 80007ba:	793b      	ldrb	r3, [r7, #4]
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	7b3b      	ldrb	r3, [r7, #12]
 80007c4:	f362 1304 	bfi	r3, r2, #4, #1
 80007c8:	733b      	strb	r3, [r7, #12]
	SetReg.fifo_empty_int = fifo_empty_int;
 80007ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
 80007d6:	f362 03c3 	bfi	r3, r2, #3, #1
 80007da:	733b      	strb	r3, [r7, #12]
	SetReg.fifo_wtm_int = fifo_wtm_int;
 80007dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	7b3b      	ldrb	r3, [r7, #12]
 80007e8:	f362 0382 	bfi	r3, r2, #2, #1
 80007ec:	733b      	strb	r3, [r7, #12]
	SetReg.fifo_ovr_int = fifo_ovr_int;
 80007ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	7b3b      	ldrb	r3, [r7, #12]
 80007fa:	f362 0341 	bfi	r3, r2, #1, #1
 80007fe:	733b      	strb	r3, [r7, #12]
	SetReg.bootint = bootint;
 8000800:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	b2da      	uxtb	r2, r3
 800080a:	7b3b      	ldrb	r3, [r7, #12]
 800080c:	f362 0300 	bfi	r3, r2, #0, #1
 8000810:	733b      	strb	r3, [r7, #12]
	txBuff[0] = SetReg.CTRL6;
 8000812:	7b3b      	ldrb	r3, [r7, #12]
 8000814:	723b      	strb	r3, [r7, #8]
    LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL6, txBuff, 2);
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2202      	movs	r2, #2
 800081c:	4619      	mov	r1, r3
 800081e:	2025      	movs	r0, #37	; 0x25
 8000820:	f7ff fe6b 	bl	80004fa <LIS3DSH_Write_Reg>
}
 8000824:	bf00      	nop
 8000826:	4618      	mov	r0, r3
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bd90      	pop	{r4, r7, pc}
	...

08000830 <LIS3DSH_Read_Accmeter_Data>:

uint8_t LIS3DSH_Read_Accmeter_Data(){
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
	uint8_t temph[1];
	uint8_t templ[1];

	LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_XH, temph,1);
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2201      	movs	r2, #1
 800083a:	4619      	mov	r1, r3
 800083c:	2029      	movs	r0, #41	; 0x29
 800083e:	f7ff fe41 	bl	80004c4 <LIS3DSH_Read_Reg>
	LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_XL, templ,1);
 8000842:	463b      	mov	r3, r7
 8000844:	2201      	movs	r2, #1
 8000846:	4619      	mov	r1, r3
 8000848:	2028      	movs	r0, #40	; 0x28
 800084a:	f7ff fe3b 	bl	80004c4 <LIS3DSH_Read_Reg>
    results.axis[AXIS_X].raw = (templ[0]<<8);
 800084e:	783b      	ldrb	r3, [r7, #0]
 8000850:	b29b      	uxth	r3, r3
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <LIS3DSH_Read_Accmeter_Data+0xac>)
 8000858:	801a      	strh	r2, [r3, #0]
    results.axis[AXIS_X].raw |= temph[0];
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <LIS3DSH_Read_Accmeter_Data+0xac>)
 800085c:	881a      	ldrh	r2, [r3, #0]
 800085e:	793b      	ldrb	r3, [r7, #4]
 8000860:	b29b      	uxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <LIS3DSH_Read_Accmeter_Data+0xac>)
 8000868:	801a      	strh	r2, [r3, #0]

    LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_YH, temph,1);
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2201      	movs	r2, #1
 800086e:	4619      	mov	r1, r3
 8000870:	202b      	movs	r0, #43	; 0x2b
 8000872:	f7ff fe27 	bl	80004c4 <LIS3DSH_Read_Reg>
    LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_YL, templ,1);
 8000876:	463b      	mov	r3, r7
 8000878:	2201      	movs	r2, #1
 800087a:	4619      	mov	r1, r3
 800087c:	202a      	movs	r0, #42	; 0x2a
 800087e:	f7ff fe21 	bl	80004c4 <LIS3DSH_Read_Reg>
    results.axis[AXIS_Y].raw = (templ[0]<<8);
 8000882:	783b      	ldrb	r3, [r7, #0]
 8000884:	b29b      	uxth	r3, r3
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	b29a      	uxth	r2, r3
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <LIS3DSH_Read_Accmeter_Data+0xac>)
 800088c:	811a      	strh	r2, [r3, #8]
    results.axis[AXIS_Y].raw |= temph[0];
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <LIS3DSH_Read_Accmeter_Data+0xac>)
 8000890:	891a      	ldrh	r2, [r3, #8]
 8000892:	793b      	ldrb	r3, [r7, #4]
 8000894:	b29b      	uxth	r3, r3
 8000896:	4313      	orrs	r3, r2
 8000898:	b29a      	uxth	r2, r3
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <LIS3DSH_Read_Accmeter_Data+0xac>)
 800089c:	811a      	strh	r2, [r3, #8]

    LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_ZH, temph,1);
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2201      	movs	r2, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	202d      	movs	r0, #45	; 0x2d
 80008a6:	f7ff fe0d 	bl	80004c4 <LIS3DSH_Read_Reg>
    LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_ZL, templ,1);
 80008aa:	463b      	mov	r3, r7
 80008ac:	2201      	movs	r2, #1
 80008ae:	4619      	mov	r1, r3
 80008b0:	202c      	movs	r0, #44	; 0x2c
 80008b2:	f7ff fe07 	bl	80004c4 <LIS3DSH_Read_Reg>
    results.axis[AXIS_Z].raw = (templ[0]<<8);
 80008b6:	783b      	ldrb	r3, [r7, #0]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	b29a      	uxth	r2, r3
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <LIS3DSH_Read_Accmeter_Data+0xac>)
 80008c0:	821a      	strh	r2, [r3, #16]
    results.axis[AXIS_Z].raw |= temph[0];
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <LIS3DSH_Read_Accmeter_Data+0xac>)
 80008c4:	8a1a      	ldrh	r2, [r3, #16]
 80008c6:	793b      	ldrb	r3, [r7, #4]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4313      	orrs	r3, r2
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	4b03      	ldr	r3, [pc, #12]	; (80008dc <LIS3DSH_Read_Accmeter_Data+0xac>)
 80008d0:	821a      	strh	r2, [r3, #16]
}
 80008d2:	bf00      	nop
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000098 	.word	0x20000098

080008e0 <LIS3DSH_Read_Temperature_Data>:

uint8_t LIS3DSH_Read_Temperature_Data(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
	uint8_t tempdataBuff[2];
	LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_TEMPERATURE, tempdataBuff,1);
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2201      	movs	r2, #1
 80008ea:	4619      	mov	r1, r3
 80008ec:	200c      	movs	r0, #12
 80008ee:	f7ff fde9 	bl	80004c4 <LIS3DSH_Read_Reg>
	results.temperature.raw = tempdataBuff[0]<<8;
 80008f2:	793b      	ldrb	r3, [r7, #4]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <LIS3DSH_Read_Temperature_Data+0x38>)
 80008fc:	831a      	strh	r2, [r3, #24]
	results.temperature.raw |= tempdataBuff[1];
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <LIS3DSH_Read_Temperature_Data+0x38>)
 8000900:	8b1a      	ldrh	r2, [r3, #24]
 8000902:	797b      	ldrb	r3, [r7, #5]
 8000904:	b29b      	uxth	r3, r3
 8000906:	4313      	orrs	r3, r2
 8000908:	b29a      	uxth	r2, r3
 800090a:	4b03      	ldr	r3, [pc, #12]	; (8000918 <LIS3DSH_Read_Temperature_Data+0x38>)
 800090c:	831a      	strh	r2, [r3, #24]
}
 800090e:	bf00      	nop
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000098 	.word	0x20000098

0800091c <LIS3DSH_ConvertData>:

uint8_t LIS3DSH_ConvertData(){
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
	uint8_t convertMltply;
    switch(save.scale){
 8000922:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <LIS3DSH_ConvertData+0x104>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b04      	cmp	r3, #4
 8000928:	d81b      	bhi.n	8000962 <LIS3DSH_ConvertData+0x46>
 800092a:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <LIS3DSH_ConvertData+0x14>)
 800092c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000930:	08000945 	.word	0x08000945
 8000934:	0800094b 	.word	0x0800094b
 8000938:	08000951 	.word	0x08000951
 800093c:	08000957 	.word	0x08000957
 8000940:	0800095d 	.word	0x0800095d
    case SCALE_SELECT_2G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_2G;
 8000944:	2306      	movs	r3, #6
 8000946:	71fb      	strb	r3, [r7, #7]
    break;
 8000948:	e00b      	b.n	8000962 <LIS3DSH_ConvertData+0x46>
    case SCALE_SELECT_4G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_4G;
 800094a:	230c      	movs	r3, #12
 800094c:	71fb      	strb	r3, [r7, #7]
    break;
 800094e:	e008      	b.n	8000962 <LIS3DSH_ConvertData+0x46>
    case SCALE_SELECT_6G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_6G;
 8000950:	2312      	movs	r3, #18
 8000952:	71fb      	strb	r3, [r7, #7]
    break;
 8000954:	e005      	b.n	8000962 <LIS3DSH_ConvertData+0x46>
    case SCALE_SELECT_8G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_8G;
 8000956:	2318      	movs	r3, #24
 8000958:	71fb      	strb	r3, [r7, #7]
    break;
 800095a:	e002      	b.n	8000962 <LIS3DSH_ConvertData+0x46>
    case SCALE_SELECT_16G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_16G;
 800095c:	2349      	movs	r3, #73	; 0x49
 800095e:	71fb      	strb	r3, [r7, #7]
    break;
 8000960:	bf00      	nop
    }
    if(results.axis[AXIS_X].raw >= 32767){
 8000962:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800096a:	4293      	cmp	r3, r2
 800096c:	d905      	bls.n	800097a <LIS3DSH_ConvertData+0x5e>
    	results.axis[AXIS_X].raw = 65535 - results.axis[AXIS_X].raw;
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	43db      	mvns	r3, r3
 8000974:	b29a      	uxth	r2, r3
 8000976:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 8000978:	801a      	strh	r2, [r3, #0]
    }
    if(results.axis[AXIS_Y].raw >= 32767){
 800097a:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 800097c:	891b      	ldrh	r3, [r3, #8]
 800097e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8000982:	4293      	cmp	r3, r2
 8000984:	d905      	bls.n	8000992 <LIS3DSH_ConvertData+0x76>
        	results.axis[AXIS_Y].raw = 65535 - results.axis[AXIS_Y].raw;
 8000986:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 8000988:	891b      	ldrh	r3, [r3, #8]
 800098a:	43db      	mvns	r3, r3
 800098c:	b29a      	uxth	r2, r3
 800098e:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 8000990:	811a      	strh	r2, [r3, #8]
    }
    if(results.axis[AXIS_Z].raw >= 32767){
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 8000994:	8a1b      	ldrh	r3, [r3, #16]
 8000996:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800099a:	4293      	cmp	r3, r2
 800099c:	d905      	bls.n	80009aa <LIS3DSH_ConvertData+0x8e>
        	results.axis[AXIS_Z].raw = 65535 - results.axis[AXIS_Z].raw;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 80009a0:	8a1b      	ldrh	r3, [r3, #16]
 80009a2:	43db      	mvns	r3, r3
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 80009a8:	821a      	strh	r2, [r3, #16]
    }
    results.axis[AXIS_X].mg = results.axis[AXIS_X].raw * convertMltply;
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	fb02 f303 	mul.w	r3, r2, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 80009ba:	605a      	str	r2, [r3, #4]
    results.axis[AXIS_X].mg = results.axis[AXIS_X].mg / _LIS3DSH_CONVERT_DATA_CONST_DIVIDER;
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <LIS3DSH_ConvertData+0x10c>)
 80009c2:	fba2 2303 	umull	r2, r3, r2, r3
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 80009ca:	6053      	str	r3, [r2, #4]

    results.axis[AXIS_Y].mg = results.axis[AXIS_Y].raw * convertMltply;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 80009ce:	891b      	ldrh	r3, [r3, #8]
 80009d0:	461a      	mov	r2, r3
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	fb02 f303 	mul.w	r3, r2, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 80009dc:	60da      	str	r2, [r3, #12]
    results.axis[AXIS_Y].mg = results.axis[AXIS_Y].mg / _LIS3DSH_CONVERT_DATA_CONST_DIVIDER;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <LIS3DSH_ConvertData+0x10c>)
 80009e4:	fba2 2303 	umull	r2, r3, r2, r3
 80009e8:	095b      	lsrs	r3, r3, #5
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 80009ec:	60d3      	str	r3, [r2, #12]

    results.axis[AXIS_Z].mg = results.axis[AXIS_Z].raw * convertMltply;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 80009f0:	8a1b      	ldrh	r3, [r3, #16]
 80009f2:	461a      	mov	r2, r3
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	fb02 f303 	mul.w	r3, r2, r3
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 80009fe:	615a      	str	r2, [r3, #20]
    results.axis[AXIS_Z].mg = results.axis[AXIS_Z].mg / _LIS3DSH_CONVERT_DATA_CONST_DIVIDER;
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <LIS3DSH_ConvertData+0x10c>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	095b      	lsrs	r3, r3, #5
 8000a0c:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <LIS3DSH_ConvertData+0x108>)
 8000a0e:	6153      	str	r3, [r2, #20]
}
 8000a10:	bf00      	nop
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200000b8 	.word	0x200000b8
 8000a24:	20000098 	.word	0x20000098
 8000a28:	51eb851f 	.word	0x51eb851f

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08e      	sub	sp, #56	; 0x38
 8000a30:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a32:	f000 fc8d 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a36:	f000 f849 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3a:	f000 f945 	bl	8000cc8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a3e:	f000 f8af 	bl	8000ba0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000a42:	f000 f8db 	bl	8000bfc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a46:	f000 f909 	bl	8000c5c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000a4a:	f007 fe93 	bl	8008774 <MX_USB_HOST_Init>
  uint8_t read4[1];
  uint8_t read5[1];
  uint8_t dataY[2];
  uint8_t dataZ[2];
  uint8_t dataTemp[1];
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2108      	movs	r1, #8
 8000a52:	481d      	ldr	r0, [pc, #116]	; (8000ac8 <main+0x9c>)
 8000a54:	f000 ffe2 	bl	8001a1c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5c:	f000 fcea 	bl	8001434 <HAL_Delay>

  LIS3DSH_Reg_Set_Ctrl3(INT1_DATA_READY_SIGNAL_ENABLE, INT_SIGNAL_ACTIVE_HIGH, INT_SIGNAL_PULSE, INT2_DISABLE, INT1_ENABLE, VECTOR_FILT_DISABLE, SOFT_RESET_DISABLE);
 8000a60:	2300      	movs	r3, #0
 8000a62:	9302      	str	r3, [sp, #8]
 8000a64:	2300      	movs	r3, #0
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2101      	movs	r1, #1
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fd9a 	bl	80005ac <LIS3DSH_Reg_Set_Ctrl3>

  LIS3DSH_Reg_Set_Ctrl4(DATARATE_HZ_3,DATA_CONT_UPDATE , AXIS_X_ENABLE, AXIS_Y_ENABLE, AXIS_Z_ENABLE);
 8000a78:	2301      	movs	r3, #1
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2100      	movs	r1, #0
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff fdea 	bl	800065c <LIS3DSH_Reg_Set_Ctrl4>

  LIS3DSH_Reg_Set_Ctrl5(ANTIALIASING_FILTER_BANDWIDTH_HZ_800, SCALE_SELECT_8G,NORMAL_MODE , SPI_INTERFACE_4WIRE);
 8000a88:	2300      	movs	r3, #0
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff fe2a 	bl	80006e8 <LIS3DSH_Reg_Set_Ctrl5>

  LIS3DSH_Reg_Set_Ctrl6(BOOT_DISABLE, FIFO_DISABLE, FIFO_WATERMARK_LEVEL_DISABLE, REG_ADDR_AUTO_INCREMENT_DISABLE, FIFO_EMPTY_INDICATION_DISABLE, FIFO_WATERMARK_INT_DISABLE, FIFO_OVERRUN_INT_DISABLE, BOOT_INT_DISABLE);
 8000a94:	2300      	movs	r3, #0
 8000a96:	9303      	str	r3, [sp, #12]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	9302      	str	r3, [sp, #8]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fe5e 	bl	800076c <LIS3DSH_Reg_Set_Ctrl6>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ab0:	f007 fe86 	bl	80087c0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
   LIS3DSH_Read_Accmeter_Data();
 8000ab4:	f7ff febc 	bl	8000830 <LIS3DSH_Read_Accmeter_Data>
   LIS3DSH_Read_Temperature_Data();
 8000ab8:	f7ff ff12 	bl	80008e0 <LIS3DSH_Read_Temperature_Data>

   LIS3DSH_ConvertData();
 8000abc:	f7ff ff2e 	bl	800091c <LIS3DSH_ConvertData>
   HAL_Delay(10);
 8000ac0:	200a      	movs	r0, #10
 8000ac2:	f000 fcb7 	bl	8001434 <HAL_Delay>
    MX_USB_HOST_Process();
 8000ac6:	e7f3      	b.n	8000ab0 <main+0x84>
 8000ac8:	40021000 	.word	0x40021000

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b094      	sub	sp, #80	; 0x50
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	2230      	movs	r2, #48	; 0x30
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f008 fa0e 	bl	8008efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <SystemClock_Config+0xcc>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a27      	ldr	r2, [pc, #156]	; (8000b98 <SystemClock_Config+0xcc>)
 8000afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <SystemClock_Config+0xcc>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <SystemClock_Config+0xd0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a21      	ldr	r2, [pc, #132]	; (8000b9c <SystemClock_Config+0xd0>)
 8000b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <SystemClock_Config+0xd0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b32:	2302      	movs	r3, #2
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b40:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b46:	2302      	movs	r3, #2
 8000b48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4e:	f107 0320 	add.w	r3, r7, #32
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 f96a 	bl	8003e2c <HAL_RCC_OscConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b5e:	f000 f9af 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b62:	230f      	movs	r3, #15
 8000b64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b66:	2302      	movs	r3, #2
 8000b68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2105      	movs	r1, #5
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 fbcb 	bl	800431c <HAL_RCC_ClockConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b8c:	f000 f998 	bl	8000ec0 <Error_Handler>
  }
}
 8000b90:	bf00      	nop
 8000b92:	3750      	adds	r7, #80	; 0x50
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40007000 	.word	0x40007000

08000ba0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <MX_I2C1_Init+0x54>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_I2C1_Init+0x58>)
 8000bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bde:	f002 fb41 	bl	8003264 <HAL_I2C_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000be8:	f000 f96a 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200000bc 	.word	0x200000bc
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	000186a0 	.word	0x000186a0

08000bfc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <MX_I2S3_Init+0x58>)
 8000c04:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c0c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c20:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c24:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <MX_I2S3_Init+0x5c>)
 8000c26:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c3c:	f002 fc56 	bl	80034ec <HAL_I2S_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c46:	f000 f93b 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000110 	.word	0x20000110
 8000c54:	40003c00 	.word	0x40003c00
 8000c58:	00017700 	.word	0x00017700

08000c5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c62:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <MX_SPI1_Init+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c90:	2208      	movs	r2, #8
 8000c92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000ca8:	220a      	movs	r2, #10
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000cae:	f003 fe81 	bl	80049b4 <HAL_SPI_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cb8:	f000 f902 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
//  SPI_Init(&SPI_1, 1, CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin);
  /* USER CODE END SPI1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000158 	.word	0x20000158
 8000cc4:	40013000 	.word	0x40013000

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	; 0x30
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	4b72      	ldr	r3, [pc, #456]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a71      	ldr	r2, [pc, #452]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	4b6b      	ldr	r3, [pc, #428]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a6a      	ldr	r2, [pc, #424]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b68      	ldr	r3, [pc, #416]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b64      	ldr	r3, [pc, #400]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a63      	ldr	r2, [pc, #396]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b61      	ldr	r3, [pc, #388]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b5d      	ldr	r3, [pc, #372]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a5c      	ldr	r2, [pc, #368]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b5a      	ldr	r3, [pc, #360]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4b56      	ldr	r3, [pc, #344]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a55      	ldr	r2, [pc, #340]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b53      	ldr	r3, [pc, #332]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b4f      	ldr	r3, [pc, #316]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a4e      	ldr	r2, [pc, #312]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b4c      	ldr	r3, [pc, #304]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2108      	movs	r1, #8
 8000d8a:	4849      	ldr	r0, [pc, #292]	; (8000eb0 <MX_GPIO_Init+0x1e8>)
 8000d8c:	f000 fe46 	bl	8001a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2101      	movs	r1, #1
 8000d94:	4847      	ldr	r0, [pc, #284]	; (8000eb4 <MX_GPIO_Init+0x1ec>)
 8000d96:	f000 fe41 	bl	8001a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000da0:	4845      	ldr	r0, [pc, #276]	; (8000eb8 <MX_GPIO_Init+0x1f0>)
 8000da2:	f000 fe3b 	bl	8001a1c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000da6:	2308      	movs	r3, #8
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	483c      	ldr	r0, [pc, #240]	; (8000eb0 <MX_GPIO_Init+0x1e8>)
 8000dbe:	f000 fc91 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4836      	ldr	r0, [pc, #216]	; (8000eb4 <MX_GPIO_Init+0x1ec>)
 8000dda:	f000 fc83 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000dde:	2308      	movs	r3, #8
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dee:	2305      	movs	r3, #5
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	482e      	ldr	r0, [pc, #184]	; (8000eb4 <MX_GPIO_Init+0x1ec>)
 8000dfa:	f000 fc73 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	482a      	ldr	r0, [pc, #168]	; (8000ebc <MX_GPIO_Init+0x1f4>)
 8000e12:	f000 fc67 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e28:	2305      	movs	r3, #5
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4822      	ldr	r0, [pc, #136]	; (8000ebc <MX_GPIO_Init+0x1f4>)
 8000e34:	f000 fc56 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e38:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e3c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4819      	ldr	r0, [pc, #100]	; (8000eb8 <MX_GPIO_Init+0x1f0>)
 8000e52:	f000 fc47 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e56:	2320      	movs	r3, #32
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <MX_GPIO_Init+0x1f0>)
 8000e6a:	f000 fc3b 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <MX_GPIO_Init+0x1e8>)
 8000e84:	f000 fc2e 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e8c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_GPIO_Init+0x1e8>)
 8000e9e:	f000 fc21 	bl	80016e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3730      	adds	r7, #48	; 0x30
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40020800 	.word	0x40020800
 8000eb8:	40020c00 	.word	0x40020c00
 8000ebc:	40020400 	.word	0x40020400

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <SPI_TransmitReceive>:

extern SPI_HandleTypeDef hspi1;
extern SPI_Handle_T SPI_1;


uint8_t SPI_TransmitReceive(uint8_t spiNo,uint8_t *pTxdata, uint8_t *pRxdata, uint8_t Txlenght, uint8_t Rxlenght ){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4603      	mov	r3, r0
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	4613      	mov	r3, r2
 8000ede:	73bb      	strb	r3, [r7, #14]
	if(spiNo == SPI_NO1){
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d118      	bne.n	8000f18 <SPI_TransmitReceive+0x4c>
		SPI_Com_Active(spiNo);
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f81d 	bl	8000f28 <SPI_Com_Active>
		HAL_SPI_Transmit_IT(&hspi1, pTxdata, Txlenght);
 8000eee:	7bbb      	ldrb	r3, [r7, #14]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	480b      	ldr	r0, [pc, #44]	; (8000f24 <SPI_TransmitReceive+0x58>)
 8000ef8:	f003 fde6 	bl	8004ac8 <HAL_SPI_Transmit_IT>

		if(Rxlenght != 0){
 8000efc:	7e3b      	ldrb	r3, [r7, #24]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <SPI_TransmitReceive+0x44>
		   HAL_SPI_Receive_IT(&hspi1, pRxdata, Rxlenght);
 8000f02:	7e3b      	ldrb	r3, [r7, #24]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <SPI_TransmitReceive+0x58>)
 8000f0c:	f003 fe66 	bl	8004bdc <HAL_SPI_Receive_IT>
		}

		SPI_Com_Deactive(spiNo);
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f81a 	bl	8000f4c <SPI_Com_Deactive>
	}

}
 8000f18:	bf00      	nop
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000158 	.word	0x20000158

08000f28 <SPI_Com_Active>:

uint8_t SPI_Com_Active(uint8_t handle){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2108      	movs	r1, #8
 8000f36:	4804      	ldr	r0, [pc, #16]	; (8000f48 <SPI_Com_Active+0x20>)
 8000f38:	f000 fd70 	bl	8001a1c <HAL_GPIO_WritePin>
}
 8000f3c:	bf00      	nop
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <SPI_Com_Deactive>:

uint8_t SPI_Com_Deactive(uint8_t handle){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2108      	movs	r1, #8
 8000f5a:	4804      	ldr	r0, [pc, #16]	; (8000f6c <SPI_Com_Deactive+0x20>)
 8000f5c:	f000 fd5e 	bl	8001a1c <HAL_GPIO_WritePin>
}
 8000f60:	bf00      	nop
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fae:	2007      	movs	r0, #7
 8000fb0:	f000 fb34 	bl	800161c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a19      	ldr	r2, [pc, #100]	; (8001044 <HAL_I2C_MspInit+0x84>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d12c      	bne.n	800103c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_I2C_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a17      	ldr	r2, [pc, #92]	; (8001048 <HAL_I2C_MspInit+0x88>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_I2C_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ffe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001004:	2312      	movs	r3, #18
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001010:	2304      	movs	r3, #4
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	480c      	ldr	r0, [pc, #48]	; (800104c <HAL_I2C_MspInit+0x8c>)
 800101c:	f000 fb62 	bl	80016e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_I2C_MspInit+0x88>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_I2C_MspInit+0x88>)
 800102a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800102e:	6413      	str	r3, [r2, #64]	; 0x40
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_I2C_MspInit+0x88>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	; 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40005400 	.word	0x40005400
 8001048:	40023800 	.word	0x40023800
 800104c:	40020400 	.word	0x40020400

08001050 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	; 0x38
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a31      	ldr	r2, [pc, #196]	; (8001140 <HAL_I2S_MspInit+0xf0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d15a      	bne.n	8001136 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001080:	2301      	movs	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001084:	23c0      	movs	r3, #192	; 0xc0
 8001086:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001088:	2302      	movs	r3, #2
 800108a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4618      	mov	r0, r3
 8001092:	f003 fb4f 	bl	8004734 <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800109c:	f7ff ff10 	bl	8000ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_I2S_MspInit+0xf4>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	4a26      	ldr	r2, [pc, #152]	; (8001144 <HAL_I2S_MspInit+0xf4>)
 80010aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ae:	6413      	str	r3, [r2, #64]	; 0x40
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <HAL_I2S_MspInit+0xf4>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4b20      	ldr	r3, [pc, #128]	; (8001144 <HAL_I2S_MspInit+0xf4>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <HAL_I2S_MspInit+0xf4>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6313      	str	r3, [r2, #48]	; 0x30
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_I2S_MspInit+0xf4>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_I2S_MspInit+0xf4>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	4a18      	ldr	r2, [pc, #96]	; (8001144 <HAL_I2S_MspInit+0xf4>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6313      	str	r3, [r2, #48]	; 0x30
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <HAL_I2S_MspInit+0xf4>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010f4:	2310      	movs	r3, #16
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001104:	2306      	movs	r3, #6
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	480e      	ldr	r0, [pc, #56]	; (8001148 <HAL_I2S_MspInit+0xf8>)
 8001110:	f000 fae8 	bl	80016e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001114:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001126:	2306      	movs	r3, #6
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	4806      	ldr	r0, [pc, #24]	; (800114c <HAL_I2S_MspInit+0xfc>)
 8001132:	f000 fad7 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001136:	bf00      	nop
 8001138:	3738      	adds	r7, #56	; 0x38
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40003c00 	.word	0x40003c00
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020800 	.word	0x40020800

08001150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_SPI_MspInit+0x94>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d133      	bne.n	80011da <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_SPI_MspInit+0x98>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <HAL_SPI_MspInit+0x98>)
 800117c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_SPI_MspInit+0x98>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_SPI_MspInit+0x98>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <HAL_SPI_MspInit+0x98>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_SPI_MspInit+0x98>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80011aa:	23e0      	movs	r3, #224	; 0xe0
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ba:	2305      	movs	r3, #5
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <HAL_SPI_MspInit+0x9c>)
 80011c6:	f000 fa8d 	bl	80016e4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2023      	movs	r0, #35	; 0x23
 80011d0:	f000 fa2f 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011d4:	2023      	movs	r0, #35	; 0x23
 80011d6:	f000 fa48 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40013000 	.word	0x40013000
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123c:	f000 f8da 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <SPI1_IRQHandler+0x10>)
 800124a:	f003 fdf9 	bl	8004e40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000158 	.word	0x20000158

08001258 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <OTG_FS_IRQHandler+0x10>)
 800125e:	f000 fe61 	bl	8001f24 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000594 	.word	0x20000594

0800126c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <_sbrk+0x5c>)
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <_sbrk+0x60>)
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <_sbrk+0x64>)
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <_sbrk+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	429a      	cmp	r2, r3
 800129a:	d207      	bcs.n	80012ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800129c:	f007 fe46 	bl	8008f2c <__errno>
 80012a0:	4603      	mov	r3, r0
 80012a2:	220c      	movs	r2, #12
 80012a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	e009      	b.n	80012c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <_sbrk+0x64>)
 80012bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20020000 	.word	0x20020000
 80012cc:	00000400 	.word	0x00000400
 80012d0:	200001b0 	.word	0x200001b0
 80012d4:	200009e0 	.word	0x200009e0

080012d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <SystemInit+0x20>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <SystemInit+0x20>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <Reset_Handler>:
 80012fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001334 <LoopFillZerobss+0x12>
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <LoopFillZerobss+0x16>)
 8001302:	490e      	ldr	r1, [pc, #56]	; (800133c <LoopFillZerobss+0x1a>)
 8001304:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <LoopFillZerobss+0x1e>)
 8001306:	2300      	movs	r3, #0
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:
 800130a:	58d4      	ldr	r4, [r2, r3]
 800130c:	50c4      	str	r4, [r0, r3]
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:
 8001310:	18c4      	adds	r4, r0, r3
 8001312:	428c      	cmp	r4, r1
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <LoopFillZerobss+0x22>)
 8001318:	4c0b      	ldr	r4, [pc, #44]	; (8001348 <LoopFillZerobss+0x26>)
 800131a:	2300      	movs	r3, #0
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:
 8001322:	42a2      	cmp	r2, r4
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>
 8001326:	f7ff ffd7 	bl	80012d8 <SystemInit>
 800132a:	f007 fe05 	bl	8008f38 <__libc_init_array>
 800132e:	f7ff fb7d 	bl	8000a2c <main>
 8001332:	4770      	bx	lr
 8001334:	20020000 	.word	0x20020000
 8001338:	20000000 	.word	0x20000000
 800133c:	2000007c 	.word	0x2000007c
 8001340:	08009060 	.word	0x08009060
 8001344:	2000007c 	.word	0x2000007c
 8001348:	200009e0 	.word	0x200009e0

0800134c <ADC_IRQHandler>:
 800134c:	e7fe      	b.n	800134c <ADC_IRQHandler>
	...

08001350 <HAL_Init>:
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <HAL_Init+0x40>)
 800135a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <HAL_Init+0x40>)
 8001366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_Init+0x40>)
 8001372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	2003      	movs	r0, #3
 800137a:	f000 f94f 	bl	800161c <HAL_NVIC_SetPriorityGrouping>
 800137e:	2000      	movs	r0, #0
 8001380:	f000 f808 	bl	8001394 <HAL_InitTick>
 8001384:	f7ff fdf4 	bl	8000f70 <HAL_MspInit>
 8001388:	2300      	movs	r3, #0
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023c00 	.word	0x40023c00

08001394 <HAL_InitTick>:
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x54>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x58>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f967 	bl	8001686 <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x2e>
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x4c>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x4a>
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 f92f 	bl	8001632 <HAL_NVIC_SetPriority>
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_InitTick+0x5c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x4c>
 80013de:	2301      	movs	r3, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000004 	.word	0x20000004

080013f4 <HAL_IncTick>:
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008
 8001418:	200001b4 	.word	0x200001b4

0800141c <HAL_GetTick>:
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	200001b4 	.word	0x200001b4

08001434 <HAL_Delay>:
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	f7ff ffee 	bl	800141c <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_Delay+0x44>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	bf00      	nop
 800145c:	f7ff ffde 	bl	800141c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000008 	.word	0x20000008

0800147c <__NVIC_SetPriorityGrouping>:
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_EnableIRQ>:
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db0b      	blt.n	800150a <__NVIC_EnableIRQ+0x2a>
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <__NVIC_EnableIRQ+0x38>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2001      	movs	r0, #1
 8001502:	fa00 f202 	lsl.w	r2, r0, r2
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100

0800151c <__NVIC_SetPriority>:
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	db0a      	blt.n	8001546 <__NVIC_SetPriority+0x2a>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	490c      	ldr	r1, [pc, #48]	; (8001568 <__NVIC_SetPriority+0x4c>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	440b      	add	r3, r1
 8001540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001544:	e00a      	b.n	800155c <__NVIC_SetPriority+0x40>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4908      	ldr	r1, [pc, #32]	; (800156c <__NVIC_SetPriority+0x50>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	3b04      	subs	r3, #4
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	440b      	add	r3, r1
 800155a:	761a      	strb	r2, [r3, #24]
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <NVIC_EncodePriority>:
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f1c3 0307 	rsb	r3, r3, #7
 800158a:	2b04      	cmp	r3, #4
 800158c:	bf28      	it	cs
 800158e:	2304      	movcs	r3, #4
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3304      	adds	r3, #4
 8001596:	2b06      	cmp	r3, #6
 8001598:	d902      	bls.n	80015a0 <NVIC_EncodePriority+0x30>
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3b03      	subs	r3, #3
 800159e:	e000      	b.n	80015a2 <NVIC_EncodePriority+0x32>
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	401a      	ands	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	409a      	lsls	r2, r3
 80015b8:	f04f 31ff 	mov.w	r1, #4294967295
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa01 f303 	lsl.w	r3, r1, r3
 80015c2:	43d9      	mvns	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	400b      	ands	r3, r1
 80015c8:	4313      	orrs	r3, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	3724      	adds	r7, #36	; 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <SysTick_Config>:
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e8:	d301      	bcc.n	80015ee <SysTick_Config+0x16>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00f      	b.n	800160e <SysTick_Config+0x36>
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <SysTick_Config+0x40>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	6053      	str	r3, [r2, #4]
 80015f6:	210f      	movs	r1, #15
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f7ff ff8e 	bl	800151c <__NVIC_SetPriority>
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <SysTick_Config+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <SysTick_Config+0x40>)
 8001608:	2207      	movs	r2, #7
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	2300      	movs	r3, #0
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_NVIC_SetPriorityGrouping>:
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff29 	bl	800147c <__NVIC_SetPriorityGrouping>
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_SetPriority>:
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	f7ff ff3e 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff8e 	bl	8001570 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5d 	bl	800151c <__NVIC_SetPriority>
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_EnableIRQ>:
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff31 	bl	80014e0 <__NVIC_EnableIRQ>
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffa2 	bl	80015d8 <SysTick_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_DMA_Abort_IT>:
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d004      	beq.n	80016bc <HAL_DMA_Abort_IT+0x1e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	655a      	str	r2, [r3, #84]	; 0x54
 80016b8:	2301      	movs	r3, #1
 80016ba:	e00c      	b.n	80016d6 <HAL_DMA_Abort_IT+0x38>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2205      	movs	r2, #5
 80016c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	2300      	movs	r3, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <HAL_GPIO_Init>:
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e16b      	b.n	80019d8 <HAL_GPIO_Init+0x2f4>
 8001700:	2201      	movs	r2, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 815a 	bne.w	80019d2 <HAL_GPIO_Init+0x2ee>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d005      	beq.n	8001736 <HAL_GPIO_Init+0x52>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d130      	bne.n	8001798 <HAL_GPIO_Init+0xb4>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	2203      	movs	r2, #3
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 0201 	and.w	r2, r3, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d017      	beq.n	80017d4 <HAL_GPIO_Init+0xf0>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d123      	bne.n	8001828 <HAL_GPIO_Init+0x144>
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	08da      	lsrs	r2, r3, #3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3208      	adds	r2, #8
 80017e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	69b9      	ldr	r1, [r7, #24]
 8001824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0203 	and.w	r2, r3, #3
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80b4 	beq.w	80019d2 <HAL_GPIO_Init+0x2ee>
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b60      	ldr	r3, [pc, #384]	; (80019f0 <HAL_GPIO_Init+0x30c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a5f      	ldr	r2, [pc, #380]	; (80019f0 <HAL_GPIO_Init+0x30c>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b5d      	ldr	r3, [pc, #372]	; (80019f0 <HAL_GPIO_Init+0x30c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4a5b      	ldr	r2, [pc, #364]	; (80019f4 <HAL_GPIO_Init+0x310>)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a52      	ldr	r2, [pc, #328]	; (80019f8 <HAL_GPIO_Init+0x314>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d02b      	beq.n	800190a <HAL_GPIO_Init+0x226>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a51      	ldr	r2, [pc, #324]	; (80019fc <HAL_GPIO_Init+0x318>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d025      	beq.n	8001906 <HAL_GPIO_Init+0x222>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a50      	ldr	r2, [pc, #320]	; (8001a00 <HAL_GPIO_Init+0x31c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01f      	beq.n	8001902 <HAL_GPIO_Init+0x21e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4f      	ldr	r2, [pc, #316]	; (8001a04 <HAL_GPIO_Init+0x320>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d019      	beq.n	80018fe <HAL_GPIO_Init+0x21a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4e      	ldr	r2, [pc, #312]	; (8001a08 <HAL_GPIO_Init+0x324>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0x216>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4d      	ldr	r2, [pc, #308]	; (8001a0c <HAL_GPIO_Init+0x328>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00d      	beq.n	80018f6 <HAL_GPIO_Init+0x212>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4c      	ldr	r2, [pc, #304]	; (8001a10 <HAL_GPIO_Init+0x32c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x20e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4b      	ldr	r2, [pc, #300]	; (8001a14 <HAL_GPIO_Init+0x330>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_GPIO_Init+0x20a>
 80018ea:	2307      	movs	r3, #7
 80018ec:	e00e      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018ee:	2308      	movs	r3, #8
 80018f0:	e00c      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018f2:	2306      	movs	r3, #6
 80018f4:	e00a      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018f6:	2305      	movs	r3, #5
 80018f8:	e008      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018fa:	2304      	movs	r3, #4
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018fe:	2303      	movs	r3, #3
 8001900:	e004      	b.n	800190c <HAL_GPIO_Init+0x228>
 8001902:	2302      	movs	r3, #2
 8001904:	e002      	b.n	800190c <HAL_GPIO_Init+0x228>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x228>
 800190a:	2300      	movs	r3, #0
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	f002 0203 	and.w	r2, r2, #3
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	4093      	lsls	r3, r2
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	4935      	ldr	r1, [pc, #212]	; (80019f4 <HAL_GPIO_Init+0x310>)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <HAL_GPIO_Init+0x334>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x26a>
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	4a32      	ldr	r2, [pc, #200]	; (8001a18 <HAL_GPIO_Init+0x334>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	6093      	str	r3, [r2, #8]
 8001954:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_GPIO_Init+0x334>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x294>
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	4a27      	ldr	r2, [pc, #156]	; (8001a18 <HAL_GPIO_Init+0x334>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	60d3      	str	r3, [r2, #12]
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_GPIO_Init+0x334>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x2be>
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <HAL_GPIO_Init+0x334>)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	6053      	str	r3, [r2, #4]
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_GPIO_Init+0x334>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x2e8>
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
 80019cc:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <HAL_GPIO_Init+0x334>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3301      	adds	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	2b0f      	cmp	r3, #15
 80019dc:	f67f ae90 	bls.w	8001700 <HAL_GPIO_Init+0x1c>
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3724      	adds	r7, #36	; 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40013800 	.word	0x40013800
 80019f8:	40020000 	.word	0x40020000
 80019fc:	40020400 	.word	0x40020400
 8001a00:	40020800 	.word	0x40020800
 8001a04:	40020c00 	.word	0x40020c00
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40021400 	.word	0x40021400
 8001a10:	40021800 	.word	0x40021800
 8001a14:	40021c00 	.word	0x40021c00
 8001a18:	40013c00 	.word	0x40013c00

08001a1c <HAL_GPIO_WritePin>:
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	707b      	strb	r3, [r7, #1]
 8001a2c:	787b      	ldrb	r3, [r7, #1]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_WritePin+0x1e>
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	619a      	str	r2, [r3, #24]
 8001a38:	e003      	b.n	8001a42 <HAL_GPIO_WritePin+0x26>
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	041a      	lsls	r2, r3, #16
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	619a      	str	r2, [r3, #24]
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_HCD_Init>:
 8001a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a50:	b08f      	sub	sp, #60	; 0x3c
 8001a52:	af0a      	add	r7, sp, #40	; 0x28
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_HCD_Init+0x12>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e054      	b.n	8001b0a <HAL_HCD_Init+0xbc>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_HCD_Init+0x32>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f006 fed8 	bl	8008830 <HAL_HCD_MspInit>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2203      	movs	r2, #3
 8001a84:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <HAL_HCD_Init+0x4c>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 ff04 	bl	80058ac <USB_DisableGlobalInt>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	687e      	ldr	r6, [r7, #4]
 8001aac:	466d      	mov	r5, sp
 8001aae:	f106 0410 	add.w	r4, r6, #16
 8001ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001abe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ac2:	1d33      	adds	r3, r6, #4
 8001ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac6:	6838      	ldr	r0, [r7, #0]
 8001ac8:	f003 fe7e 	bl	80057c8 <USB_CoreInit>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 fefb 	bl	80058ce <USB_SetCurrentMode>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	687e      	ldr	r6, [r7, #4]
 8001ae0:	466d      	mov	r5, sp
 8001ae2:	f106 0410 	add.w	r4, r6, #16
 8001ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001af2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001af6:	1d33      	adds	r3, r6, #4
 8001af8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001afa:	6838      	ldr	r0, [r7, #0]
 8001afc:	f004 f884 	bl	8005c08 <USB_HostInit>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 8001b08:	2300      	movs	r3, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b12 <HAL_HCD_HC_Init>:
 8001b12:	b590      	push	{r4, r7, lr}
 8001b14:	b089      	sub	sp, #36	; 0x24
 8001b16:	af04      	add	r7, sp, #16
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	4608      	mov	r0, r1
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4603      	mov	r3, r0
 8001b22:	70fb      	strb	r3, [r7, #3]
 8001b24:	460b      	mov	r3, r1
 8001b26:	70bb      	strb	r3, [r7, #2]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	707b      	strb	r3, [r7, #1]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_HCD_HC_Init+0x28>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e076      	b.n	8001c28 <HAL_HCD_HC_Init+0x116>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	212c      	movs	r1, #44	; 0x2c
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	333d      	adds	r3, #61	; 0x3d
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	212c      	movs	r1, #44	; 0x2c
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	3338      	adds	r3, #56	; 0x38
 8001b62:	787a      	ldrb	r2, [r7, #1]
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	3340      	adds	r3, #64	; 0x40
 8001b74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b76:	801a      	strh	r2, [r3, #0]
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	3339      	adds	r3, #57	; 0x39
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	212c      	movs	r1, #44	; 0x2c
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	333f      	adds	r3, #63	; 0x3f
 8001b98:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	78ba      	ldrb	r2, [r7, #2]
 8001ba2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ba6:	b2d0      	uxtb	r0, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	212c      	movs	r1, #44	; 0x2c
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	333a      	adds	r3, #58	; 0x3a
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da09      	bge.n	8001bd4 <HAL_HCD_HC_Init+0xc2>
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	333b      	adds	r3, #59	; 0x3b
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	e008      	b.n	8001be6 <HAL_HCD_HC_Init+0xd4>
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	333b      	adds	r3, #59	; 0x3b
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	333c      	adds	r3, #60	; 0x3c
 8001bf4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bf8:	701a      	strb	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	787c      	ldrb	r4, [r7, #1]
 8001c00:	78ba      	ldrb	r2, [r7, #2]
 8001c02:	78f9      	ldrb	r1, [r7, #3]
 8001c04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	4623      	mov	r3, r4
 8001c16:	f004 f97d 	bl	8005f14 <USB_HC_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd90      	pop	{r4, r7, pc}

08001c30 <HAL_HCD_HC_Halt>:
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_HCD_HC_Halt+0x1e>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e00f      	b.n	8001c6e <HAL_HCD_HC_Halt+0x3e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f004 fbcd 	bl	80063fe <USB_HC_Halt>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_HCD_HC_SubmitRequest>:
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	4608      	mov	r0, r1
 8001c82:	4611      	mov	r1, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	70fb      	strb	r3, [r7, #3]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	70bb      	strb	r3, [r7, #2]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	707b      	strb	r3, [r7, #1]
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	212c      	movs	r1, #44	; 0x2c
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	333b      	adds	r3, #59	; 0x3b
 8001ca0:	78ba      	ldrb	r2, [r7, #2]
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	212c      	movs	r1, #44	; 0x2c
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	333f      	adds	r3, #63	; 0x3f
 8001cb2:	787a      	ldrb	r2, [r7, #1]
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	7c3b      	ldrb	r3, [r7, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d112      	bne.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x6a>
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3342      	adds	r3, #66	; 0x42
 8001cca:	2203      	movs	r2, #3
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	212c      	movs	r1, #44	; 0x2c
 8001cd4:	fb01 f303 	mul.w	r3, r1, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	333d      	adds	r3, #61	; 0x3d
 8001cdc:	7f3a      	ldrb	r2, [r7, #28]
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	e008      	b.n	8001cf4 <HAL_HCD_HC_SubmitRequest+0x7c>
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	212c      	movs	r1, #44	; 0x2c
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	3342      	adds	r3, #66	; 0x42
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	787b      	ldrb	r3, [r7, #1]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	f200 80c6 	bhi.w	8001e88 <HAL_HCD_HC_SubmitRequest+0x210>
 8001cfc:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d02:	bf00      	nop
 8001d04:	08001d15 	.word	0x08001d15
 8001d08:	08001e75 	.word	0x08001e75
 8001d0c:	08001d79 	.word	0x08001d79
 8001d10:	08001df7 	.word	0x08001df7
 8001d14:	7c3b      	ldrb	r3, [r7, #16]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	f040 80b8 	bne.w	8001e8c <HAL_HCD_HC_SubmitRequest+0x214>
 8001d1c:	78bb      	ldrb	r3, [r7, #2]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 80b4 	bne.w	8001e8c <HAL_HCD_HC_SubmitRequest+0x214>
 8001d24:	8b3b      	ldrh	r3, [r7, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d108      	bne.n	8001d3c <HAL_HCD_HC_SubmitRequest+0xc4>
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3355      	adds	r3, #85	; 0x55
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	3355      	adds	r3, #85	; 0x55
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_HCD_HC_SubmitRequest+0xec>
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3342      	adds	r3, #66	; 0x42
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	e093      	b.n	8001e8c <HAL_HCD_HC_SubmitRequest+0x214>
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	212c      	movs	r1, #44	; 0x2c
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	3342      	adds	r3, #66	; 0x42
 8001d72:	2202      	movs	r2, #2
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	e089      	b.n	8001e8c <HAL_HCD_HC_SubmitRequest+0x214>
 8001d78:	78bb      	ldrb	r3, [r7, #2]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d11d      	bne.n	8001dba <HAL_HCD_HC_SubmitRequest+0x142>
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	3355      	adds	r3, #85	; 0x55
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_HCD_HC_SubmitRequest+0x12e>
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	212c      	movs	r1, #44	; 0x2c
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3342      	adds	r3, #66	; 0x42
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	e073      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	212c      	movs	r1, #44	; 0x2c
 8001dac:	fb01 f303 	mul.w	r3, r1, r3
 8001db0:	4413      	add	r3, r2
 8001db2:	3342      	adds	r3, #66	; 0x42
 8001db4:	2202      	movs	r2, #2
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	e069      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3354      	adds	r3, #84	; 0x54
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_HCD_HC_SubmitRequest+0x16a>
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	212c      	movs	r1, #44	; 0x2c
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	3342      	adds	r3, #66	; 0x42
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	e055      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	212c      	movs	r1, #44	; 0x2c
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	4413      	add	r3, r2
 8001dee:	3342      	adds	r3, #66	; 0x42
 8001df0:	2202      	movs	r2, #2
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	e04b      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
 8001df6:	78bb      	ldrb	r3, [r7, #2]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d11d      	bne.n	8001e38 <HAL_HCD_HC_SubmitRequest+0x1c0>
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	212c      	movs	r1, #44	; 0x2c
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	3355      	adds	r3, #85	; 0x55
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d109      	bne.n	8001e24 <HAL_HCD_HC_SubmitRequest+0x1ac>
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	212c      	movs	r1, #44	; 0x2c
 8001e16:	fb01 f303 	mul.w	r3, r1, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3342      	adds	r3, #66	; 0x42
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e034      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	212c      	movs	r1, #44	; 0x2c
 8001e2a:	fb01 f303 	mul.w	r3, r1, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	3342      	adds	r3, #66	; 0x42
 8001e32:	2202      	movs	r2, #2
 8001e34:	701a      	strb	r2, [r3, #0]
 8001e36:	e02a      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	212c      	movs	r1, #44	; 0x2c
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	3354      	adds	r3, #84	; 0x54
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d109      	bne.n	8001e60 <HAL_HCD_HC_SubmitRequest+0x1e8>
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	3342      	adds	r3, #66	; 0x42
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e016      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	212c      	movs	r1, #44	; 0x2c
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3342      	adds	r3, #66	; 0x42
 8001e6e:	2202      	movs	r2, #2
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e00c      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	212c      	movs	r1, #44	; 0x2c
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	3342      	adds	r3, #66	; 0x42
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	e002      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
 8001e88:	bf00      	nop
 8001e8a:	e000      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
 8001e8c:	bf00      	nop
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	212c      	movs	r1, #44	; 0x2c
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	4413      	add	r3, r2
 8001e9a:	3344      	adds	r3, #68	; 0x44
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	8b3a      	ldrh	r2, [r7, #24]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	202c      	movs	r0, #44	; 0x2c
 8001ea8:	fb00 f303 	mul.w	r3, r0, r3
 8001eac:	440b      	add	r3, r1
 8001eae:	334c      	adds	r3, #76	; 0x4c
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	212c      	movs	r1, #44	; 0x2c
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3360      	adds	r3, #96	; 0x60
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	212c      	movs	r1, #44	; 0x2c
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3350      	adds	r3, #80	; 0x50
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	212c      	movs	r1, #44	; 0x2c
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3339      	adds	r3, #57	; 0x39
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	701a      	strb	r2, [r3, #0]
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	212c      	movs	r1, #44	; 0x2c
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3361      	adds	r3, #97	; 0x61
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	222c      	movs	r2, #44	; 0x2c
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	3338      	adds	r3, #56	; 0x38
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	18d1      	adds	r1, r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	f004 f920 	bl	8006158 <USB_HC_StartXfer>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop

08001f24 <HAL_HCD_IRQHandler>:
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 fe21 	bl	8005b82 <USB_GetMode>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	f040 80f6 	bne.w	8002134 <HAL_HCD_IRQHandler+0x210>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 fe05 	bl	8005b5c <USB_ReadInterrupts>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80ec 	beq.w	8002132 <HAL_HCD_IRQHandler+0x20e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fdfc 	bl	8005b5c <USB_ReadInterrupts>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f6e:	d104      	bne.n	8001f7a <HAL_HCD_IRQHandler+0x56>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f78:	615a      	str	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fdec 	bl	8005b5c <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f8e:	d104      	bne.n	8001f9a <HAL_HCD_IRQHandler+0x76>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f98:	615a      	str	r2, [r3, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 fddc 	bl	8005b5c <USB_ReadInterrupts>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001faa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fae:	d104      	bne.n	8001fba <HAL_HCD_IRQHandler+0x96>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fb8:	615a      	str	r2, [r3, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 fdcc 	bl	8005b5c <USB_ReadInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d103      	bne.n	8001fd6 <HAL_HCD_IRQHandler+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	615a      	str	r2, [r3, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 fdbe 	bl	8005b5c <USB_ReadInterrupts>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fea:	d11c      	bne.n	8002026 <HAL_HCD_IRQHandler+0x102>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ff4:	615a      	str	r2, [r3, #20]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10f      	bne.n	8002026 <HAL_HCD_IRQHandler+0x102>
 8002006:	2110      	movs	r1, #16
 8002008:	6938      	ldr	r0, [r7, #16]
 800200a:	f003 fcad 	bl	8005968 <USB_FlushTxFifo>
 800200e:	6938      	ldr	r0, [r7, #16]
 8002010:	f003 fcde 	bl	80059d0 <USB_FlushRxFifo>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	4618      	mov	r0, r3
 800201c:	f003 feb4 	bl	8005d88 <USB_InitFSLSPClkSel>
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f006 fc83 	bl	800892c <HAL_HCD_Disconnect_Callback>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f003 fd96 	bl	8005b5c <USB_ReadInterrupts>
 8002030:	4603      	mov	r3, r0
 8002032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002036:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800203a:	d102      	bne.n	8002042 <HAL_HCD_IRQHandler+0x11e>
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f001 f89e 	bl	800317e <HCD_Port_IRQHandler>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f003 fd88 	bl	8005b5c <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b08      	cmp	r3, #8
 8002054:	d106      	bne.n	8002064 <HAL_HCD_IRQHandler+0x140>
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f006 fc4c 	bl	80088f4 <HAL_HCD_SOF_Callback>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2208      	movs	r2, #8
 8002062:	615a      	str	r2, [r3, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f003 fd77 	bl	8005b5c <USB_ReadInterrupts>
 800206e:	4603      	mov	r3, r0
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b10      	cmp	r3, #16
 8002076:	d101      	bne.n	800207c <HAL_HCD_IRQHandler+0x158>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_HCD_IRQHandler+0x15a>
 800207c:	2300      	movs	r3, #0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d012      	beq.n	80020a8 <HAL_HCD_IRQHandler+0x184>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699a      	ldr	r2, [r3, #24]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0210 	bic.w	r2, r2, #16
 8002090:	619a      	str	r2, [r3, #24]
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 ffa1 	bl	8002fda <HCD_RXQLVL_IRQHandler>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0210 	orr.w	r2, r2, #16
 80020a6:	619a      	str	r2, [r3, #24]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 fd55 	bl	8005b5c <USB_ReadInterrupts>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020bc:	d13a      	bne.n	8002134 <HAL_HCD_IRQHandler+0x210>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f004 f98a 	bl	80063dc <USB_HC_ReadInterrupt>
 80020c8:	60b8      	str	r0, [r7, #8]
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	e025      	b.n	800211c <HAL_HCD_IRQHandler+0x1f8>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d018      	beq.n	8002116 <HAL_HCD_IRQHandler+0x1f2>
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020fa:	d106      	bne.n	800210a <HAL_HCD_IRQHandler+0x1e6>
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4619      	mov	r1, r3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8ab 	bl	800225e <HCD_HC_IN_IRQHandler>
 8002108:	e005      	b.n	8002116 <HAL_HCD_IRQHandler+0x1f2>
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fbf9 	bl	8002908 <HCD_HC_OUT_IRQHandler>
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	429a      	cmp	r2, r3
 8002124:	d3d4      	bcc.n	80020d0 <HAL_HCD_IRQHandler+0x1ac>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800212e:	615a      	str	r2, [r3, #20]
 8002130:	e000      	b.n	8002134 <HAL_HCD_IRQHandler+0x210>
 8002132:	bf00      	nop
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_HCD_Start>:
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_HCD_Start+0x16>
 800214c:	2302      	movs	r3, #2
 800214e:	e013      	b.n	8002178 <HAL_HCD_Start+0x3e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2101      	movs	r1, #1
 800215e:	4618      	mov	r0, r3
 8002160:	f003 fe76 	bl	8005e50 <USB_DriveVbus>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f003 fb8e 	bl	800588a <USB_EnableGlobalInt>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8002176:	2300      	movs	r3, #0
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_HCD_Stop>:
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_HCD_Stop+0x16>
 8002192:	2302      	movs	r3, #2
 8002194:	e00d      	b.n	80021b2 <HAL_HCD_Stop+0x32>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 fa64 	bl	8006670 <USB_StopHost>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 80021b0:	2300      	movs	r3, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_HCD_ResetPort>:
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 fe18 	bl	8005dfc <USB_ResetPort>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_HCD_HC_GetURBState>:
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	70fb      	strb	r3, [r7, #3]
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	212c      	movs	r1, #44	; 0x2c
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	3360      	adds	r3, #96	; 0x60
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_HCD_HC_GetXferCount>:
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	70fb      	strb	r3, [r7, #3]
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3350      	adds	r3, #80	; 0x50
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_HCD_GetCurrentFrame>:
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fe5c 	bl	8005ef0 <USB_GetCurrentFrame>
 8002238:	4603      	mov	r3, r0
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_HCD_GetCurrentSpeed>:
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f003 fe37 	bl	8005ec2 <USB_GetHostSpeed>
 8002254:	4603      	mov	r3, r0
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HCD_HC_IN_IRQHandler>:
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	70fb      	strb	r3, [r7, #3]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b04      	cmp	r3, #4
 800228c:	d11a      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0x66>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	461a      	mov	r2, r3
 800229c:	2304      	movs	r3, #4
 800229e:	6093      	str	r3, [r2, #8]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3361      	adds	r3, #97	; 0x61
 80022ae:	2206      	movs	r2, #6
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 f89e 	bl	80063fe <USB_HC_Halt>
 80022c2:	e0af      	b.n	8002424 <HCD_HC_IN_IRQHandler+0x1c6>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022da:	d11b      	bne.n	8002314 <HCD_HC_IN_IRQHandler+0xb6>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e8:	461a      	mov	r2, r3
 80022ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ee:	6093      	str	r3, [r2, #8]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	212c      	movs	r1, #44	; 0x2c
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	3361      	adds	r3, #97	; 0x61
 80022fe:	2207      	movs	r2, #7
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f004 f876 	bl	80063fe <USB_HC_Halt>
 8002312:	e087      	b.n	8002424 <HCD_HC_IN_IRQHandler+0x1c6>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b20      	cmp	r3, #32
 8002328:	d109      	bne.n	800233e <HCD_HC_IN_IRQHandler+0xe0>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002336:	461a      	mov	r2, r3
 8002338:	2320      	movs	r3, #32
 800233a:	6093      	str	r3, [r2, #8]
 800233c:	e072      	b.n	8002424 <HCD_HC_IN_IRQHandler+0x1c6>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b08      	cmp	r3, #8
 8002352:	d11a      	bne.n	800238a <HCD_HC_IN_IRQHandler+0x12c>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	461a      	mov	r2, r3
 8002362:	2308      	movs	r3, #8
 8002364:	6093      	str	r3, [r2, #8]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	3361      	adds	r3, #97	; 0x61
 8002374:	2205      	movs	r2, #5
 8002376:	701a      	strb	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f004 f83b 	bl	80063fe <USB_HC_Halt>
 8002388:	e04c      	b.n	8002424 <HCD_HC_IN_IRQHandler+0x1c6>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4413      	add	r3, r2
 8002392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a0:	d11b      	bne.n	80023da <HCD_HC_IN_IRQHandler+0x17c>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ae:	461a      	mov	r2, r3
 80023b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b4:	6093      	str	r3, [r2, #8]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	3361      	adds	r3, #97	; 0x61
 80023c4:	2208      	movs	r2, #8
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f004 f813 	bl	80063fe <USB_HC_Halt>
 80023d8:	e024      	b.n	8002424 <HCD_HC_IN_IRQHandler+0x1c6>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ec:	2b80      	cmp	r3, #128	; 0x80
 80023ee:	d119      	bne.n	8002424 <HCD_HC_IN_IRQHandler+0x1c6>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	461a      	mov	r2, r3
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	6093      	str	r3, [r2, #8]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	3361      	adds	r3, #97	; 0x61
 8002410:	2206      	movs	r2, #6
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f003 ffed 	bl	80063fe <USB_HC_Halt>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4413      	add	r3, r2
 800242c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800243a:	d112      	bne.n	8002462 <HCD_HC_IN_IRQHandler+0x204>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f003 ffd9 	bl	80063fe <USB_HC_Halt>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	461a      	mov	r2, r3
 800245a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800245e:	6093      	str	r3, [r2, #8]
 8002460:	e24e      	b.n	8002900 <HCD_HC_IN_IRQHandler+0x6a2>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	f040 80df 	bne.w	8002638 <HCD_HC_IN_IRQHandler+0x3da>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d019      	beq.n	80024b6 <HCD_HC_IN_IRQHandler+0x258>
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	3348      	adds	r3, #72	; 0x48
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	0159      	lsls	r1, r3, #5
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	440b      	add	r3, r1
 800249a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a4:	1ad2      	subs	r2, r2, r3
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	202c      	movs	r0, #44	; 0x2c
 80024ac:	fb00 f303 	mul.w	r3, r0, r3
 80024b0:	440b      	add	r3, r1
 80024b2:	3350      	adds	r3, #80	; 0x50
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	3361      	adds	r3, #97	; 0x61
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	335c      	adds	r3, #92	; 0x5c
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e6:	461a      	mov	r2, r3
 80024e8:	2301      	movs	r3, #1
 80024ea:	6093      	str	r3, [r2, #8]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	212c      	movs	r1, #44	; 0x2c
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	333f      	adds	r3, #63	; 0x3f
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d009      	beq.n	8002514 <HCD_HC_IN_IRQHandler+0x2b6>
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	212c      	movs	r1, #44	; 0x2c
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	4413      	add	r3, r2
 800250c:	333f      	adds	r3, #63	; 0x3f
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d111      	bne.n	8002538 <HCD_HC_IN_IRQHandler+0x2da>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f003 ff6d 	bl	80063fe <USB_HC_Halt>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	461a      	mov	r2, r3
 8002532:	2310      	movs	r3, #16
 8002534:	6093      	str	r3, [r2, #8]
 8002536:	e03a      	b.n	80025ae <HCD_HC_IN_IRQHandler+0x350>
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	212c      	movs	r1, #44	; 0x2c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	333f      	adds	r3, #63	; 0x3f
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d009      	beq.n	8002560 <HCD_HC_IN_IRQHandler+0x302>
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	333f      	adds	r3, #63	; 0x3f
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d126      	bne.n	80025ae <HCD_HC_IN_IRQHandler+0x350>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	0151      	lsls	r1, r2, #5
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	440a      	add	r2, r1
 8002576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800257a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3360      	adds	r3, #96	; 0x60
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	b2d9      	uxtb	r1, r3
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	202c      	movs	r0, #44	; 0x2c
 800259c:	fb00 f303 	mul.w	r3, r0, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	3360      	adds	r3, #96	; 0x60
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f006 f9cd 	bl	8008948 <HAL_HCD_HC_NotifyURBChange_Callback>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d12b      	bne.n	800260e <HCD_HC_IN_IRQHandler+0x3b0>
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	212c      	movs	r1, #44	; 0x2c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	3348      	adds	r3, #72	; 0x48
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	202c      	movs	r0, #44	; 0x2c
 80025cc:	fb00 f202 	mul.w	r2, r0, r2
 80025d0:	440a      	add	r2, r1
 80025d2:	3240      	adds	r2, #64	; 0x40
 80025d4:	8812      	ldrh	r2, [r2, #0]
 80025d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 818e 	beq.w	8002900 <HCD_HC_IN_IRQHandler+0x6a2>
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	212c      	movs	r1, #44	; 0x2c
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	3354      	adds	r3, #84	; 0x54
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	f083 0301 	eor.w	r3, r3, #1
 80025f8:	b2d8      	uxtb	r0, r3
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	3354      	adds	r3, #84	; 0x54
 8002608:	4602      	mov	r2, r0
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	e178      	b.n	8002900 <HCD_HC_IN_IRQHandler+0x6a2>
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3354      	adds	r3, #84	; 0x54
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	f083 0301 	eor.w	r3, r3, #1
 8002622:	b2d8      	uxtb	r0, r3
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	3354      	adds	r3, #84	; 0x54
 8002632:	4602      	mov	r2, r0
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	e163      	b.n	8002900 <HCD_HC_IN_IRQHandler+0x6a2>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b02      	cmp	r3, #2
 800264c:	f040 80f6 	bne.w	800283c <HCD_HC_IN_IRQHandler+0x5de>
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	3361      	adds	r3, #97	; 0x61
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d109      	bne.n	8002678 <HCD_HC_IN_IRQHandler+0x41a>
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	3360      	adds	r3, #96	; 0x60
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e0c9      	b.n	800280c <HCD_HC_IN_IRQHandler+0x5ae>
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3361      	adds	r3, #97	; 0x61
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d109      	bne.n	80026a0 <HCD_HC_IN_IRQHandler+0x442>
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	3360      	adds	r3, #96	; 0x60
 800269a:	2205      	movs	r2, #5
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	e0b5      	b.n	800280c <HCD_HC_IN_IRQHandler+0x5ae>
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	3361      	adds	r3, #97	; 0x61
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b06      	cmp	r3, #6
 80026b2:	d009      	beq.n	80026c8 <HCD_HC_IN_IRQHandler+0x46a>
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	212c      	movs	r1, #44	; 0x2c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	4413      	add	r3, r2
 80026c0:	3361      	adds	r3, #97	; 0x61
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d150      	bne.n	800276a <HCD_HC_IN_IRQHandler+0x50c>
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	335c      	adds	r3, #92	; 0x5c
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	202c      	movs	r0, #44	; 0x2c
 80026e0:	fb00 f303 	mul.w	r3, r0, r3
 80026e4:	440b      	add	r3, r1
 80026e6:	335c      	adds	r3, #92	; 0x5c
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	335c      	adds	r3, #92	; 0x5c
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d912      	bls.n	8002724 <HCD_HC_IN_IRQHandler+0x4c6>
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	335c      	adds	r3, #92	; 0x5c
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3360      	adds	r3, #96	; 0x60
 800271e:	2204      	movs	r2, #4
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	e073      	b.n	800280c <HCD_HC_IN_IRQHandler+0x5ae>
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	212c      	movs	r1, #44	; 0x2c
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	3360      	adds	r3, #96	; 0x60
 8002732:	2202      	movs	r2, #2
 8002734:	701a      	strb	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	461a      	mov	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	e050      	b.n	800280c <HCD_HC_IN_IRQHandler+0x5ae>
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	3361      	adds	r3, #97	; 0x61
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b03      	cmp	r3, #3
 800277c:	d122      	bne.n	80027c4 <HCD_HC_IN_IRQHandler+0x566>
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	3360      	adds	r3, #96	; 0x60
 800278c:	2202      	movs	r2, #2
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	461a      	mov	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e023      	b.n	800280c <HCD_HC_IN_IRQHandler+0x5ae>
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3361      	adds	r3, #97	; 0x61
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b07      	cmp	r3, #7
 80027d6:	d119      	bne.n	800280c <HCD_HC_IN_IRQHandler+0x5ae>
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	212c      	movs	r1, #44	; 0x2c
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	335c      	adds	r3, #92	; 0x5c
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	202c      	movs	r0, #44	; 0x2c
 80027f0:	fb00 f303 	mul.w	r3, r0, r3
 80027f4:	440b      	add	r3, r1
 80027f6:	335c      	adds	r3, #92	; 0x5c
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	212c      	movs	r1, #44	; 0x2c
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	3360      	adds	r3, #96	; 0x60
 8002808:	2204      	movs	r2, #4
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002818:	461a      	mov	r2, r3
 800281a:	2302      	movs	r3, #2
 800281c:	6093      	str	r3, [r2, #8]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	b2d9      	uxtb	r1, r3
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	202c      	movs	r0, #44	; 0x2c
 8002828:	fb00 f303 	mul.w	r3, r0, r3
 800282c:	4413      	add	r3, r2
 800282e:	3360      	adds	r3, #96	; 0x60
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f006 f887 	bl	8008948 <HAL_HCD_HC_NotifyURBChange_Callback>
 800283a:	e061      	b.n	8002900 <HCD_HC_IN_IRQHandler+0x6a2>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b10      	cmp	r3, #16
 8002850:	d156      	bne.n	8002900 <HCD_HC_IN_IRQHandler+0x6a2>
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	333f      	adds	r3, #63	; 0x3f
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d111      	bne.n	800288a <HCD_HC_IN_IRQHandler+0x62c>
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	335c      	adds	r3, #92	; 0x5c
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f003 fdbb 	bl	80063fe <USB_HC_Halt>
 8002888:	e031      	b.n	80028ee <HCD_HC_IN_IRQHandler+0x690>
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	333f      	adds	r3, #63	; 0x3f
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <HCD_HC_IN_IRQHandler+0x654>
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	333f      	adds	r3, #63	; 0x3f
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d11d      	bne.n	80028ee <HCD_HC_IN_IRQHandler+0x690>
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	335c      	adds	r3, #92	; 0x5c
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d110      	bne.n	80028ee <HCD_HC_IN_IRQHandler+0x690>
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	3361      	adds	r3, #97	; 0x61
 80028da:	2203      	movs	r2, #3
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f003 fd88 	bl	80063fe <USB_HC_Halt>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	461a      	mov	r2, r3
 80028fc:	2310      	movs	r3, #16
 80028fe:	6093      	str	r3, [r2, #8]
 8002900:	bf00      	nop
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HCD_HC_OUT_IRQHandler>:
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	70fb      	strb	r3, [r7, #3]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b04      	cmp	r3, #4
 8002936:	d11a      	bne.n	800296e <HCD_HC_OUT_IRQHandler+0x66>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	461a      	mov	r2, r3
 8002946:	2304      	movs	r3, #4
 8002948:	6093      	str	r3, [r2, #8]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3361      	adds	r3, #97	; 0x61
 8002958:	2206      	movs	r2, #6
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f003 fd49 	bl	80063fe <USB_HC_Halt>
 800296c:	e331      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x6ca>
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b20      	cmp	r3, #32
 8002982:	d12e      	bne.n	80029e2 <HCD_HC_OUT_IRQHandler+0xda>
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002990:	461a      	mov	r2, r3
 8002992:	2320      	movs	r3, #32
 8002994:	6093      	str	r3, [r2, #8]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	333d      	adds	r3, #61	; 0x3d
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	f040 8313 	bne.w	8002fd2 <HCD_HC_OUT_IRQHandler+0x6ca>
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	333d      	adds	r3, #61	; 0x3d
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	3360      	adds	r3, #96	; 0x60
 80029cc:	2202      	movs	r2, #2
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 fd0f 	bl	80063fe <USB_HC_Halt>
 80029e0:	e2f7      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x6ca>
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f8:	d112      	bne.n	8002a20 <HCD_HC_OUT_IRQHandler+0x118>
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a06:	461a      	mov	r2, r3
 8002a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a0c:	6093      	str	r3, [r2, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 fcf0 	bl	80063fe <USB_HC_Halt>
 8002a1e:	e2d8      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d140      	bne.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x1b0>
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	335c      	adds	r3, #92	; 0x5c
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5a:	2b40      	cmp	r3, #64	; 0x40
 8002a5c:	d111      	bne.n	8002a82 <HCD_HC_OUT_IRQHandler+0x17a>
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	333d      	adds	r3, #61	; 0x3d
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2340      	movs	r3, #64	; 0x40
 8002a80:	6093      	str	r3, [r2, #8]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2301      	movs	r3, #1
 8002a92:	6093      	str	r3, [r2, #8]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3361      	adds	r3, #97	; 0x61
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f003 fca4 	bl	80063fe <USB_HC_Halt>
 8002ab6:	e28c      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d12c      	bne.n	8002b28 <HCD_HC_OUT_IRQHandler+0x220>
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	212c      	movs	r1, #44	; 0x2c
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	3361      	adds	r3, #97	; 0x61
 8002adc:	2204      	movs	r2, #4
 8002ade:	701a      	strb	r2, [r3, #0]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	333d      	adds	r3, #61	; 0x3d
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	335c      	adds	r3, #92	; 0x5c
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f003 fc75 	bl	80063fe <USB_HC_Halt>
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	461a      	mov	r2, r3
 8002b22:	2340      	movs	r3, #64	; 0x40
 8002b24:	6093      	str	r3, [r2, #8]
 8002b26:	e254      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d11a      	bne.n	8002b74 <HCD_HC_OUT_IRQHandler+0x26c>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	6093      	str	r3, [r2, #8]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3361      	adds	r3, #97	; 0x61
 8002b5e:	2205      	movs	r2, #5
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 fc46 	bl	80063fe <USB_HC_Halt>
 8002b72:	e22e      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d140      	bne.n	8002c0c <HCD_HC_OUT_IRQHandler+0x304>
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	212c      	movs	r1, #44	; 0x2c
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	335c      	adds	r3, #92	; 0x5c
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3361      	adds	r3, #97	; 0x61
 8002baa:	2203      	movs	r2, #3
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	333d      	adds	r3, #61	; 0x3d
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d112      	bne.n	8002be8 <HCD_HC_OUT_IRQHandler+0x2e0>
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	333c      	adds	r3, #60	; 0x3c
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d108      	bne.n	8002be8 <HCD_HC_OUT_IRQHandler+0x2e0>
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	333d      	adds	r3, #61	; 0x3d
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f003 fc03 	bl	80063fe <USB_HC_Halt>
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	461a      	mov	r2, r3
 8002c06:	2310      	movs	r3, #16
 8002c08:	6093      	str	r3, [r2, #8]
 8002c0a:	e1e2      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1e:	2b80      	cmp	r3, #128	; 0x80
 8002c20:	d164      	bne.n	8002cec <HCD_HC_OUT_IRQHandler+0x3e4>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d111      	bne.n	8002c4e <HCD_HC_OUT_IRQHandler+0x346>
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	3361      	adds	r3, #97	; 0x61
 8002c38:	2206      	movs	r2, #6
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 fbd9 	bl	80063fe <USB_HC_Halt>
 8002c4c:	e044      	b.n	8002cd8 <HCD_HC_OUT_IRQHandler+0x3d0>
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	335c      	adds	r3, #92	; 0x5c
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	202c      	movs	r0, #44	; 0x2c
 8002c66:	fb00 f303 	mul.w	r3, r0, r3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	335c      	adds	r3, #92	; 0x5c
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	335c      	adds	r3, #92	; 0x5c
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d920      	bls.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x3be>
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	335c      	adds	r3, #92	; 0x5c
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3360      	adds	r3, #96	; 0x60
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	b2d9      	uxtb	r1, r3
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	202c      	movs	r0, #44	; 0x2c
 8002cb2:	fb00 f303 	mul.w	r3, r0, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3360      	adds	r3, #96	; 0x60
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f005 fe42 	bl	8008948 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cc4:	e008      	b.n	8002cd8 <HCD_HC_OUT_IRQHandler+0x3d0>
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3360      	adds	r3, #96	; 0x60
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	6093      	str	r3, [r2, #8]
 8002cea:	e172      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d02:	d11b      	bne.n	8002d3c <HCD_HC_OUT_IRQHandler+0x434>
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3361      	adds	r3, #97	; 0x61
 8002d12:	2208      	movs	r2, #8
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 fb6c 	bl	80063fe <USB_HC_Halt>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d32:	461a      	mov	r2, r3
 8002d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d38:	6093      	str	r3, [r2, #8]
 8002d3a:	e14a      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	f040 813f 	bne.w	8002fd2 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3361      	adds	r3, #97	; 0x61
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d17d      	bne.n	8002e64 <HCD_HC_OUT_IRQHandler+0x55c>
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3360      	adds	r3, #96	; 0x60
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	212c      	movs	r1, #44	; 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	333f      	adds	r3, #63	; 0x3f
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d00a      	beq.n	8002da4 <HCD_HC_OUT_IRQHandler+0x49c>
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	333f      	adds	r3, #63	; 0x3f
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	f040 8100 	bne.w	8002fa4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d113      	bne.n	8002dd4 <HCD_HC_OUT_IRQHandler+0x4cc>
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	3355      	adds	r3, #85	; 0x55
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	f083 0301 	eor.w	r3, r3, #1
 8002dc0:	b2d8      	uxtb	r0, r3
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3355      	adds	r3, #85	; 0x55
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	f040 80e3 	bne.w	8002fa4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	334c      	adds	r3, #76	; 0x4c
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80d8 	beq.w	8002fa4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	334c      	adds	r3, #76	; 0x4c
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	202c      	movs	r0, #44	; 0x2c
 8002e0a:	fb00 f202 	mul.w	r2, r0, r2
 8002e0e:	440a      	add	r2, r1
 8002e10:	3240      	adds	r2, #64	; 0x40
 8002e12:	8812      	ldrh	r2, [r2, #0]
 8002e14:	4413      	add	r3, r2
 8002e16:	3b01      	subs	r3, #1
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	202c      	movs	r0, #44	; 0x2c
 8002e1e:	fb00 f202 	mul.w	r2, r0, r2
 8002e22:	440a      	add	r2, r1
 8002e24:	3240      	adds	r2, #64	; 0x40
 8002e26:	8812      	ldrh	r2, [r2, #0]
 8002e28:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80b5 	beq.w	8002fa4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	3355      	adds	r3, #85	; 0x55
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	f083 0301 	eor.w	r3, r3, #1
 8002e4e:	b2d8      	uxtb	r0, r3
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3355      	adds	r3, #85	; 0x55
 8002e5e:	4602      	mov	r2, r0
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e09f      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3361      	adds	r3, #97	; 0x61
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d109      	bne.n	8002e8c <HCD_HC_OUT_IRQHandler+0x584>
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3360      	adds	r3, #96	; 0x60
 8002e86:	2202      	movs	r2, #2
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	e08b      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	212c      	movs	r1, #44	; 0x2c
 8002e92:	fb01 f303 	mul.w	r3, r1, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	3361      	adds	r3, #97	; 0x61
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d109      	bne.n	8002eb4 <HCD_HC_OUT_IRQHandler+0x5ac>
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3360      	adds	r3, #96	; 0x60
 8002eae:	2202      	movs	r2, #2
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	e077      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	212c      	movs	r1, #44	; 0x2c
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3361      	adds	r3, #97	; 0x61
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d109      	bne.n	8002edc <HCD_HC_OUT_IRQHandler+0x5d4>
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	212c      	movs	r1, #44	; 0x2c
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3360      	adds	r3, #96	; 0x60
 8002ed6:	2205      	movs	r2, #5
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	e063      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3361      	adds	r3, #97	; 0x61
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b06      	cmp	r3, #6
 8002eee:	d009      	beq.n	8002f04 <HCD_HC_OUT_IRQHandler+0x5fc>
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	212c      	movs	r1, #44	; 0x2c
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	3361      	adds	r3, #97	; 0x61
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d14f      	bne.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	335c      	adds	r3, #92	; 0x5c
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	202c      	movs	r0, #44	; 0x2c
 8002f1c:	fb00 f303 	mul.w	r3, r0, r3
 8002f20:	440b      	add	r3, r1
 8002f22:	335c      	adds	r3, #92	; 0x5c
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	212c      	movs	r1, #44	; 0x2c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	335c      	adds	r3, #92	; 0x5c
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d912      	bls.n	8002f60 <HCD_HC_OUT_IRQHandler+0x658>
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	335c      	adds	r3, #92	; 0x5c
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	212c      	movs	r1, #44	; 0x2c
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	3360      	adds	r3, #96	; 0x60
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e021      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	212c      	movs	r1, #44	; 0x2c
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3360      	adds	r3, #96	; 0x60
 8002f6e:	2202      	movs	r2, #2
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	6093      	str	r3, [r2, #8]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	b2d9      	uxtb	r1, r3
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	202c      	movs	r0, #44	; 0x2c
 8002fc0:	fb00 f303 	mul.w	r3, r0, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3360      	adds	r3, #96	; 0x60
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f005 fcbb 	bl	8008948 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fd2:	bf00      	nop
 8002fd4:	3720      	adds	r7, #32
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HCD_RXQLVL_IRQHandler>:
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b08a      	sub	sp, #40	; 0x28
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	623b      	str	r3, [r7, #32]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	61fb      	str	r3, [r7, #28]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	0c5b      	lsrs	r3, r3, #17
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d004      	beq.n	8003020 <HCD_RXQLVL_IRQHandler+0x46>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b05      	cmp	r3, #5
 800301a:	f000 80a9 	beq.w	8003170 <HCD_RXQLVL_IRQHandler+0x196>
 800301e:	e0aa      	b.n	8003176 <HCD_RXQLVL_IRQHandler+0x19c>
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 80a6 	beq.w	8003174 <HCD_RXQLVL_IRQHandler+0x19a>
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	3344      	adds	r3, #68	; 0x44
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 809b 	beq.w	8003174 <HCD_RXQLVL_IRQHandler+0x19a>
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	3350      	adds	r3, #80	; 0x50
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	441a      	add	r2, r3
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	202c      	movs	r0, #44	; 0x2c
 8003058:	fb00 f303 	mul.w	r3, r0, r3
 800305c:	440b      	add	r3, r1
 800305e:	334c      	adds	r3, #76	; 0x4c
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d87a      	bhi.n	800315c <HCD_RXQLVL_IRQHandler+0x182>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	3344      	adds	r3, #68	; 0x44
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	b292      	uxth	r2, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f002 fd14 	bl	8005aac <USB_ReadPacket>
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	212c      	movs	r1, #44	; 0x2c
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	3344      	adds	r3, #68	; 0x44
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	441a      	add	r2, r3
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	202c      	movs	r0, #44	; 0x2c
 800309e:	fb00 f303 	mul.w	r3, r0, r3
 80030a2:	440b      	add	r3, r1
 80030a4:	3344      	adds	r3, #68	; 0x44
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	3350      	adds	r3, #80	; 0x50
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	441a      	add	r2, r3
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	202c      	movs	r0, #44	; 0x2c
 80030c2:	fb00 f303 	mul.w	r3, r0, r3
 80030c6:	440b      	add	r3, r1
 80030c8:	3350      	adds	r3, #80	; 0x50
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	0cdb      	lsrs	r3, r3, #19
 80030dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	3340      	adds	r3, #64	; 0x40
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d13c      	bne.n	8003174 <HCD_RXQLVL_IRQHandler+0x19a>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d039      	beq.n	8003174 <HCD_RXQLVL_IRQHandler+0x19a>
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312c:	461a      	mov	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	212c      	movs	r1, #44	; 0x2c
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	4413      	add	r3, r2
 800313e:	3354      	adds	r3, #84	; 0x54
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	f083 0301 	eor.w	r3, r3, #1
 8003146:	b2d8      	uxtb	r0, r3
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	3354      	adds	r3, #84	; 0x54
 8003156:	4602      	mov	r2, r0
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e00b      	b.n	8003174 <HCD_RXQLVL_IRQHandler+0x19a>
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	212c      	movs	r1, #44	; 0x2c
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	4413      	add	r3, r2
 8003168:	3360      	adds	r3, #96	; 0x60
 800316a:	2204      	movs	r2, #4
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	e001      	b.n	8003174 <HCD_RXQLVL_IRQHandler+0x19a>
 8003170:	bf00      	nop
 8003172:	e000      	b.n	8003176 <HCD_RXQLVL_IRQHandler+0x19c>
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	3728      	adds	r7, #40	; 0x28
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HCD_Port_IRQHandler>:
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80031aa:	60bb      	str	r3, [r7, #8]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d10b      	bne.n	80031ce <HCD_Port_IRQHandler+0x50>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d102      	bne.n	80031c6 <HCD_Port_IRQHandler+0x48>
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f005 fba5 	bl	8008910 <HAL_HCD_Connect_Callback>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f043 0302 	orr.w	r3, r3, #2
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d132      	bne.n	800323e <HCD_Port_IRQHandler+0xc0>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f043 0308 	orr.w	r3, r3, #8
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d126      	bne.n	8003238 <HCD_Port_IRQHandler+0xba>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d113      	bne.n	800321a <HCD_Port_IRQHandler+0x9c>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80031f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031fc:	d106      	bne.n	800320c <HCD_Port_IRQHandler+0x8e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2102      	movs	r1, #2
 8003204:	4618      	mov	r0, r3
 8003206:	f002 fdbf 	bl	8005d88 <USB_InitFSLSPClkSel>
 800320a:	e011      	b.n	8003230 <HCD_Port_IRQHandler+0xb2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2101      	movs	r1, #1
 8003212:	4618      	mov	r0, r3
 8003214:	f002 fdb8 	bl	8005d88 <USB_InitFSLSPClkSel>
 8003218:	e00a      	b.n	8003230 <HCD_Port_IRQHandler+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d106      	bne.n	8003230 <HCD_Port_IRQHandler+0xb2>
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003228:	461a      	mov	r2, r3
 800322a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800322e:	6053      	str	r3, [r2, #4]
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f005 fb97 	bl	8008964 <HAL_HCD_PortEnabled_Callback>
 8003236:	e002      	b.n	800323e <HCD_Port_IRQHandler+0xc0>
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f005 fba1 	bl	8008980 <HAL_HCD_PortDisabled_Callback>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b20      	cmp	r3, #32
 8003246:	d103      	bne.n	8003250 <HCD_Port_IRQHandler+0xd2>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f043 0320 	orr.w	r3, r3, #32
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003256:	461a      	mov	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	bf00      	nop
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_I2C_Init>:
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_I2C_Init+0x12>
 8003272:	2301      	movs	r3, #1
 8003274:	e12b      	b.n	80034ce <HAL_I2C_Init+0x26a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_I2C_Init+0x2c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fd fe98 	bl	8000fc0 <HAL_I2C_MspInit>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2224      	movs	r2, #36	; 0x24
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f001 fa20 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4a81      	ldr	r2, [pc, #516]	; (80034d8 <HAL_I2C_Init+0x274>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d807      	bhi.n	80032e8 <HAL_I2C_Init+0x84>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a80      	ldr	r2, [pc, #512]	; (80034dc <HAL_I2C_Init+0x278>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	bf94      	ite	ls
 80032e0:	2301      	movls	r3, #1
 80032e2:	2300      	movhi	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e006      	b.n	80032f6 <HAL_I2C_Init+0x92>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a7d      	ldr	r2, [pc, #500]	; (80034e0 <HAL_I2C_Init+0x27c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bf94      	ite	ls
 80032f0:	2301      	movls	r3, #1
 80032f2:	2300      	movhi	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Init+0x9a>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e0e7      	b.n	80034ce <HAL_I2C_Init+0x26a>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a78      	ldr	r2, [pc, #480]	; (80034e4 <HAL_I2C_Init+0x280>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0c9b      	lsrs	r3, r3, #18
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a6a      	ldr	r2, [pc, #424]	; (80034d8 <HAL_I2C_Init+0x274>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d802      	bhi.n	8003338 <HAL_I2C_Init+0xd4>
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3301      	adds	r3, #1
 8003336:	e009      	b.n	800334c <HAL_I2C_Init+0xe8>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800333e:	fb02 f303 	mul.w	r3, r2, r3
 8003342:	4a69      	ldr	r2, [pc, #420]	; (80034e8 <HAL_I2C_Init+0x284>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	3301      	adds	r3, #1
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	430b      	orrs	r3, r1
 8003352:	6213      	str	r3, [r2, #32]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800335e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	495c      	ldr	r1, [pc, #368]	; (80034d8 <HAL_I2C_Init+0x274>)
 8003368:	428b      	cmp	r3, r1
 800336a:	d819      	bhi.n	80033a0 <HAL_I2C_Init+0x13c>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1e59      	subs	r1, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fbb1 f3f3 	udiv	r3, r1, r3
 800337a:	1c59      	adds	r1, r3, #1
 800337c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003380:	400b      	ands	r3, r1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_I2C_Init+0x138>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1e59      	subs	r1, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fbb1 f3f3 	udiv	r3, r1, r3
 8003394:	3301      	adds	r3, #1
 8003396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339a:	e051      	b.n	8003440 <HAL_I2C_Init+0x1dc>
 800339c:	2304      	movs	r3, #4
 800339e:	e04f      	b.n	8003440 <HAL_I2C_Init+0x1dc>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d111      	bne.n	80033cc <HAL_I2C_Init+0x168>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e58      	subs	r0, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	440b      	add	r3, r1
 80033b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ba:	3301      	adds	r3, #1
 80033bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e012      	b.n	80033f2 <HAL_I2C_Init+0x18e>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1e58      	subs	r0, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	0099      	lsls	r1, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_I2C_Init+0x196>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e022      	b.n	8003440 <HAL_I2C_Init+0x1dc>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10e      	bne.n	8003420 <HAL_I2C_Init+0x1bc>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1e58      	subs	r0, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6859      	ldr	r1, [r3, #4]
 800340a:	460b      	mov	r3, r1
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	440b      	add	r3, r1
 8003410:	fbb0 f3f3 	udiv	r3, r0, r3
 8003414:	3301      	adds	r3, #1
 8003416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800341e:	e00f      	b.n	8003440 <HAL_I2C_Init+0x1dc>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1e58      	subs	r0, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	0099      	lsls	r1, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	fbb0 f3f3 	udiv	r3, r0, r3
 8003436:	3301      	adds	r3, #1
 8003438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	6809      	ldr	r1, [r1, #0]
 8003444:	4313      	orrs	r3, r2
 8003446:	61cb      	str	r3, [r1, #28]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69da      	ldr	r2, [r3, #28]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800346e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6911      	ldr	r1, [r2, #16]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68d2      	ldr	r2, [r2, #12]
 800347a:	4311      	orrs	r1, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	430b      	orrs	r3, r1
 8003482:	6093      	str	r3, [r2, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	60da      	str	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034cc:	2300      	movs	r3, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	000186a0 	.word	0x000186a0
 80034dc:	001e847f 	.word	0x001e847f
 80034e0:	003d08ff 	.word	0x003d08ff
 80034e4:	431bde83 	.word	0x431bde83
 80034e8:	10624dd3 	.word	0x10624dd3

080034ec <HAL_I2S_Init>:
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_I2S_Init+0x12>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e128      	b.n	8003750 <HAL_I2S_Init+0x264>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <HAL_I2S_Init+0x32>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a90      	ldr	r2, [pc, #576]	; (8003758 <HAL_I2S_Init+0x26c>)
 8003516:	635a      	str	r2, [r3, #52]	; 0x34
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7fd fd99 	bl	8001050 <HAL_I2S_MspInit>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003534:	f023 030f 	bic.w	r3, r3, #15
 8003538:	61d3      	str	r3, [r2, #28]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2202      	movs	r2, #2
 8003540:	621a      	str	r2, [r3, #32]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d060      	beq.n	800360c <HAL_I2S_Init+0x120>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d102      	bne.n	8003558 <HAL_I2S_Init+0x6c>
 8003552:	2310      	movs	r3, #16
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	e001      	b.n	800355c <HAL_I2S_Init+0x70>
 8003558:	2320      	movs	r3, #32
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b20      	cmp	r3, #32
 8003562:	d802      	bhi.n	800356a <HAL_I2S_Init+0x7e>
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	2001      	movs	r0, #1
 800356c:	f001 f9c4 	bl	80048f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357a:	d125      	bne.n	80035c8 <HAL_I2S_Init+0xdc>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <HAL_I2S_Init+0xba>
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	fbb2 f2f3 	udiv	r2, r2, r3
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	461a      	mov	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	3305      	adds	r3, #5
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	e01f      	b.n	80035e6 <HAL_I2S_Init+0xfa>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	461a      	mov	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	3305      	adds	r3, #5
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	e00e      	b.n	80035e6 <HAL_I2S_Init+0xfa>
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	461a      	mov	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e2:	3305      	adds	r3, #5
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4a5c      	ldr	r2, [pc, #368]	; (800375c <HAL_I2S_Init+0x270>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	08db      	lsrs	r3, r3, #3
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	085b      	lsrs	r3, r3, #1
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	021b      	lsls	r3, r3, #8
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	e003      	b.n	8003614 <HAL_I2S_Init+0x128>
 800360c:	2302      	movs	r3, #2
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	2300      	movs	r3, #0
 8003612:	61bb      	str	r3, [r7, #24]
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d902      	bls.n	8003620 <HAL_I2S_Init+0x134>
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	2bff      	cmp	r3, #255	; 0xff
 800361e:	d907      	bls.n	8003630 <HAL_I2S_Init+0x144>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f043 0210 	orr.w	r2, r3, #16
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	645a      	str	r2, [r3, #68]	; 0x44
 800362c:	2301      	movs	r3, #1
 800362e:	e08f      	b.n	8003750 <HAL_I2S_Init+0x264>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	ea42 0103 	orr.w	r1, r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	430a      	orrs	r2, r1
 8003642:	621a      	str	r2, [r3, #32]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800364e:	f023 030f 	bic.w	r3, r3, #15
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6851      	ldr	r1, [r2, #4]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6892      	ldr	r2, [r2, #8]
 800365a:	4311      	orrs	r1, r2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	68d2      	ldr	r2, [r2, #12]
 8003660:	4311      	orrs	r1, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6992      	ldr	r2, [r2, #24]
 8003666:	430a      	orrs	r2, r1
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003672:	61da      	str	r2, [r3, #28]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d161      	bne.n	8003740 <HAL_I2S_Init+0x254>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a38      	ldr	r2, [pc, #224]	; (8003760 <HAL_I2S_Init+0x274>)
 8003680:	635a      	str	r2, [r3, #52]	; 0x34
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a37      	ldr	r2, [pc, #220]	; (8003764 <HAL_I2S_Init+0x278>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d101      	bne.n	8003690 <HAL_I2S_Init+0x1a4>
 800368c:	4b36      	ldr	r3, [pc, #216]	; (8003768 <HAL_I2S_Init+0x27c>)
 800368e:	e001      	b.n	8003694 <HAL_I2S_Init+0x1a8>
 8003690:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	4932      	ldr	r1, [pc, #200]	; (8003764 <HAL_I2S_Init+0x278>)
 800369c:	428a      	cmp	r2, r1
 800369e:	d101      	bne.n	80036a4 <HAL_I2S_Init+0x1b8>
 80036a0:	4a31      	ldr	r2, [pc, #196]	; (8003768 <HAL_I2S_Init+0x27c>)
 80036a2:	e001      	b.n	80036a8 <HAL_I2S_Init+0x1bc>
 80036a4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80036a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036ac:	f023 030f 	bic.w	r3, r3, #15
 80036b0:	61d3      	str	r3, [r2, #28]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a2b      	ldr	r2, [pc, #172]	; (8003764 <HAL_I2S_Init+0x278>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d101      	bne.n	80036c0 <HAL_I2S_Init+0x1d4>
 80036bc:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <HAL_I2S_Init+0x27c>)
 80036be:	e001      	b.n	80036c4 <HAL_I2S_Init+0x1d8>
 80036c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c4:	2202      	movs	r2, #2
 80036c6:	621a      	str	r2, [r3, #32]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a25      	ldr	r2, [pc, #148]	; (8003764 <HAL_I2S_Init+0x278>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_I2S_Init+0x1ea>
 80036d2:	4b25      	ldr	r3, [pc, #148]	; (8003768 <HAL_I2S_Init+0x27c>)
 80036d4:	e001      	b.n	80036da <HAL_I2S_Init+0x1ee>
 80036d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	817b      	strh	r3, [r7, #10]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e6:	d003      	beq.n	80036f0 <HAL_I2S_Init+0x204>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d103      	bne.n	80036f8 <HAL_I2S_Init+0x20c>
 80036f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	e001      	b.n	80036fc <HAL_I2S_Init+0x210>
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	b29a      	uxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	b29b      	uxth	r3, r3
 8003706:	4313      	orrs	r3, r2
 8003708:	b29a      	uxth	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	b29b      	uxth	r3, r3
 8003710:	4313      	orrs	r3, r2
 8003712:	b29a      	uxth	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	b29b      	uxth	r3, r3
 800371a:	4313      	orrs	r3, r2
 800371c:	b29a      	uxth	r2, r3
 800371e:	897b      	ldrh	r3, [r7, #10]
 8003720:	4313      	orrs	r3, r2
 8003722:	b29b      	uxth	r3, r3
 8003724:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003728:	817b      	strh	r3, [r7, #10]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a0d      	ldr	r2, [pc, #52]	; (8003764 <HAL_I2S_Init+0x278>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d101      	bne.n	8003738 <HAL_I2S_Init+0x24c>
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <HAL_I2S_Init+0x27c>)
 8003736:	e001      	b.n	800373c <HAL_I2S_Init+0x250>
 8003738:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800373c:	897a      	ldrh	r2, [r7, #10]
 800373e:	61da      	str	r2, [r3, #28]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800374e:	2300      	movs	r3, #0
 8003750:	4618      	mov	r0, r3
 8003752:	3720      	adds	r7, #32
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	08003863 	.word	0x08003863
 800375c:	cccccccd 	.word	0xcccccccd
 8003760:	08003979 	.word	0x08003979
 8003764:	40003800 	.word	0x40003800
 8003768:	40003400 	.word	0x40003400

0800376c <HAL_I2S_TxCpltCallback>:
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_I2S_RxCpltCallback>:
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_I2S_ErrorCallback>:
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <I2S_Transmit_IT>:
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	881a      	ldrh	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	1c9a      	adds	r2, r3, #2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10e      	bne.n	80037fc <I2S_Transmit_IT+0x54>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff ffb8 	bl	800376c <HAL_I2S_TxCpltCallback>
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <I2S_Receive_IT>:
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	b292      	uxth	r2, r2
 8003818:	801a      	strh	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	1c9a      	adds	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	865a      	strh	r2, [r3, #50]	; 0x32
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10e      	bne.n	800385a <I2S_Receive_IT+0x56>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ff93 	bl	8003780 <HAL_I2S_RxCpltCallback>
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <I2S_IRQHandler>:
 8003862:	b580      	push	{r7, lr}
 8003864:	b086      	sub	sp, #24
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b04      	cmp	r3, #4
 800387c:	d13a      	bne.n	80038f4 <I2S_IRQHandler+0x92>
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d109      	bne.n	800389c <I2S_IRQHandler+0x3a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003892:	2b40      	cmp	r3, #64	; 0x40
 8003894:	d102      	bne.n	800389c <I2S_IRQHandler+0x3a>
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ffb4 	bl	8003804 <I2S_Receive_IT>
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	2b40      	cmp	r3, #64	; 0x40
 80038a4:	d126      	bne.n	80038f4 <I2S_IRQHandler+0x92>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d11f      	bne.n	80038f4 <I2S_IRQHandler+0x92>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f043 0202 	orr.w	r2, r3, #2
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	645a      	str	r2, [r3, #68]	; 0x44
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ff50 	bl	8003794 <HAL_I2S_ErrorCallback>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d136      	bne.n	800396e <I2S_IRQHandler+0x10c>
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b02      	cmp	r3, #2
 8003908:	d109      	bne.n	800391e <I2S_IRQHandler+0xbc>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b80      	cmp	r3, #128	; 0x80
 8003916:	d102      	bne.n	800391e <I2S_IRQHandler+0xbc>
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ff45 	bl	80037a8 <I2S_Transmit_IT>
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b08      	cmp	r3, #8
 8003926:	d122      	bne.n	800396e <I2S_IRQHandler+0x10c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b20      	cmp	r3, #32
 8003934:	d11b      	bne.n	800396e <I2S_IRQHandler+0x10c>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003960:	f043 0204 	orr.w	r2, r3, #4
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	645a      	str	r2, [r3, #68]	; 0x44
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ff13 	bl	8003794 <HAL_I2S_ErrorCallback>
 800396e:	bf00      	nop
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_I2SEx_FullDuplex_IRQHandler>:
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a92      	ldr	r2, [pc, #584]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d101      	bne.n	8003996 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003992:	4b92      	ldr	r3, [pc, #584]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003994:	e001      	b.n	800399a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003996:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a8b      	ldr	r2, [pc, #556]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d101      	bne.n	80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80039b0:	4b8a      	ldr	r3, [pc, #552]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039b2:	e001      	b.n	80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80039b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c4:	d004      	beq.n	80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 8099 	bne.w	8003b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d107      	bne.n	80039ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f925 	bl	8003c34 <I2SEx_TxISR_I2S>
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d107      	bne.n	8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f9c8 	bl	8003d94 <I2SEx_RxISR_I2SExt>
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d13a      	bne.n	8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d035      	beq.n	8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a6e      	ldr	r2, [pc, #440]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d101      	bne.n	8003a26 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003a22:	4b6e      	ldr	r3, [pc, #440]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a24:	e001      	b.n	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003a26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4969      	ldr	r1, [pc, #420]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a32:	428b      	cmp	r3, r1
 8003a34:	d101      	bne.n	8003a3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003a36:	4b69      	ldr	r3, [pc, #420]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a38:	e001      	b.n	8003a3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003a3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f043 0202 	orr.w	r2, r3, #2
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fe88 	bl	8003794 <HAL_I2S_ErrorCallback>
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	f040 80c3 	bne.w	8003c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80bd 	beq.w	8003c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a49      	ldr	r2, [pc, #292]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d101      	bne.n	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ab6:	4b49      	ldr	r3, [pc, #292]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ab8:	e001      	b.n	8003abe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003aba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4944      	ldr	r1, [pc, #272]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ac6:	428b      	cmp	r3, r1
 8003ac8:	d101      	bne.n	8003ace <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003aca:	4b44      	ldr	r3, [pc, #272]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003acc:	e001      	b.n	8003ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ace:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	f043 0204 	orr.w	r2, r3, #4
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fe4a 	bl	8003794 <HAL_I2S_ErrorCallback>
 8003b00:	e089      	b.n	8003c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d107      	bne.n	8003b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f8be 	bl	8003c98 <I2SEx_TxISR_I2SExt>
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d107      	bne.n	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f8fd 	bl	8003d30 <I2SEx_RxISR_I2S>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d12f      	bne.n	8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d02a      	beq.n	8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d101      	bne.n	8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b64:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b66:	e001      	b.n	8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4919      	ldr	r1, [pc, #100]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b74:	428b      	cmp	r3, r1
 8003b76:	d101      	bne.n	8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b78:	4b18      	ldr	r3, [pc, #96]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b7a:	e001      	b.n	8003b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f043 0202 	orr.w	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff fdfa 	bl	8003794 <HAL_I2S_ErrorCallback>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d136      	bne.n	8003c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d031      	beq.n	8003c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d101      	bne.n	8003bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bc0:	e001      	b.n	8003bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003bc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4902      	ldr	r1, [pc, #8]	; (8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bce:	428b      	cmp	r3, r1
 8003bd0:	d106      	bne.n	8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003bd2:	4b02      	ldr	r3, [pc, #8]	; (8003bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bd4:	e006      	b.n	8003be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003bd6:	bf00      	nop
 8003bd8:	40003800 	.word	0x40003800
 8003bdc:	40003400 	.word	0x40003400
 8003be0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003be4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f043 0204 	orr.w	r2, r3, #4
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff fdc0 	bl	8003794 <HAL_I2S_ErrorCallback>
 8003c14:	e000      	b.n	8003c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003c16:	bf00      	nop
 8003c18:	bf00      	nop
 8003c1a:	3720      	adds	r7, #32
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_I2SEx_TxRxCpltCallback>:
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <I2SEx_TxISR_I2S>:
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	1c99      	adds	r1, r3, #2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6251      	str	r1, [r2, #36]	; 0x24
 8003c46:	881a      	ldrh	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60da      	str	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d113      	bne.n	8003c8e <I2SEx_TxISR_I2S+0x5a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <I2SEx_TxISR_I2S+0x5a>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ffc9 	bl	8003c20 <HAL_I2SEx_TxRxCpltCallback>
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <I2SEx_TxISR_I2SExt>:
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	1c99      	adds	r1, r3, #2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6251      	str	r1, [r2, #36]	; 0x24
 8003caa:	8819      	ldrh	r1, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <I2SEx_TxISR_I2SExt+0x90>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <I2SEx_TxISR_I2SExt+0x22>
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <I2SEx_TxISR_I2SExt+0x94>)
 8003cb8:	e001      	b.n	8003cbe <I2SEx_TxISR_I2SExt+0x26>
 8003cba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cbe:	460a      	mov	r2, r1
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d121      	bne.n	8003d1e <I2SEx_TxISR_I2SExt+0x86>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <I2SEx_TxISR_I2SExt+0x90>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d101      	bne.n	8003ce8 <I2SEx_TxISR_I2SExt+0x50>
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <I2SEx_TxISR_I2SExt+0x94>)
 8003ce6:	e001      	b.n	8003cec <I2SEx_TxISR_I2SExt+0x54>
 8003ce8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	490d      	ldr	r1, [pc, #52]	; (8003d28 <I2SEx_TxISR_I2SExt+0x90>)
 8003cf4:	428b      	cmp	r3, r1
 8003cf6:	d101      	bne.n	8003cfc <I2SEx_TxISR_I2SExt+0x64>
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <I2SEx_TxISR_I2SExt+0x94>)
 8003cfa:	e001      	b.n	8003d00 <I2SEx_TxISR_I2SExt+0x68>
 8003cfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d106      	bne.n	8003d1e <I2SEx_TxISR_I2SExt+0x86>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff ff81 	bl	8003c20 <HAL_I2SEx_TxRxCpltCallback>
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40003800 	.word	0x40003800
 8003d2c:	40003400 	.word	0x40003400

08003d30 <I2SEx_RxISR_I2S>:
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68d8      	ldr	r0, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	1c99      	adds	r1, r3, #2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d48:	b282      	uxth	r2, r0
 8003d4a:	801a      	strh	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	865a      	strh	r2, [r3, #50]	; 0x32
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d113      	bne.n	8003d8c <I2SEx_RxISR_I2S+0x5c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <I2SEx_RxISR_I2S+0x5c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ff4a 	bl	8003c20 <HAL_I2SEx_TxRxCpltCallback>
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <I2SEx_RxISR_I2SExt>:
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a20      	ldr	r2, [pc, #128]	; (8003e24 <I2SEx_RxISR_I2SExt+0x90>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d101      	bne.n	8003daa <I2SEx_RxISR_I2SExt+0x16>
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <I2SEx_RxISR_I2SExt+0x94>)
 8003da8:	e001      	b.n	8003dae <I2SEx_RxISR_I2SExt+0x1a>
 8003daa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dae:	68d8      	ldr	r0, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	1c99      	adds	r1, r3, #2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003dba:	b282      	uxth	r2, r0
 8003dbc:	801a      	strh	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	865a      	strh	r2, [r3, #50]	; 0x32
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d121      	bne.n	8003e1a <I2SEx_RxISR_I2SExt+0x86>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <I2SEx_RxISR_I2SExt+0x90>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d101      	bne.n	8003de4 <I2SEx_RxISR_I2SExt+0x50>
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <I2SEx_RxISR_I2SExt+0x94>)
 8003de2:	e001      	b.n	8003de8 <I2SEx_RxISR_I2SExt+0x54>
 8003de4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	490d      	ldr	r1, [pc, #52]	; (8003e24 <I2SEx_RxISR_I2SExt+0x90>)
 8003df0:	428b      	cmp	r3, r1
 8003df2:	d101      	bne.n	8003df8 <I2SEx_RxISR_I2SExt+0x64>
 8003df4:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <I2SEx_RxISR_I2SExt+0x94>)
 8003df6:	e001      	b.n	8003dfc <I2SEx_RxISR_I2SExt+0x68>
 8003df8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dfc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <I2SEx_RxISR_I2SExt+0x86>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff ff03 	bl	8003c20 <HAL_I2SEx_TxRxCpltCallback>
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40003800 	.word	0x40003800
 8003e28:	40003400 	.word	0x40003400

08003e2c <HAL_RCC_OscConfig>:
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCC_OscConfig+0x12>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e267      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d075      	beq.n	8003f36 <HAL_RCC_OscConfig+0x10a>
 8003e4a:	4b88      	ldr	r3, [pc, #544]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d00c      	beq.n	8003e70 <HAL_RCC_OscConfig+0x44>
 8003e56:	4b85      	ldr	r3, [pc, #532]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d112      	bne.n	8003e88 <HAL_RCC_OscConfig+0x5c>
 8003e62:	4b82      	ldr	r3, [pc, #520]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e6e:	d10b      	bne.n	8003e88 <HAL_RCC_OscConfig+0x5c>
 8003e70:	4b7e      	ldr	r3, [pc, #504]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d05b      	beq.n	8003f34 <HAL_RCC_OscConfig+0x108>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d157      	bne.n	8003f34 <HAL_RCC_OscConfig+0x108>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e242      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e90:	d106      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x74>
 8003e92:	4b76      	ldr	r3, [pc, #472]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a75      	ldr	r2, [pc, #468]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e01d      	b.n	8003edc <HAL_RCC_OscConfig+0xb0>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x98>
 8003eaa:	4b70      	ldr	r3, [pc, #448]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a6f      	ldr	r2, [pc, #444]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	4b6d      	ldr	r3, [pc, #436]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a6c      	ldr	r2, [pc, #432]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e00b      	b.n	8003edc <HAL_RCC_OscConfig+0xb0>
 8003ec4:	4b69      	ldr	r3, [pc, #420]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a68      	ldr	r2, [pc, #416]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	4b66      	ldr	r3, [pc, #408]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a65      	ldr	r2, [pc, #404]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d013      	beq.n	8003f0c <HAL_RCC_OscConfig+0xe0>
 8003ee4:	f7fd fa9a 	bl	800141c <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0xd2>
 8003eec:	f7fd fa96 	bl	800141c <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	; 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0xd2>
 8003efa:	2303      	movs	r3, #3
 8003efc:	e207      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 8003efe:	4b5b      	ldr	r3, [pc, #364]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCC_OscConfig+0xc0>
 8003f0a:	e014      	b.n	8003f36 <HAL_RCC_OscConfig+0x10a>
 8003f0c:	f7fd fa86 	bl	800141c <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0xfa>
 8003f14:	f7fd fa82 	bl	800141c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	; 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0xfa>
 8003f22:	2303      	movs	r3, #3
 8003f24:	e1f3      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 8003f26:	4b51      	ldr	r3, [pc, #324]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0xe8>
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x10a>
 8003f34:	bf00      	nop
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d063      	beq.n	800400a <HAL_RCC_OscConfig+0x1de>
 8003f42:	4b4a      	ldr	r3, [pc, #296]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <HAL_RCC_OscConfig+0x13a>
 8003f4e:	4b47      	ldr	r3, [pc, #284]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d11c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x168>
 8003f5a:	4b44      	ldr	r3, [pc, #272]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d116      	bne.n	8003f94 <HAL_RCC_OscConfig+0x168>
 8003f66:	4b41      	ldr	r3, [pc, #260]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_RCC_OscConfig+0x152>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d001      	beq.n	8003f7e <HAL_RCC_OscConfig+0x152>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e1c7      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 8003f7e:	4b3b      	ldr	r3, [pc, #236]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4937      	ldr	r1, [pc, #220]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]
 8003f92:	e03a      	b.n	800400a <HAL_RCC_OscConfig+0x1de>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d020      	beq.n	8003fde <HAL_RCC_OscConfig+0x1b2>
 8003f9c:	4b34      	ldr	r3, [pc, #208]	; (8004070 <HAL_RCC_OscConfig+0x244>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f7fd fa3b 	bl	800141c <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x190>
 8003faa:	f7fd fa37 	bl	800141c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x190>
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e1a8      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 8003fbc:	4b2b      	ldr	r3, [pc, #172]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x17e>
 8003fc8:	4b28      	ldr	r3, [pc, #160]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	4925      	ldr	r1, [pc, #148]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	600b      	str	r3, [r1, #0]
 8003fdc:	e015      	b.n	800400a <HAL_RCC_OscConfig+0x1de>
 8003fde:	4b24      	ldr	r3, [pc, #144]	; (8004070 <HAL_RCC_OscConfig+0x244>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	f7fd fa1a 	bl	800141c <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x1d2>
 8003fec:	f7fd fa16 	bl	800141c <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x1d2>
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e187      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x1c0>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d036      	beq.n	8004084 <HAL_RCC_OscConfig+0x258>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d016      	beq.n	800404c <HAL_RCC_OscConfig+0x220>
 800401e:	4b15      	ldr	r3, [pc, #84]	; (8004074 <HAL_RCC_OscConfig+0x248>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	f7fd f9fa 	bl	800141c <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x212>
 800402c:	f7fd f9f6 	bl	800141c <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x212>
 800403a:	2303      	movs	r3, #3
 800403c:	e167      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 800403e:	4b0b      	ldr	r3, [pc, #44]	; (800406c <HAL_RCC_OscConfig+0x240>)
 8004040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x200>
 800404a:	e01b      	b.n	8004084 <HAL_RCC_OscConfig+0x258>
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <HAL_RCC_OscConfig+0x248>)
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	f7fd f9e3 	bl	800141c <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]
 8004058:	e00e      	b.n	8004078 <HAL_RCC_OscConfig+0x24c>
 800405a:	f7fd f9df 	bl	800141c <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d907      	bls.n	8004078 <HAL_RCC_OscConfig+0x24c>
 8004068:	2303      	movs	r3, #3
 800406a:	e150      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 800406c:	40023800 	.word	0x40023800
 8004070:	42470000 	.word	0x42470000
 8004074:	42470e80 	.word	0x42470e80
 8004078:	4b88      	ldr	r3, [pc, #544]	; (800429c <HAL_RCC_OscConfig+0x470>)
 800407a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ea      	bne.n	800405a <HAL_RCC_OscConfig+0x22e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8097 	beq.w	80041c0 <HAL_RCC_OscConfig+0x394>
 8004092:	2300      	movs	r3, #0
 8004094:	75fb      	strb	r3, [r7, #23]
 8004096:	4b81      	ldr	r3, [pc, #516]	; (800429c <HAL_RCC_OscConfig+0x470>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10f      	bne.n	80040c2 <HAL_RCC_OscConfig+0x296>
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	4b7d      	ldr	r3, [pc, #500]	; (800429c <HAL_RCC_OscConfig+0x470>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	4a7c      	ldr	r2, [pc, #496]	; (800429c <HAL_RCC_OscConfig+0x470>)
 80040ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b0:	6413      	str	r3, [r2, #64]	; 0x40
 80040b2:	4b7a      	ldr	r3, [pc, #488]	; (800429c <HAL_RCC_OscConfig+0x470>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2301      	movs	r3, #1
 80040c0:	75fb      	strb	r3, [r7, #23]
 80040c2:	4b77      	ldr	r3, [pc, #476]	; (80042a0 <HAL_RCC_OscConfig+0x474>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d118      	bne.n	8004100 <HAL_RCC_OscConfig+0x2d4>
 80040ce:	4b74      	ldr	r3, [pc, #464]	; (80042a0 <HAL_RCC_OscConfig+0x474>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a73      	ldr	r2, [pc, #460]	; (80042a0 <HAL_RCC_OscConfig+0x474>)
 80040d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	f7fd f99f 	bl	800141c <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x2c8>
 80040e2:	f7fd f99b 	bl	800141c <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x2c8>
 80040f0:	2303      	movs	r3, #3
 80040f2:	e10c      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 80040f4:	4b6a      	ldr	r3, [pc, #424]	; (80042a0 <HAL_RCC_OscConfig+0x474>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCC_OscConfig+0x2b6>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d106      	bne.n	8004116 <HAL_RCC_OscConfig+0x2ea>
 8004108:	4b64      	ldr	r3, [pc, #400]	; (800429c <HAL_RCC_OscConfig+0x470>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	4a63      	ldr	r2, [pc, #396]	; (800429c <HAL_RCC_OscConfig+0x470>)
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6713      	str	r3, [r2, #112]	; 0x70
 8004114:	e01c      	b.n	8004150 <HAL_RCC_OscConfig+0x324>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b05      	cmp	r3, #5
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x30c>
 800411e:	4b5f      	ldr	r3, [pc, #380]	; (800429c <HAL_RCC_OscConfig+0x470>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	4a5e      	ldr	r2, [pc, #376]	; (800429c <HAL_RCC_OscConfig+0x470>)
 8004124:	f043 0304 	orr.w	r3, r3, #4
 8004128:	6713      	str	r3, [r2, #112]	; 0x70
 800412a:	4b5c      	ldr	r3, [pc, #368]	; (800429c <HAL_RCC_OscConfig+0x470>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	4a5b      	ldr	r2, [pc, #364]	; (800429c <HAL_RCC_OscConfig+0x470>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	6713      	str	r3, [r2, #112]	; 0x70
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0x324>
 8004138:	4b58      	ldr	r3, [pc, #352]	; (800429c <HAL_RCC_OscConfig+0x470>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413c:	4a57      	ldr	r2, [pc, #348]	; (800429c <HAL_RCC_OscConfig+0x470>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	6713      	str	r3, [r2, #112]	; 0x70
 8004144:	4b55      	ldr	r3, [pc, #340]	; (800429c <HAL_RCC_OscConfig+0x470>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	4a54      	ldr	r2, [pc, #336]	; (800429c <HAL_RCC_OscConfig+0x470>)
 800414a:	f023 0304 	bic.w	r3, r3, #4
 800414e:	6713      	str	r3, [r2, #112]	; 0x70
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_RCC_OscConfig+0x358>
 8004158:	f7fd f960 	bl	800141c <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x34a>
 8004160:	f7fd f95c 	bl	800141c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x34a>
 8004172:	2303      	movs	r3, #3
 8004174:	e0cb      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 8004176:	4b49      	ldr	r3, [pc, #292]	; (800429c <HAL_RCC_OscConfig+0x470>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0ee      	beq.n	8004160 <HAL_RCC_OscConfig+0x334>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x382>
 8004184:	f7fd f94a 	bl	800141c <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_OscConfig+0x376>
 800418c:	f7fd f946 	bl	800141c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	; 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x376>
 800419e:	2303      	movs	r3, #3
 80041a0:	e0b5      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 80041a2:	4b3e      	ldr	r3, [pc, #248]	; (800429c <HAL_RCC_OscConfig+0x470>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1ee      	bne.n	800418c <HAL_RCC_OscConfig+0x360>
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d105      	bne.n	80041c0 <HAL_RCC_OscConfig+0x394>
 80041b4:	4b39      	ldr	r3, [pc, #228]	; (800429c <HAL_RCC_OscConfig+0x470>)
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	4a38      	ldr	r2, [pc, #224]	; (800429c <HAL_RCC_OscConfig+0x470>)
 80041ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041be:	6413      	str	r3, [r2, #64]	; 0x40
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80a1 	beq.w	800430c <HAL_RCC_OscConfig+0x4e0>
 80041ca:	4b34      	ldr	r3, [pc, #208]	; (800429c <HAL_RCC_OscConfig+0x470>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d05c      	beq.n	8004290 <HAL_RCC_OscConfig+0x464>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d141      	bne.n	8004262 <HAL_RCC_OscConfig+0x436>
 80041de:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <HAL_RCC_OscConfig+0x478>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f7fd f91a 	bl	800141c <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x3d2>
 80041ec:	f7fd f916 	bl	800141c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x3d2>
 80041fa:	2303      	movs	r3, #3
 80041fc:	e087      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 80041fe:	4b27      	ldr	r3, [pc, #156]	; (800429c <HAL_RCC_OscConfig+0x470>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x3c0>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	019b      	lsls	r3, r3, #6
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	085b      	lsrs	r3, r3, #1
 8004222:	3b01      	subs	r3, #1
 8004224:	041b      	lsls	r3, r3, #16
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	061b      	lsls	r3, r3, #24
 800422e:	491b      	ldr	r1, [pc, #108]	; (800429c <HAL_RCC_OscConfig+0x470>)
 8004230:	4313      	orrs	r3, r2
 8004232:	604b      	str	r3, [r1, #4]
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <HAL_RCC_OscConfig+0x478>)
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	f7fd f8ef 	bl	800141c <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x428>
 8004242:	f7fd f8eb 	bl	800141c <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x428>
 8004250:	2303      	movs	r3, #3
 8004252:	e05c      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 8004254:	4b11      	ldr	r3, [pc, #68]	; (800429c <HAL_RCC_OscConfig+0x470>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCC_OscConfig+0x416>
 8004260:	e054      	b.n	800430c <HAL_RCC_OscConfig+0x4e0>
 8004262:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <HAL_RCC_OscConfig+0x478>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	f7fd f8d8 	bl	800141c <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x456>
 8004270:	f7fd f8d4 	bl	800141c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x456>
 800427e:	2303      	movs	r3, #3
 8004280:	e045      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <HAL_RCC_OscConfig+0x470>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x444>
 800428e:	e03d      	b.n	800430c <HAL_RCC_OscConfig+0x4e0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_OscConfig+0x47c>
 8004298:	2301      	movs	r3, #1
 800429a:	e038      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 800429c:	40023800 	.word	0x40023800
 80042a0:	40007000 	.word	0x40007000
 80042a4:	42470060 	.word	0x42470060
 80042a8:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <HAL_RCC_OscConfig+0x4ec>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d028      	beq.n	8004308 <HAL_RCC_OscConfig+0x4dc>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d121      	bne.n	8004308 <HAL_RCC_OscConfig+0x4dc>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d11a      	bne.n	8004308 <HAL_RCC_OscConfig+0x4dc>
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042d8:	4013      	ands	r3, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042de:	0192      	lsls	r2, r2, #6
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d111      	bne.n	8004308 <HAL_RCC_OscConfig+0x4dc>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	085b      	lsrs	r3, r3, #1
 80042f0:	3b01      	subs	r3, #1
 80042f2:	041b      	lsls	r3, r3, #16
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d107      	bne.n	8004308 <HAL_RCC_OscConfig+0x4dc>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	061b      	lsls	r3, r3, #24
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_OscConfig+0x4e0>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <HAL_RCC_OscConfig+0x4e2>
 800430c:	2300      	movs	r3, #0
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40023800 	.word	0x40023800

0800431c <HAL_RCC_ClockConfig>:
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_RCC_ClockConfig+0x14>
 800432c:	2301      	movs	r3, #1
 800432e:	e0cc      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ae>
 8004330:	4b68      	ldr	r3, [pc, #416]	; (80044d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d90c      	bls.n	8004358 <HAL_RCC_ClockConfig+0x3c>
 800433e:	4b65      	ldr	r3, [pc, #404]	; (80044d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	4b63      	ldr	r3, [pc, #396]	; (80044d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d001      	beq.n	8004358 <HAL_RCC_ClockConfig+0x3c>
 8004354:	2301      	movs	r3, #1
 8004356:	e0b8      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ae>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d020      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x8a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_RCC_ClockConfig+0x60>
 8004370:	4b59      	ldr	r3, [pc, #356]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4a58      	ldr	r2, [pc, #352]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800437a:	6093      	str	r3, [r2, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <HAL_RCC_ClockConfig+0x78>
 8004388:	4b53      	ldr	r3, [pc, #332]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4a52      	ldr	r2, [pc, #328]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004392:	6093      	str	r3, [r2, #8]
 8004394:	4b50      	ldr	r3, [pc, #320]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	494d      	ldr	r1, [pc, #308]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d044      	beq.n	800443c <HAL_RCC_ClockConfig+0x120>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xae>
 80043ba:	4b47      	ldr	r3, [pc, #284]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d119      	bne.n	80043fa <HAL_RCC_ClockConfig+0xde>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e07f      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ae>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d003      	beq.n	80043da <HAL_RCC_ClockConfig+0xbe>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d107      	bne.n	80043ea <HAL_RCC_ClockConfig+0xce>
 80043da:	4b3f      	ldr	r3, [pc, #252]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d109      	bne.n	80043fa <HAL_RCC_ClockConfig+0xde>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e06f      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ae>
 80043ea:	4b3b      	ldr	r3, [pc, #236]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_RCC_ClockConfig+0xde>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e067      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ae>
 80043fa:	4b37      	ldr	r3, [pc, #220]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f023 0203 	bic.w	r2, r3, #3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4934      	ldr	r1, [pc, #208]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004408:	4313      	orrs	r3, r2
 800440a:	608b      	str	r3, [r1, #8]
 800440c:	f7fd f806 	bl	800141c <HAL_GetTick>
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	e00a      	b.n	800442a <HAL_RCC_ClockConfig+0x10e>
 8004414:	f7fd f802 	bl	800141c <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <HAL_RCC_ClockConfig+0x10e>
 8004426:	2303      	movs	r3, #3
 8004428:	e04f      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ae>
 800442a:	4b2b      	ldr	r3, [pc, #172]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 020c 	and.w	r2, r3, #12
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	429a      	cmp	r2, r3
 800443a:	d1eb      	bne.n	8004414 <HAL_RCC_ClockConfig+0xf8>
 800443c:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <HAL_RCC_ClockConfig+0x1b8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d20c      	bcs.n	8004464 <HAL_RCC_ClockConfig+0x148>
 800444a:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <HAL_RCC_ClockConfig+0x1b8>)
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d001      	beq.n	8004464 <HAL_RCC_ClockConfig+0x148>
 8004460:	2301      	movs	r3, #1
 8004462:	e032      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ae>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_RCC_ClockConfig+0x166>
 8004470:	4b19      	ldr	r3, [pc, #100]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4916      	ldr	r1, [pc, #88]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x186>
 800448e:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	490e      	ldr	r1, [pc, #56]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
 80044a2:	f000 f821 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 80044a6:	4602      	mov	r2, r0
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	091b      	lsrs	r3, r3, #4
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	490a      	ldr	r1, [pc, #40]	; (80044dc <HAL_RCC_ClockConfig+0x1c0>)
 80044b4:	5ccb      	ldrb	r3, [r1, r3]
 80044b6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ba:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <HAL_RCC_ClockConfig+0x1c8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fc ff66 	bl	8001394 <HAL_InitTick>
 80044c8:	2300      	movs	r3, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40023c00 	.word	0x40023c00
 80044d8:	40023800 	.word	0x40023800
 80044dc:	08009038 	.word	0x08009038
 80044e0:	20000000 	.word	0x20000000
 80044e4:	20000004 	.word	0x20000004

080044e8 <HAL_RCC_GetSysClockFreq>:
 80044e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044ec:	b094      	sub	sp, #80	; 0x50
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	2300      	movs	r3, #0
 80044f2:	647b      	str	r3, [r7, #68]	; 0x44
 80044f4:	2300      	movs	r3, #0
 80044f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f8:	2300      	movs	r3, #0
 80044fa:	643b      	str	r3, [r7, #64]	; 0x40
 80044fc:	2300      	movs	r3, #0
 80044fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004500:	4b79      	ldr	r3, [pc, #484]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 030c 	and.w	r3, r3, #12
 8004508:	2b08      	cmp	r3, #8
 800450a:	d00d      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0x40>
 800450c:	2b08      	cmp	r3, #8
 800450e:	f200 80e1 	bhi.w	80046d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_RCC_GetSysClockFreq+0x34>
 8004516:	2b04      	cmp	r3, #4
 8004518:	d003      	beq.n	8004522 <HAL_RCC_GetSysClockFreq+0x3a>
 800451a:	e0db      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800451c:	4b73      	ldr	r3, [pc, #460]	; (80046ec <HAL_RCC_GetSysClockFreq+0x204>)
 800451e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004520:	e0db      	b.n	80046da <HAL_RCC_GetSysClockFreq+0x1f2>
 8004522:	4b73      	ldr	r3, [pc, #460]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004524:	64bb      	str	r3, [r7, #72]	; 0x48
 8004526:	e0d8      	b.n	80046da <HAL_RCC_GetSysClockFreq+0x1f2>
 8004528:	4b6f      	ldr	r3, [pc, #444]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004530:	647b      	str	r3, [r7, #68]	; 0x44
 8004532:	4b6d      	ldr	r3, [pc, #436]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d063      	beq.n	8004606 <HAL_RCC_GetSysClockFreq+0x11e>
 800453e:	4b6a      	ldr	r3, [pc, #424]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	099b      	lsrs	r3, r3, #6
 8004544:	2200      	movs	r2, #0
 8004546:	63bb      	str	r3, [r7, #56]	; 0x38
 8004548:	63fa      	str	r2, [r7, #60]	; 0x3c
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004550:	633b      	str	r3, [r7, #48]	; 0x30
 8004552:	2300      	movs	r3, #0
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
 8004556:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800455a:	4622      	mov	r2, r4
 800455c:	462b      	mov	r3, r5
 800455e:	f04f 0000 	mov.w	r0, #0
 8004562:	f04f 0100 	mov.w	r1, #0
 8004566:	0159      	lsls	r1, r3, #5
 8004568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800456c:	0150      	lsls	r0, r2, #5
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4621      	mov	r1, r4
 8004574:	1a51      	subs	r1, r2, r1
 8004576:	6139      	str	r1, [r7, #16]
 8004578:	4629      	mov	r1, r5
 800457a:	eb63 0301 	sbc.w	r3, r3, r1
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800458c:	4659      	mov	r1, fp
 800458e:	018b      	lsls	r3, r1, #6
 8004590:	4651      	mov	r1, sl
 8004592:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004596:	4651      	mov	r1, sl
 8004598:	018a      	lsls	r2, r1, #6
 800459a:	4651      	mov	r1, sl
 800459c:	ebb2 0801 	subs.w	r8, r2, r1
 80045a0:	4659      	mov	r1, fp
 80045a2:	eb63 0901 	sbc.w	r9, r3, r1
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ba:	4690      	mov	r8, r2
 80045bc:	4699      	mov	r9, r3
 80045be:	4623      	mov	r3, r4
 80045c0:	eb18 0303 	adds.w	r3, r8, r3
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	462b      	mov	r3, r5
 80045c8:	eb49 0303 	adc.w	r3, r9, r3
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045da:	4629      	mov	r1, r5
 80045dc:	024b      	lsls	r3, r1, #9
 80045de:	4621      	mov	r1, r4
 80045e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045e4:	4621      	mov	r1, r4
 80045e6:	024a      	lsls	r2, r1, #9
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ee:	2200      	movs	r2, #0
 80045f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045f8:	f7fb fde6 	bl	80001c8 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4613      	mov	r3, r2
 8004602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004604:	e058      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0x1d0>
 8004606:	4b38      	ldr	r3, [pc, #224]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	099b      	lsrs	r3, r3, #6
 800460c:	2200      	movs	r2, #0
 800460e:	4618      	mov	r0, r3
 8004610:	4611      	mov	r1, r2
 8004612:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
 800461c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004620:	4642      	mov	r2, r8
 8004622:	464b      	mov	r3, r9
 8004624:	f04f 0000 	mov.w	r0, #0
 8004628:	f04f 0100 	mov.w	r1, #0
 800462c:	0159      	lsls	r1, r3, #5
 800462e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004632:	0150      	lsls	r0, r2, #5
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4641      	mov	r1, r8
 800463a:	ebb2 0a01 	subs.w	sl, r2, r1
 800463e:	4649      	mov	r1, r9
 8004640:	eb63 0b01 	sbc.w	fp, r3, r1
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004650:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004654:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004658:	ebb2 040a 	subs.w	r4, r2, sl
 800465c:	eb63 050b 	sbc.w	r5, r3, fp
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	00eb      	lsls	r3, r5, #3
 800466a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800466e:	00e2      	lsls	r2, r4, #3
 8004670:	4614      	mov	r4, r2
 8004672:	461d      	mov	r5, r3
 8004674:	4643      	mov	r3, r8
 8004676:	18e3      	adds	r3, r4, r3
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	464b      	mov	r3, r9
 800467c:	eb45 0303 	adc.w	r3, r5, r3
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800468e:	4629      	mov	r1, r5
 8004690:	028b      	lsls	r3, r1, #10
 8004692:	4621      	mov	r1, r4
 8004694:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004698:	4621      	mov	r1, r4
 800469a:	028a      	lsls	r2, r1, #10
 800469c:	4610      	mov	r0, r2
 800469e:	4619      	mov	r1, r3
 80046a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a2:	2200      	movs	r2, #0
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	61fa      	str	r2, [r7, #28]
 80046a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ac:	f7fb fd8c 	bl	80001c8 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4613      	mov	r3, r2
 80046b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	3301      	adds	r3, #1
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	643b      	str	r3, [r7, #64]	; 0x40
 80046c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80046d2:	e002      	b.n	80046da <HAL_RCC_GetSysClockFreq+0x1f2>
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCC_GetSysClockFreq+0x204>)
 80046d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046d8:	bf00      	nop
 80046da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046dc:	4618      	mov	r0, r3
 80046de:	3750      	adds	r7, #80	; 0x50
 80046e0:	46bd      	mov	sp, r7
 80046e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800
 80046ec:	00f42400 	.word	0x00f42400
 80046f0:	007a1200 	.word	0x007a1200

080046f4 <HAL_RCC_GetHCLKFreq>:
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <HAL_RCC_GetHCLKFreq+0x14>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000000 	.word	0x20000000

0800470c <HAL_RCC_GetPCLK1Freq>:
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
 8004710:	f7ff fff0 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b05      	ldr	r3, [pc, #20]	; (800472c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0a9b      	lsrs	r3, r3, #10
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4903      	ldr	r1, [pc, #12]	; (8004730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
 8004728:	4618      	mov	r0, r3
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40023800 	.word	0x40023800
 8004730:	08009048 	.word	0x08009048

08004734 <HAL_RCCEx_PeriphCLKConfig>:
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	2300      	movs	r3, #0
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d035      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800475c:	4b62      	ldr	r3, [pc, #392]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	f7fc fe5b 	bl	800141c <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]
 8004768:	e008      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x48>
 800476a:	f7fc fe57 	bl	800141c <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004778:	2303      	movs	r3, #3
 800477a:	e0b0      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800477c:	4b5b      	ldr	r3, [pc, #364]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f0      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x36>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	019a      	lsls	r2, r3, #6
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	071b      	lsls	r3, r3, #28
 8004794:	4955      	ldr	r1, [pc, #340]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800479c:	4b52      	ldr	r3, [pc, #328]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	f7fc fe3b 	bl	800141c <HAL_GetTick>
 80047a6:	6178      	str	r0, [r7, #20]
 80047a8:	e008      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x88>
 80047aa:	f7fc fe37 	bl	800141c <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x88>
 80047b8:	2303      	movs	r3, #3
 80047ba:	e090      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80047bc:	4b4b      	ldr	r3, [pc, #300]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8083 	beq.w	80048dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	4b44      	ldr	r3, [pc, #272]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a43      	ldr	r2, [pc, #268]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b41      	ldr	r3, [pc, #260]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4b3f      	ldr	r3, [pc, #252]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a3e      	ldr	r2, [pc, #248]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	f7fc fe0d 	bl	800141c <HAL_GetTick>
 8004802:	6178      	str	r0, [r7, #20]
 8004804:	e008      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8004806:	f7fc fe09 	bl	800141c <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8004814:	2303      	movs	r3, #3
 8004816:	e062      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004818:	4b35      	ldr	r3, [pc, #212]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8004824:	4b31      	ldr	r3, [pc, #196]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d02f      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	429a      	cmp	r2, r3
 8004840:	d028      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004842:	4b2a      	ldr	r3, [pc, #168]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	4b28      	ldr	r3, [pc, #160]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	4a24      	ldr	r2, [pc, #144]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	6713      	str	r3, [r2, #112]	; 0x70
 800485e:	4b23      	ldr	r3, [pc, #140]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b01      	cmp	r3, #1
 8004868:	d114      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800486a:	f7fc fdd7 	bl	800141c <HAL_GetTick>
 800486e:	6178      	str	r0, [r7, #20]
 8004870:	e00a      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004872:	f7fc fdd3 	bl	800141c <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004884:	2303      	movs	r3, #3
 8004886:	e02a      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004888:	4b18      	ldr	r3, [pc, #96]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ee      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048a0:	d10d      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80048a2:	4b12      	ldr	r3, [pc, #72]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80048b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b6:	490d      	ldr	r1, [pc, #52]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	608b      	str	r3, [r1, #8]
 80048bc:	e005      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	4a0a      	ldr	r2, [pc, #40]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048c8:	6093      	str	r3, [r2, #8]
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d6:	4905      	ldr	r1, [pc, #20]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	670b      	str	r3, [r1, #112]	; 0x70
 80048dc:	2300      	movs	r3, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	42470068 	.word	0x42470068
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40007000 	.word	0x40007000
 80048f4:	42470e40 	.word	0x42470e40

080048f8 <HAL_RCCEx_GetPeriphCLKFreq>:
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	2300      	movs	r3, #0
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	2300      	movs	r3, #0
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d13e      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8004916:	4b23      	ldr	r3, [pc, #140]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d12f      	bne.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 800492c:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e02f      	b.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004932:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800493e:	d108      	bne.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8004940:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004948:	4a18      	ldr	r2, [pc, #96]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800494a:	fbb2 f3f3 	udiv	r3, r2, r3
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	e007      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004952:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800495a:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004968:	099b      	lsrs	r3, r3, #6
 800496a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	fb02 f303 	mul.w	r3, r2, r3
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497c:	0f1b      	lsrs	r3, r3, #28
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e002      	b.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	bf00      	nop
 8004992:	bf00      	nop
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	4618      	mov	r0, r3
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800
 80049a8:	00bb8000 	.word	0x00bb8000
 80049ac:	007a1200 	.word	0x007a1200
 80049b0:	00f42400 	.word	0x00f42400

080049b4 <HAL_SPI_Init>:
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_SPI_Init+0x12>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e07b      	b.n	8004abe <HAL_SPI_Init+0x10a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d108      	bne.n	80049e0 <HAL_SPI_Init+0x2c>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d6:	d009      	beq.n	80049ec <HAL_SPI_Init+0x38>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	61da      	str	r2, [r3, #28]
 80049de:	e005      	b.n	80049ec <HAL_SPI_Init+0x38>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	611a      	str	r2, [r3, #16]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	615a      	str	r2, [r3, #20]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	629a      	str	r2, [r3, #40]	; 0x28
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_SPI_Init+0x58>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fc fba2 	bl	8001150 <HAL_SPI_MspInit>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a70:	ea42 0103 	orr.w	r1, r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	f003 0104 	and.w	r1, r3, #4
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	f003 0210 	and.w	r2, r3, #16
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aac:	61da      	str	r2, [r3, #28]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	655a      	str	r2, [r3, #84]	; 0x54
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004abc:	2300      	movs	r3, #0
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <HAL_SPI_Transmit_IT>:
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80fb      	strh	r3, [r7, #6]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	75fb      	strb	r3, [r7, #23]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_SPI_Transmit_IT+0x20>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e06f      	b.n	8004bc8 <HAL_SPI_Transmit_IT+0x100>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <HAL_SPI_Transmit_IT+0x34>
 8004af6:	88fb      	ldrh	r3, [r7, #6]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d102      	bne.n	8004b02 <HAL_SPI_Transmit_IT+0x3a>
 8004afc:	2301      	movs	r3, #1
 8004afe:	75fb      	strb	r3, [r7, #23]
 8004b00:	e05d      	b.n	8004bbe <HAL_SPI_Transmit_IT+0xf6>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d002      	beq.n	8004b14 <HAL_SPI_Transmit_IT+0x4c>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	75fb      	strb	r3, [r7, #23]
 8004b12:	e054      	b.n	8004bbe <HAL_SPI_Transmit_IT+0xf6>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2203      	movs	r2, #3
 8004b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	655a      	str	r2, [r3, #84]	; 0x54
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	88fa      	ldrh	r2, [r7, #6]
 8004b2c:	869a      	strh	r2, [r3, #52]	; 0x34
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	88fa      	ldrh	r2, [r7, #6]
 8004b32:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	639a      	str	r2, [r3, #56]	; 0x38
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_SPI_Transmit_IT+0x94>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a1f      	ldr	r2, [pc, #124]	; (8004bd4 <HAL_SPI_Transmit_IT+0x10c>)
 8004b58:	645a      	str	r2, [r3, #68]	; 0x44
 8004b5a:	e002      	b.n	8004b62 <HAL_SPI_Transmit_IT+0x9a>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <HAL_SPI_Transmit_IT+0x110>)
 8004b60:	645a      	str	r2, [r3, #68]	; 0x44
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6a:	d10f      	bne.n	8004b8c <HAL_SPI_Transmit_IT+0xc4>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004b9a:	605a      	str	r2, [r3, #4]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b40      	cmp	r3, #64	; 0x40
 8004ba8:	d008      	beq.n	8004bbc <HAL_SPI_Transmit_IT+0xf4>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e000      	b.n	8004bbe <HAL_SPI_Transmit_IT+0xf6>
 8004bbc:	bf00      	nop
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	080052f9 	.word	0x080052f9
 8004bd8:	080052b3 	.word	0x080052b3

08004bdc <HAL_SPI_Receive_IT>:
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	4613      	mov	r3, r2
 8004be8:	80fb      	strh	r3, [r7, #6]
 8004bea:	2300      	movs	r3, #0
 8004bec:	75fb      	strb	r3, [r7, #23]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d110      	bne.n	8004c18 <HAL_SPI_Receive_IT+0x3c>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bfe:	d10b      	bne.n	8004c18 <HAL_SPI_Receive_IT+0x3c>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2204      	movs	r2, #4
 8004c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f882 	bl	8004d18 <HAL_SPI_TransmitReceive_IT>
 8004c14:	4603      	mov	r3, r0
 8004c16:	e076      	b.n	8004d06 <HAL_SPI_Receive_IT+0x12a>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_SPI_Receive_IT+0x4a>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e06f      	b.n	8004d06 <HAL_SPI_Receive_IT+0x12a>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d002      	beq.n	8004c40 <HAL_SPI_Receive_IT+0x64>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	75fb      	strb	r3, [r7, #23]
 8004c3e:	e05d      	b.n	8004cfc <HAL_SPI_Receive_IT+0x120>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_SPI_Receive_IT+0x70>
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <HAL_SPI_Receive_IT+0x76>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	75fb      	strb	r3, [r7, #23]
 8004c50:	e054      	b.n	8004cfc <HAL_SPI_Receive_IT+0x120>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2204      	movs	r2, #4
 8004c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	88fa      	ldrh	r2, [r7, #6]
 8004c6a:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	88fa      	ldrh	r2, [r7, #6]
 8004c70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	869a      	strh	r2, [r3, #52]	; 0x34
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	645a      	str	r2, [r3, #68]	; 0x44
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_SPI_Receive_IT+0xbe>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a1e      	ldr	r2, [pc, #120]	; (8004d10 <HAL_SPI_Receive_IT+0x134>)
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40
 8004c98:	e002      	b.n	8004ca0 <HAL_SPI_Receive_IT+0xc4>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <HAL_SPI_Receive_IT+0x138>)
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca8:	d10f      	bne.n	8004cca <HAL_SPI_Receive_IT+0xee>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce4:	2b40      	cmp	r3, #64	; 0x40
 8004ce6:	d008      	beq.n	8004cfa <HAL_SPI_Receive_IT+0x11e>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	e000      	b.n	8004cfc <HAL_SPI_Receive_IT+0x120>
 8004cfa:	bf00      	nop
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	0800526d 	.word	0x0800526d
 8004d14:	08005223 	.word	0x08005223

08004d18 <HAL_SPI_TransmitReceive_IT>:
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	807b      	strh	r3, [r7, #2]
 8004d26:	2300      	movs	r3, #0
 8004d28:	75fb      	strb	r3, [r7, #23]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_SPI_TransmitReceive_IT+0x20>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e075      	b.n	8004e24 <HAL_SPI_TransmitReceive_IT+0x10c>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d46:	75bb      	strb	r3, [r7, #22]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	7dbb      	ldrb	r3, [r7, #22]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d00d      	beq.n	8004d70 <HAL_SPI_TransmitReceive_IT+0x58>
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d5a:	d106      	bne.n	8004d6a <HAL_SPI_TransmitReceive_IT+0x52>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <HAL_SPI_TransmitReceive_IT+0x52>
 8004d64:	7dbb      	ldrb	r3, [r7, #22]
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d002      	beq.n	8004d70 <HAL_SPI_TransmitReceive_IT+0x58>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	75fb      	strb	r3, [r7, #23]
 8004d6e:	e054      	b.n	8004e1a <HAL_SPI_TransmitReceive_IT+0x102>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004d7c:	887b      	ldrh	r3, [r7, #2]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d102      	bne.n	8004d88 <HAL_SPI_TransmitReceive_IT+0x70>
 8004d82:	2301      	movs	r3, #1
 8004d84:	75fb      	strb	r3, [r7, #23]
 8004d86:	e048      	b.n	8004e1a <HAL_SPI_TransmitReceive_IT+0x102>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d003      	beq.n	8004d9c <HAL_SPI_TransmitReceive_IT+0x84>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2205      	movs	r2, #5
 8004d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	655a      	str	r2, [r3, #84]	; 0x54
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	887a      	ldrh	r2, [r7, #2]
 8004dac:	869a      	strh	r2, [r3, #52]	; 0x34
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	887a      	ldrh	r2, [r7, #2]
 8004db2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	887a      	ldrh	r2, [r7, #2]
 8004dbe:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	887a      	ldrh	r2, [r7, #2]
 8004dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d006      	beq.n	8004ddc <HAL_SPI_TransmitReceive_IT+0xc4>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <HAL_SPI_TransmitReceive_IT+0x118>)
 8004dd2:	641a      	str	r2, [r3, #64]	; 0x40
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4a17      	ldr	r2, [pc, #92]	; (8004e34 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8004dd8:	645a      	str	r2, [r3, #68]	; 0x44
 8004dda:	e005      	b.n	8004de8 <HAL_SPI_TransmitReceive_IT+0xd0>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a16      	ldr	r2, [pc, #88]	; (8004e38 <HAL_SPI_TransmitReceive_IT+0x120>)
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4a15      	ldr	r2, [pc, #84]	; (8004e3c <HAL_SPI_TransmitReceive_IT+0x124>)
 8004de6:	645a      	str	r2, [r3, #68]	; 0x44
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d008      	beq.n	8004e18 <HAL_SPI_TransmitReceive_IT+0x100>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	e000      	b.n	8004e1a <HAL_SPI_TransmitReceive_IT+0x102>
 8004e18:	bf00      	nop
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
 8004e24:	4618      	mov	r0, r3
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	08005165 	.word	0x08005165
 8004e34:	080051c5 	.word	0x080051c5
 8004e38:	080050a1 	.word	0x080050a1
 8004e3c:	08005105 	.word	0x08005105

08004e40 <HAL_SPI_IRQHandler>:
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	61bb      	str	r3, [r7, #24]
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10e      	bne.n	8004e80 <HAL_SPI_IRQHandler+0x40>
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <HAL_SPI_IRQHandler+0x40>
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <HAL_SPI_IRQHandler+0x40>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	4798      	blx	r3
 8004e7e:	e0ce      	b.n	800501e <HAL_SPI_IRQHandler+0x1de>
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d009      	beq.n	8004e9e <HAL_SPI_IRQHandler+0x5e>
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <HAL_SPI_IRQHandler+0x5e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
 8004e9c:	e0bf      	b.n	800501e <HAL_SPI_IRQHandler+0x1de>
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <HAL_SPI_IRQHandler+0x7e>
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d105      	bne.n	8004ebe <HAL_SPI_IRQHandler+0x7e>
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80b0 	beq.w	800501e <HAL_SPI_IRQHandler+0x1de>
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80aa 	beq.w	800501e <HAL_SPI_IRQHandler+0x1de>
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d023      	beq.n	8004f1c <HAL_SPI_IRQHandler+0xdc>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d011      	beq.n	8004f04 <HAL_SPI_IRQHandler+0xc4>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee4:	f043 0204 	orr.w	r2, r3, #4
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	e00b      	b.n	8004f1c <HAL_SPI_IRQHandler+0xdc>
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	e080      	b.n	800501e <HAL_SPI_IRQHandler+0x1de>
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f003 0320 	and.w	r3, r3, #32
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d014      	beq.n	8004f50 <HAL_SPI_IRQHandler+0x110>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	f043 0201 	orr.w	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00c      	beq.n	8004f74 <HAL_SPI_IRQHandler+0x134>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5e:	f043 0208 	orr.w	r2, r3, #8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	655a      	str	r2, [r3, #84]	; 0x54
 8004f66:	2300      	movs	r3, #0
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d04f      	beq.n	800501c <HAL_SPI_IRQHandler+0x1dc>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f8a:	605a      	str	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d104      	bne.n	8004fa8 <HAL_SPI_IRQHandler+0x168>
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d034      	beq.n	8005012 <HAL_SPI_IRQHandler+0x1d2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0203 	bic.w	r2, r2, #3
 8004fb6:	605a      	str	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d011      	beq.n	8004fe4 <HAL_SPI_IRQHandler+0x1a4>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc4:	4a17      	ldr	r2, [pc, #92]	; (8005024 <HAL_SPI_IRQHandler+0x1e4>)
 8004fc6:	651a      	str	r2, [r3, #80]	; 0x50
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fc fb66 	bl	800169e <HAL_DMA_Abort_IT>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <HAL_SPI_IRQHandler+0x1a4>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d016      	beq.n	800501a <HAL_SPI_IRQHandler+0x1da>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff0:	4a0c      	ldr	r2, [pc, #48]	; (8005024 <HAL_SPI_IRQHandler+0x1e4>)
 8004ff2:	651a      	str	r2, [r3, #80]	; 0x50
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fc fb50 	bl	800169e <HAL_DMA_Abort_IT>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <HAL_SPI_IRQHandler+0x1da>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005008:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	655a      	str	r2, [r3, #84]	; 0x54
 8005010:	e003      	b.n	800501a <HAL_SPI_IRQHandler+0x1da>
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f826 	bl	8005064 <HAL_SPI_ErrorCallback>
 8005018:	e000      	b.n	800501c <HAL_SPI_IRQHandler+0x1dc>
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	08005079 	.word	0x08005079

08005028 <HAL_SPI_TxCpltCallback>:
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_SPI_RxCpltCallback>:
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_SPI_TxRxCpltCallback>:
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_SPI_ErrorCallback>:
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <SPI_DMAAbortOnError>:
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	86da      	strh	r2, [r3, #54]	; 0x36
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f7ff ffe6 	bl	8005064 <HAL_SPI_ErrorCallback>
 8005098:	bf00      	nop
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <SPI_2linesRxISR_8BIT>:
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f103 020c 	add.w	r2, r3, #12
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	7812      	ldrb	r2, [r2, #0]
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	639a      	str	r2, [r3, #56]	; 0x38
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10f      	bne.n	80050fc <SPI_2linesRxISR_8BIT+0x5c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050ea:	605a      	str	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <SPI_2linesRxISR_8BIT+0x5c>
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa50 	bl	800559c <SPI_CloseRxTx_ISR>
 80050fc:	bf00      	nop
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <SPI_2linesTxISR_8BIT>:
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	7812      	ldrb	r2, [r2, #0]
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	631a      	str	r2, [r3, #48]	; 0x30
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	86da      	strh	r2, [r3, #54]	; 0x36
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10f      	bne.n	800515c <SPI_2linesTxISR_8BIT+0x58>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800514a:	605a      	str	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d102      	bne.n	800515c <SPI_2linesTxISR_8BIT+0x58>
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fa20 	bl	800559c <SPI_CloseRxTx_ISR>
 800515c:	bf00      	nop
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <SPI_2linesRxISR_16BIT>:
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	b292      	uxth	r2, r2
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	1c9a      	adds	r2, r3, #2
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	639a      	str	r2, [r3, #56]	; 0x38
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10f      	bne.n	80051bc <SPI_2linesRxISR_16BIT+0x58>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051aa:	605a      	str	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d102      	bne.n	80051bc <SPI_2linesRxISR_16BIT+0x58>
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f9f0 	bl	800559c <SPI_CloseRxTx_ISR>
 80051bc:	bf00      	nop
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <SPI_2linesTxISR_16BIT>:
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d0:	881a      	ldrh	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60da      	str	r2, [r3, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	1c9a      	adds	r2, r3, #2
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10f      	bne.n	800521a <SPI_2linesTxISR_16BIT+0x56>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005208:	605a      	str	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d102      	bne.n	800521a <SPI_2linesTxISR_16BIT+0x56>
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f9c1 	bl	800559c <SPI_CloseRxTx_ISR>
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <SPI_RxISR_8BIT>:
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f103 020c 	add.w	r2, r3, #12
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	7812      	ldrb	r2, [r2, #0]
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	639a      	str	r2, [r3, #56]	; 0x38
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <SPI_RxISR_8BIT+0x42>
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fa10 	bl	8005684 <SPI_CloseRx_ISR>
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <SPI_RxISR_16BIT>:
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	b292      	uxth	r2, r2
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	1c9a      	adds	r2, r3, #2
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	639a      	str	r2, [r3, #56]	; 0x38
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	87da      	strh	r2, [r3, #62]	; 0x3e
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <SPI_RxISR_16BIT+0x3e>
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f9ed 	bl	8005684 <SPI_CloseRx_ISR>
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <SPI_TxISR_8BIT>:
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	7812      	ldrb	r2, [r2, #0]
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	86da      	strh	r2, [r3, #54]	; 0x36
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d102      	bne.n	80052f0 <SPI_TxISR_8BIT+0x3e>
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fa0a 	bl	8005704 <SPI_CloseTx_ISR>
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <SPI_TxISR_16BIT>:
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	881a      	ldrh	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60da      	str	r2, [r3, #12]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005310:	1c9a      	adds	r2, r3, #2
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	631a      	str	r2, [r3, #48]	; 0x30
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	86da      	strh	r2, [r3, #54]	; 0x36
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d102      	bne.n	8005334 <SPI_TxISR_16BIT+0x3c>
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f9e8 	bl	8005704 <SPI_CloseTx_ISR>
 8005334:	bf00      	nop
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <SPI_WaitFlagStateUntilTimeout>:
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	4613      	mov	r3, r2
 800534a:	71fb      	strb	r3, [r7, #7]
 800534c:	f7fc f866 	bl	800141c <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	4413      	add	r3, r2
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	f7fc f85e 	bl	800141c <HAL_GetTick>
 8005360:	61b8      	str	r0, [r7, #24]
 8005362:	4b39      	ldr	r3, [pc, #228]	; (8005448 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	015b      	lsls	r3, r3, #5
 8005368:	0d1b      	lsrs	r3, r3, #20
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	fb02 f303 	mul.w	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e054      	b.n	800541e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d050      	beq.n	800541e <SPI_WaitFlagStateUntilTimeout+0xe2>
 800537c:	f7fc f84e 	bl	800141c <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	429a      	cmp	r2, r3
 800538a:	d902      	bls.n	8005392 <SPI_WaitFlagStateUntilTimeout+0x56>
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d13d      	bne.n	800540e <SPI_WaitFlagStateUntilTimeout+0xd2>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053a0:	605a      	str	r2, [r3, #4]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053aa:	d111      	bne.n	80053d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b4:	d004      	beq.n	80053c0 <SPI_WaitFlagStateUntilTimeout+0x84>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053be:	d107      	bne.n	80053d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d8:	d10f      	bne.n	80053fa <SPI_WaitFlagStateUntilTimeout+0xbe>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800540a:	2303      	movs	r3, #3
 800540c:	e017      	b.n	800543e <SPI_WaitFlagStateUntilTimeout+0x102>
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8005414:	2300      	movs	r3, #0
 8005416:	61fb      	str	r3, [r7, #28]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	3b01      	subs	r3, #1
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4013      	ands	r3, r2
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	429a      	cmp	r2, r3
 800542c:	bf0c      	ite	eq
 800542e:	2301      	moveq	r3, #1
 8005430:	2300      	movne	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	429a      	cmp	r2, r3
 800543a:	d19b      	bne.n	8005374 <SPI_WaitFlagStateUntilTimeout+0x38>
 800543c:	2300      	movs	r3, #0
 800543e:	4618      	mov	r0, r3
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000000 	.word	0x20000000

0800544c <SPI_EndRxTransaction>:
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005460:	d111      	bne.n	8005486 <SPI_EndRxTransaction+0x3a>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800546a:	d004      	beq.n	8005476 <SPI_EndRxTransaction+0x2a>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005474:	d107      	bne.n	8005486 <SPI_EndRxTransaction+0x3a>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800548e:	d12a      	bne.n	80054e6 <SPI_EndRxTransaction+0x9a>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005498:	d012      	beq.n	80054c0 <SPI_EndRxTransaction+0x74>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2200      	movs	r2, #0
 80054a2:	2180      	movs	r1, #128	; 0x80
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff ff49 	bl	800533c <SPI_WaitFlagStateUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d02d      	beq.n	800550c <SPI_EndRxTransaction+0xc0>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b4:	f043 0220 	orr.w	r2, r3, #32
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	655a      	str	r2, [r3, #84]	; 0x54
 80054bc:	2303      	movs	r3, #3
 80054be:	e026      	b.n	800550e <SPI_EndRxTransaction+0xc2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2200      	movs	r2, #0
 80054c8:	2101      	movs	r1, #1
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7ff ff36 	bl	800533c <SPI_WaitFlagStateUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01a      	beq.n	800550c <SPI_EndRxTransaction+0xc0>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054da:	f043 0220 	orr.w	r2, r3, #32
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	655a      	str	r2, [r3, #84]	; 0x54
 80054e2:	2303      	movs	r3, #3
 80054e4:	e013      	b.n	800550e <SPI_EndRxTransaction+0xc2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2200      	movs	r2, #0
 80054ee:	2101      	movs	r1, #1
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7ff ff23 	bl	800533c <SPI_WaitFlagStateUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d007      	beq.n	800550c <SPI_EndRxTransaction+0xc0>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005500:	f043 0220 	orr.w	r2, r3, #32
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	655a      	str	r2, [r3, #84]	; 0x54
 8005508:	2303      	movs	r3, #3
 800550a:	e000      	b.n	800550e <SPI_EndRxTransaction+0xc2>
 800550c:	2300      	movs	r3, #0
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <SPI_EndRxTxTransaction>:
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <SPI_EndRxTxTransaction+0x7c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1b      	ldr	r2, [pc, #108]	; (8005598 <SPI_EndRxTxTransaction+0x80>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	0d5b      	lsrs	r3, r3, #21
 8005530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005534:	fb02 f303 	mul.w	r3, r2, r3
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005542:	d112      	bne.n	800556a <SPI_EndRxTxTransaction+0x52>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2200      	movs	r2, #0
 800554c:	2180      	movs	r1, #128	; 0x80
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff fef4 	bl	800533c <SPI_WaitFlagStateUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d016      	beq.n	8005588 <SPI_EndRxTxTransaction+0x70>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	f043 0220 	orr.w	r2, r3, #32
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	655a      	str	r2, [r3, #84]	; 0x54
 8005566:	2303      	movs	r3, #3
 8005568:	e00f      	b.n	800558a <SPI_EndRxTxTransaction+0x72>
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <SPI_EndRxTxTransaction+0x6e>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	3b01      	subs	r3, #1
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005580:	2b80      	cmp	r3, #128	; 0x80
 8005582:	d0f2      	beq.n	800556a <SPI_EndRxTxTransaction+0x52>
 8005584:	e000      	b.n	8005588 <SPI_EndRxTxTransaction+0x70>
 8005586:	bf00      	nop
 8005588:	2300      	movs	r3, #0
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000000 	.word	0x20000000
 8005598:	165e9f81 	.word	0x165e9f81

0800559c <SPI_CloseRxTx_ISR>:
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	4b35      	ldr	r3, [pc, #212]	; (800567c <SPI_CloseRxTx_ISR+0xe0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a35      	ldr	r2, [pc, #212]	; (8005680 <SPI_CloseRxTx_ISR+0xe4>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	0a5b      	lsrs	r3, r3, #9
 80055b0:	2264      	movs	r2, #100	; 0x64
 80055b2:	fb02 f303 	mul.w	r3, r2, r3
 80055b6:	613b      	str	r3, [r7, #16]
 80055b8:	f7fb ff30 	bl	800141c <HAL_GetTick>
 80055bc:	6178      	str	r0, [r7, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0220 	bic.w	r2, r2, #32
 80055cc:	605a      	str	r2, [r3, #4]
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d106      	bne.n	80055e2 <SPI_CloseRxTx_ISR+0x46>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d8:	f043 0220 	orr.w	r2, r3, #32
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
 80055e0:	e009      	b.n	80055f6 <SPI_CloseRxTx_ISR+0x5a>
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0eb      	beq.n	80055ce <SPI_CloseRxTx_ISR+0x32>
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	2164      	movs	r1, #100	; 0x64
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff ff8c 	bl	8005518 <SPI_EndRxTxTransaction>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <SPI_CloseRxTx_ISR+0x76>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560a:	f043 0220 	orr.w	r2, r3, #32
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	655a      	str	r2, [r3, #84]	; 0x54
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <SPI_CloseRxTx_ISR+0x94>
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	2b00      	cmp	r3, #0
 8005636:	d115      	bne.n	8005664 <SPI_CloseRxTx_ISR+0xc8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b04      	cmp	r3, #4
 8005642:	d107      	bne.n	8005654 <SPI_CloseRxTx_ISR+0xb8>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff fcf5 	bl	800503c <HAL_SPI_RxCpltCallback>
 8005652:	e00e      	b.n	8005672 <SPI_CloseRxTx_ISR+0xd6>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff fcf7 	bl	8005050 <HAL_SPI_TxRxCpltCallback>
 8005662:	e006      	b.n	8005672 <SPI_CloseRxTx_ISR+0xd6>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff fcf9 	bl	8005064 <HAL_SPI_ErrorCallback>
 8005672:	bf00      	nop
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000000 	.word	0x20000000
 8005680:	057619f1 	.word	0x057619f1

08005684 <SPI_CloseRx_ISR>:
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800569a:	605a      	str	r2, [r3, #4]
 800569c:	f7fb febe 	bl	800141c <HAL_GetTick>
 80056a0:	4603      	mov	r3, r0
 80056a2:	461a      	mov	r2, r3
 80056a4:	2164      	movs	r1, #100	; 0x64
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff fed0 	bl	800544c <SPI_EndRxTransaction>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <SPI_CloseRx_ISR+0x3a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b6:	f043 0220 	orr.w	r2, r3, #32
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	655a      	str	r2, [r3, #84]	; 0x54
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10a      	bne.n	80056dc <SPI_CloseRx_ISR+0x58>
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d103      	bne.n	80056f4 <SPI_CloseRx_ISR+0x70>
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff fca5 	bl	800503c <HAL_SPI_RxCpltCallback>
 80056f2:	e002      	b.n	80056fa <SPI_CloseRx_ISR+0x76>
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff fcb5 	bl	8005064 <HAL_SPI_ErrorCallback>
 80056fa:	bf00      	nop
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <SPI_CloseTx_ISR>:
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	4b2c      	ldr	r3, [pc, #176]	; (80057c0 <SPI_CloseTx_ISR+0xbc>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a2c      	ldr	r2, [pc, #176]	; (80057c4 <SPI_CloseTx_ISR+0xc0>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	0a5b      	lsrs	r3, r3, #9
 8005718:	2264      	movs	r2, #100	; 0x64
 800571a:	fb02 f303 	mul.w	r3, r2, r3
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	f7fb fe7c 	bl	800141c <HAL_GetTick>
 8005724:	6178      	str	r0, [r7, #20]
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <SPI_CloseTx_ISR+0x36>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005730:	f043 0220 	orr.w	r2, r3, #32
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
 8005738:	e009      	b.n	800574e <SPI_CloseTx_ISR+0x4a>
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	3b01      	subs	r3, #1
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0eb      	beq.n	8005726 <SPI_CloseTx_ISR+0x22>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800575c:	605a      	str	r2, [r3, #4]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	2164      	movs	r1, #100	; 0x64
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff fed8 	bl	8005518 <SPI_EndRxTxTransaction>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <SPI_CloseTx_ISR+0x76>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	655a      	str	r2, [r3, #84]	; 0x54
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10a      	bne.n	8005798 <SPI_CloseTx_ISR+0x94>
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <SPI_CloseTx_ISR+0xac>
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff fc5b 	bl	8005064 <HAL_SPI_ErrorCallback>
 80057ae:	e002      	b.n	80057b6 <SPI_CloseTx_ISR+0xb2>
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff fc39 	bl	8005028 <HAL_SPI_TxCpltCallback>
 80057b6:	bf00      	nop
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000000 	.word	0x20000000
 80057c4:	057619f1 	.word	0x057619f1

080057c8 <USB_CoreInit>:
 80057c8:	b084      	sub	sp, #16
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	f107 001c 	add.w	r0, r7, #28
 80057d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d122      	bne.n	8005826 <USB_CoreInit+0x5e>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	60d3      	str	r3, [r2, #12]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	60da      	str	r2, [r3, #12]
 8005808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580a:	2b01      	cmp	r3, #1
 800580c:	d105      	bne.n	800581a <USB_CoreInit+0x52>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60da      	str	r2, [r3, #12]
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f9c0 	bl	8005ba0 <USB_CoreReset>
 8005820:	4603      	mov	r3, r0
 8005822:	73fb      	strb	r3, [r7, #15]
 8005824:	e01a      	b.n	800585c <USB_CoreInit+0x94>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	60da      	str	r2, [r3, #12]
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f9b4 	bl	8005ba0 <USB_CoreReset>
 8005838:	4603      	mov	r3, r0
 800583a:	73fb      	strb	r3, [r7, #15]
 800583c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <USB_CoreInit+0x88>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	639a      	str	r2, [r3, #56]	; 0x38
 800584e:	e005      	b.n	800585c <USB_CoreInit+0x94>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	639a      	str	r2, [r3, #56]	; 0x38
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	2b01      	cmp	r3, #1
 8005860:	d10b      	bne.n	800587a <USB_CoreInit+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f043 0206 	orr.w	r2, r3, #6
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	609a      	str	r2, [r3, #8]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f043 0220 	orr.w	r2, r3, #32
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	609a      	str	r2, [r3, #8]
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005886:	b004      	add	sp, #16
 8005888:	4770      	bx	lr

0800588a <USB_EnableGlobalInt>:
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f043 0201 	orr.w	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	609a      	str	r2, [r3, #8]
 800589e:	2300      	movs	r3, #0
 80058a0:	4618      	mov	r0, r3
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USB_DisableGlobalInt>:
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f023 0201 	bic.w	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	609a      	str	r2, [r3, #8]
 80058c0:	2300      	movs	r3, #0
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <USB_SetCurrentMode>:
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	460b      	mov	r3, r1
 80058d8:	70fb      	strb	r3, [r7, #3]
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	60da      	str	r2, [r3, #12]
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d115      	bne.n	800591c <USB_SetCurrentMode+0x4e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	60da      	str	r2, [r3, #12]
 80058fc:	2001      	movs	r0, #1
 80058fe:	f7fb fd99 	bl	8001434 <HAL_Delay>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3301      	adds	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f93a 	bl	8005b82 <USB_GetMode>
 800590e:	4603      	mov	r3, r0
 8005910:	2b01      	cmp	r3, #1
 8005912:	d01e      	beq.n	8005952 <USB_SetCurrentMode+0x84>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b31      	cmp	r3, #49	; 0x31
 8005918:	d9f0      	bls.n	80058fc <USB_SetCurrentMode+0x2e>
 800591a:	e01a      	b.n	8005952 <USB_SetCurrentMode+0x84>
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d115      	bne.n	800594e <USB_SetCurrentMode+0x80>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	2001      	movs	r0, #1
 8005930:	f7fb fd80 	bl	8001434 <HAL_Delay>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3301      	adds	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f921 	bl	8005b82 <USB_GetMode>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <USB_SetCurrentMode+0x84>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b31      	cmp	r3, #49	; 0x31
 800594a:	d9f0      	bls.n	800592e <USB_SetCurrentMode+0x60>
 800594c:	e001      	b.n	8005952 <USB_SetCurrentMode+0x84>
 800594e:	2301      	movs	r3, #1
 8005950:	e005      	b.n	800595e <USB_SetCurrentMode+0x90>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b32      	cmp	r3, #50	; 0x32
 8005956:	d101      	bne.n	800595c <USB_SetCurrentMode+0x8e>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <USB_SetCurrentMode+0x90>
 800595c:	2300      	movs	r3, #0
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <USB_FlushTxFifo>:
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3301      	adds	r3, #1
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a13      	ldr	r2, [pc, #76]	; (80059cc <USB_FlushTxFifo+0x64>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d901      	bls.n	8005988 <USB_FlushTxFifo+0x20>
 8005984:	2303      	movs	r3, #3
 8005986:	e01b      	b.n	80059c0 <USB_FlushTxFifo+0x58>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	daf2      	bge.n	8005976 <USB_FlushTxFifo+0xe>
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	019b      	lsls	r3, r3, #6
 8005998:	f043 0220 	orr.w	r2, r3, #32
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	611a      	str	r2, [r3, #16]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3301      	adds	r3, #1
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4a08      	ldr	r2, [pc, #32]	; (80059cc <USB_FlushTxFifo+0x64>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <USB_FlushTxFifo+0x4a>
 80059ae:	2303      	movs	r3, #3
 80059b0:	e006      	b.n	80059c0 <USB_FlushTxFifo+0x58>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d0f0      	beq.n	80059a0 <USB_FlushTxFifo+0x38>
 80059be:	2300      	movs	r3, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	00030d40 	.word	0x00030d40

080059d0 <USB_FlushRxFifo>:
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3301      	adds	r3, #1
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4a11      	ldr	r2, [pc, #68]	; (8005a2c <USB_FlushRxFifo+0x5c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d901      	bls.n	80059ee <USB_FlushRxFifo+0x1e>
 80059ea:	2303      	movs	r3, #3
 80059ec:	e018      	b.n	8005a20 <USB_FlushRxFifo+0x50>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	daf2      	bge.n	80059dc <USB_FlushRxFifo+0xc>
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2210      	movs	r2, #16
 80059fe:	611a      	str	r2, [r3, #16]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3301      	adds	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4a08      	ldr	r2, [pc, #32]	; (8005a2c <USB_FlushRxFifo+0x5c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <USB_FlushRxFifo+0x42>
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e006      	b.n	8005a20 <USB_FlushRxFifo+0x50>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	2b10      	cmp	r3, #16
 8005a1c:	d0f0      	beq.n	8005a00 <USB_FlushRxFifo+0x30>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	00030d40 	.word	0x00030d40

08005a30 <USB_WritePacket>:
 8005a30:	b480      	push	{r7}
 8005a32:	b089      	sub	sp, #36	; 0x24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	460b      	mov	r3, r1
 8005a40:	71fb      	strb	r3, [r7, #7]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80bb      	strh	r3, [r7, #4]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	61fb      	str	r3, [r7, #28]
 8005a4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d123      	bne.n	8005a9e <USB_WritePacket+0x6e>
 8005a56:	88bb      	ldrh	r3, [r7, #4]
 8005a58:	3303      	adds	r3, #3
 8005a5a:	089b      	lsrs	r3, r3, #2
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	e018      	b.n	8005a96 <USB_WritePacket+0x66>
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	031a      	lsls	r2, r3, #12
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a70:	461a      	mov	r2, r3
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	3301      	adds	r3, #1
 8005a82:	61fb      	str	r3, [r7, #28]
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	3301      	adds	r3, #1
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	3301      	adds	r3, #1
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d3e2      	bcc.n	8005a64 <USB_WritePacket+0x34>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3724      	adds	r7, #36	; 0x24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USB_ReadPacket>:
 8005aac:	b480      	push	{r7}
 8005aae:	b08b      	sub	sp, #44	; 0x2c
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac2:	88fb      	ldrh	r3, [r7, #6]
 8005ac4:	089b      	lsrs	r3, r3, #2
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	83fb      	strh	r3, [r7, #30]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	623b      	str	r3, [r7, #32]
 8005ad6:	e014      	b.n	8005b02 <USB_ReadPacket+0x56>
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	3301      	adds	r3, #1
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	3301      	adds	r3, #1
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	3301      	adds	r3, #1
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	3301      	adds	r3, #1
 8005b00:	623b      	str	r3, [r7, #32]
 8005b02:	6a3a      	ldr	r2, [r7, #32]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d3e6      	bcc.n	8005ad8 <USB_ReadPacket+0x2c>
 8005b0a:	8bfb      	ldrh	r3, [r7, #30]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01e      	beq.n	8005b4e <USB_ReadPacket+0xa2>
 8005b10:	2300      	movs	r3, #0
 8005b12:	623b      	str	r3, [r7, #32]
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f107 0310 	add.w	r3, r7, #16
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	623b      	str	r3, [r7, #32]
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	3301      	adds	r3, #1
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
 8005b42:	8bfb      	ldrh	r3, [r7, #30]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	83fb      	strh	r3, [r7, #30]
 8005b48:	8bfb      	ldrh	r3, [r7, #30]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1ea      	bne.n	8005b24 <USB_ReadPacket+0x78>
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	4618      	mov	r0, r3
 8005b52:	372c      	adds	r7, #44	; 0x2c
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_ReadInterrupts>:
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4013      	ands	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <USB_GetMode>:
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <USB_CoreReset>:
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4a13      	ldr	r2, [pc, #76]	; (8005c04 <USB_CoreReset+0x64>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d901      	bls.n	8005bbe <USB_CoreReset+0x1e>
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e01b      	b.n	8005bf6 <USB_CoreReset+0x56>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	daf2      	bge.n	8005bac <USB_CoreReset+0xc>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f043 0201 	orr.w	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	611a      	str	r2, [r3, #16]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <USB_CoreReset+0x64>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d901      	bls.n	8005be8 <USB_CoreReset+0x48>
 8005be4:	2303      	movs	r3, #3
 8005be6:	e006      	b.n	8005bf6 <USB_CoreReset+0x56>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d0f0      	beq.n	8005bd6 <USB_CoreReset+0x36>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	00030d40 	.word	0x00030d40

08005c08 <USB_HostInit>:
 8005c08:	b084      	sub	sp, #16
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b086      	sub	sp, #24
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	75fb      	strb	r3, [r7, #23]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c28:	461a      	mov	r2, r3
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	639a      	str	r2, [r3, #56]	; 0x38
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	639a      	str	r2, [r3, #56]	; 0x38
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d018      	beq.n	8005c90 <USB_HostInit+0x88>
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d10a      	bne.n	8005c7a <USB_HostInit+0x72>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c72:	f043 0304 	orr.w	r3, r3, #4
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	e014      	b.n	8005ca4 <USB_HostInit+0x9c>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c88:	f023 0304 	bic.w	r3, r3, #4
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	e009      	b.n	8005ca4 <USB_HostInit+0x9c>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c9e:	f023 0304 	bic.w	r3, r3, #4
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	2110      	movs	r1, #16
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff fe5e 	bl	8005968 <USB_FlushTxFifo>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <USB_HostInit+0xae>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff fe8a 	bl	80059d0 <USB_FlushRxFifo>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <USB_HostInit+0xbe>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	75fb      	strb	r3, [r7, #23]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	e015      	b.n	8005cf8 <USB_HostInit+0xf0>
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd8:	461a      	mov	r2, r3
 8005cda:	f04f 33ff 	mov.w	r3, #4294967295
 8005cde:	6093      	str	r3, [r2, #8]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cec:	461a      	mov	r2, r3
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60d3      	str	r3, [r2, #12]
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d3e5      	bcc.n	8005ccc <USB_HostInit+0xc4>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	619a      	str	r2, [r3, #24]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0c:	615a      	str	r2, [r3, #20]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00b      	beq.n	8005d32 <USB_HostInit+0x12a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d20:	625a      	str	r2, [r3, #36]	; 0x24
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <USB_HostInit+0x16c>)
 8005d26:	629a      	str	r2, [r3, #40]	; 0x28
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a13      	ldr	r2, [pc, #76]	; (8005d78 <USB_HostInit+0x170>)
 8005d2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d30:	e009      	b.n	8005d46 <USB_HostInit+0x13e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2280      	movs	r2, #128	; 0x80
 8005d36:	625a      	str	r2, [r3, #36]	; 0x24
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a10      	ldr	r2, [pc, #64]	; (8005d7c <USB_HostInit+0x174>)
 8005d3c:	629a      	str	r2, [r3, #40]	; 0x28
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a0f      	ldr	r2, [pc, #60]	; (8005d80 <USB_HostInit+0x178>)
 8005d42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <USB_HostInit+0x150>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f043 0210 	orr.w	r2, r3, #16
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	619a      	str	r2, [r3, #24]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699a      	ldr	r2, [r3, #24]
 8005d5c:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <USB_HostInit+0x17c>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6193      	str	r3, [r2, #24]
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d70:	b004      	add	sp, #16
 8005d72:	4770      	bx	lr
 8005d74:	01000200 	.word	0x01000200
 8005d78:	00e00300 	.word	0x00e00300
 8005d7c:	00600080 	.word	0x00600080
 8005d80:	004000e0 	.word	0x004000e0
 8005d84:	a3200008 	.word	0xa3200008

08005d88 <USB_InitFSLSPClkSel>:
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	70fb      	strb	r3, [r7, #3]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005da6:	f023 0303 	bic.w	r3, r3, #3
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	68f9      	ldr	r1, [r7, #12]
 8005dbc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	600b      	str	r3, [r1, #0]
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d107      	bne.n	8005dda <USB_InitFSLSPClkSel+0x52>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005dd6:	6053      	str	r3, [r2, #4]
 8005dd8:	e009      	b.n	8005dee <USB_InitFSLSPClkSel+0x66>
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d106      	bne.n	8005dee <USB_InitFSLSPClkSel+0x66>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005de6:	461a      	mov	r2, r3
 8005de8:	f241 7370 	movw	r3, #6000	; 0x1770
 8005dec:	6053      	str	r3, [r2, #4]
 8005dee:	2300      	movs	r3, #0
 8005df0:	4618      	mov	r0, r3
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <USB_ResetPort>:
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60bb      	str	r3, [r7, #8]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60bb      	str	r3, [r7, #8]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e1c:	60bb      	str	r3, [r7, #8]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	2064      	movs	r0, #100	; 0x64
 8005e2e:	f7fb fb01 	bl	8001434 <HAL_Delay>
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	200a      	movs	r0, #10
 8005e42:	f7fb faf7 	bl	8001434 <HAL_Delay>
 8005e46:	2300      	movs	r3, #0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <USB_DriveVbus>:
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	70fb      	strb	r3, [r7, #3]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	2300      	movs	r3, #0
 8005e62:	60bb      	str	r3, [r7, #8]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60bb      	str	r3, [r7, #8]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e74:	60bb      	str	r3, [r7, #8]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d109      	bne.n	8005e94 <USB_DriveVbus+0x44>
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d106      	bne.n	8005e94 <USB_DriveVbus+0x44>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9e:	d109      	bne.n	8005eb4 <USB_DriveVbus+0x64>
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <USB_DriveVbus+0x64>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005eae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <USB_GetHostSpeed>:
 8005ec2:	b480      	push	{r7}
 8005ec4:	b085      	sub	sp, #20
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60bb      	str	r3, [r7, #8]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	0c5b      	lsrs	r3, r3, #17
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <USB_GetCurrentFrame>:
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <USB_HC_Init>:
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	461a      	mov	r2, r3
 8005f22:	4603      	mov	r3, r0
 8005f24:	70fb      	strb	r3, [r7, #3]
 8005f26:	460b      	mov	r3, r1
 8005f28:	70bb      	strb	r3, [r7, #2]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	707b      	strb	r3, [r7, #1]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	77fb      	strb	r3, [r7, #31]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	613b      	str	r3, [r7, #16]
 8005f36:	78fb      	ldrb	r3, [r7, #3]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f42:	461a      	mov	r2, r3
 8005f44:	f04f 33ff 	mov.w	r3, #4294967295
 8005f48:	6093      	str	r3, [r2, #8]
 8005f4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d87e      	bhi.n	8006050 <USB_HC_Init+0x13c>
 8005f52:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <USB_HC_Init+0x44>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f69 	.word	0x08005f69
 8005f5c:	08006013 	.word	0x08006013
 8005f60:	08005f69 	.word	0x08005f69
 8005f64:	08005fd5 	.word	0x08005fd5
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f74:	461a      	mov	r2, r3
 8005f76:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f7a:	60d3      	str	r3, [r2, #12]
 8005f7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	da10      	bge.n	8005fa6 <USB_HC_Init+0x92>
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa2:	60d3      	str	r3, [r2, #12]
 8005fa4:	e057      	b.n	8006056 <USB_HC_Init+0x142>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d051      	beq.n	8006056 <USB_HC_Init+0x142>
 8005fb2:	78fb      	ldrb	r3, [r7, #3]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	78fa      	ldrb	r2, [r7, #3]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fcc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005fd0:	60d3      	str	r3, [r2, #12]
 8005fd2:	e040      	b.n	8006056 <USB_HC_Init+0x142>
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f240 639d 	movw	r3, #1693	; 0x69d
 8005fe6:	60d3      	str	r3, [r2, #12]
 8005fe8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	da34      	bge.n	800605a <USB_HC_Init+0x146>
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	78fa      	ldrb	r2, [r7, #3]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	440a      	add	r2, r1
 8006006:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800600a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800600e:	60d3      	str	r3, [r2, #12]
 8006010:	e023      	b.n	800605a <USB_HC_Init+0x146>
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4413      	add	r3, r2
 800601a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601e:	461a      	mov	r2, r3
 8006020:	f240 2325 	movw	r3, #549	; 0x225
 8006024:	60d3      	str	r3, [r2, #12]
 8006026:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800602a:	2b00      	cmp	r3, #0
 800602c:	da17      	bge.n	800605e <USB_HC_Init+0x14a>
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	4413      	add	r3, r2
 8006036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	440a      	add	r2, r1
 8006044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006048:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800604c:	60d3      	str	r3, [r2, #12]
 800604e:	e006      	b.n	800605e <USB_HC_Init+0x14a>
 8006050:	2301      	movs	r3, #1
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e004      	b.n	8006060 <USB_HC_Init+0x14c>
 8006056:	bf00      	nop
 8006058:	e002      	b.n	8006060 <USB_HC_Init+0x14c>
 800605a:	bf00      	nop
 800605c:	e000      	b.n	8006060 <USB_HC_Init+0x14c>
 800605e:	bf00      	nop
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	4413      	add	r3, r2
 8006068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	78fa      	ldrb	r2, [r7, #3]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	440a      	add	r2, r1
 8006076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800607a:	f043 0302 	orr.w	r3, r3, #2
 800607e:	60d3      	str	r3, [r2, #12]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006086:	699a      	ldr	r2, [r3, #24]
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	f003 030f 	and.w	r3, r3, #15
 800608e:	2101      	movs	r1, #1
 8006090:	fa01 f303 	lsl.w	r3, r1, r3
 8006094:	6939      	ldr	r1, [r7, #16]
 8006096:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800609a:	4313      	orrs	r3, r2
 800609c:	618b      	str	r3, [r1, #24]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	619a      	str	r2, [r3, #24]
 80060aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	da03      	bge.n	80060ba <USB_HC_Init+0x1a6>
 80060b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060b6:	61bb      	str	r3, [r7, #24]
 80060b8:	e001      	b.n	80060be <USB_HC_Init+0x1aa>
 80060ba:	2300      	movs	r3, #0
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff feff 	bl	8005ec2 <USB_GetHostSpeed>
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d106      	bne.n	80060dc <USB_HC_Init+0x1c8>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d003      	beq.n	80060dc <USB_HC_Init+0x1c8>
 80060d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060d8:	617b      	str	r3, [r7, #20]
 80060da:	e001      	b.n	80060e0 <USB_HC_Init+0x1cc>
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	787b      	ldrb	r3, [r7, #1]
 80060e2:	059b      	lsls	r3, r3, #22
 80060e4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
 80060e8:	78bb      	ldrb	r3, [r7, #2]
 80060ea:	02db      	lsls	r3, r3, #11
 80060ec:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 80060f0:	431a      	orrs	r2, r3
 80060f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060f6:	049b      	lsls	r3, r3, #18
 80060f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80060fc:	431a      	orrs	r2, r3
 80060fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006100:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006104:	431a      	orrs	r2, r3
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	431a      	orrs	r2, r3
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	0159      	lsls	r1, r3, #5
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	440b      	add	r3, r1
 8006112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006116:	4619      	mov	r1, r3
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	600b      	str	r3, [r1, #0]
 800611e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006122:	2b03      	cmp	r3, #3
 8006124:	d003      	beq.n	800612e <USB_HC_Init+0x21a>
 8006126:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800612a:	2b01      	cmp	r3, #1
 800612c:	d10f      	bne.n	800614e <USB_HC_Init+0x23a>
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	4413      	add	r3, r2
 8006136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	78fa      	ldrb	r2, [r7, #3]
 800613e:	0151      	lsls	r1, r2, #5
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	440a      	add	r2, r1
 8006144:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006148:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	7ffb      	ldrb	r3, [r7, #31]
 8006150:	4618      	mov	r0, r3
 8006152:	3720      	adds	r7, #32
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <USB_HC_StartXfer>:
 8006158:	b580      	push	{r7, lr}
 800615a:	b08c      	sub	sp, #48	; 0x30
 800615c:	af02      	add	r7, sp, #8
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	4613      	mov	r3, r2
 8006164:	71fb      	strb	r3, [r7, #7]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	623b      	str	r3, [r7, #32]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006174:	837b      	strh	r3, [r7, #26]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617e:	2b00      	cmp	r3, #0
 8006180:	d02d      	beq.n	80061de <USB_HC_StartXfer+0x86>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	791b      	ldrb	r3, [r3, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d129      	bne.n	80061de <USB_HC_StartXfer+0x86>
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d117      	bne.n	80061c0 <USB_HC_StartXfer+0x68>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	79db      	ldrb	r3, [r3, #7]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <USB_HC_StartXfer+0x48>
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	79db      	ldrb	r3, [r3, #7]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d10f      	bne.n	80061c0 <USB_HC_StartXfer+0x68>
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	6a3a      	ldr	r2, [r7, #32]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061be:	60d3      	str	r3, [r2, #12]
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10b      	bne.n	80061de <USB_HC_StartXfer+0x86>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	795b      	ldrb	r3, [r3, #5]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d107      	bne.n	80061de <USB_HC_StartXfer+0x86>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	4619      	mov	r1, r3
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 fa0f 	bl	80065f8 <USB_DoPing>
 80061da:	2300      	movs	r3, #0
 80061dc:	e0f8      	b.n	80063d0 <USB_HC_StartXfer+0x278>
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d018      	beq.n	8006218 <USB_HC_StartXfer+0xc0>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	8912      	ldrh	r2, [r2, #8]
 80061ee:	4413      	add	r3, r2
 80061f0:	3b01      	subs	r3, #1
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	8912      	ldrh	r2, [r2, #8]
 80061f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80061fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80061fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061fe:	8b7b      	ldrh	r3, [r7, #26]
 8006200:	429a      	cmp	r2, r3
 8006202:	d90b      	bls.n	800621c <USB_HC_StartXfer+0xc4>
 8006204:	8b7b      	ldrh	r3, [r7, #26]
 8006206:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006208:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	8912      	ldrh	r2, [r2, #8]
 800620e:	fb03 f202 	mul.w	r2, r3, r2
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	611a      	str	r2, [r3, #16]
 8006216:	e001      	b.n	800621c <USB_HC_StartXfer+0xc4>
 8006218:	2301      	movs	r3, #1
 800621a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	78db      	ldrb	r3, [r3, #3]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <USB_HC_StartXfer+0xdc>
 8006224:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	8912      	ldrh	r2, [r2, #8]
 800622a:	fb03 f202 	mul.w	r2, r3, r2
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	611a      	str	r2, [r3, #16]
 8006232:	e003      	b.n	800623c <USB_HC_StartXfer+0xe4>
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	695a      	ldr	r2, [r3, #20]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	611a      	str	r2, [r3, #16]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8006244:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006246:	04d9      	lsls	r1, r3, #19
 8006248:	4b63      	ldr	r3, [pc, #396]	; (80063d8 <USB_HC_StartXfer+0x280>)
 800624a:	400b      	ands	r3, r1
 800624c:	431a      	orrs	r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	7a9b      	ldrb	r3, [r3, #10]
 8006252:	075b      	lsls	r3, r3, #29
 8006254:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8006258:	69f9      	ldr	r1, [r7, #28]
 800625a:	0148      	lsls	r0, r1, #5
 800625c:	6a39      	ldr	r1, [r7, #32]
 800625e:	4401      	add	r1, r0
 8006260:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006264:	4313      	orrs	r3, r2
 8006266:	610b      	str	r3, [r1, #16]
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <USB_HC_StartXfer+0x12a>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	68d9      	ldr	r1, [r3, #12]
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	4413      	add	r3, r2
 800627a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627e:	460a      	mov	r2, r1
 8006280:	615a      	str	r2, [r3, #20]
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	bf0c      	ite	eq
 8006292:	2301      	moveq	r3, #1
 8006294:	2300      	movne	r3, #0
 8006296:	b2db      	uxtb	r3, r3
 8006298:	767b      	strb	r3, [r7, #25]
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69fa      	ldr	r2, [r7, #28]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	6a3a      	ldr	r2, [r7, #32]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	7e7b      	ldrb	r3, [r7, #25]
 80062ca:	075b      	lsls	r3, r3, #29
 80062cc:	69f9      	ldr	r1, [r7, #28]
 80062ce:	0148      	lsls	r0, r1, #5
 80062d0:	6a39      	ldr	r1, [r7, #32]
 80062d2:	4401      	add	r1, r0
 80062d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80062d8:	4313      	orrs	r3, r2
 80062da:	600b      	str	r3, [r1, #0]
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062f2:	613b      	str	r3, [r7, #16]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	78db      	ldrb	r3, [r3, #3]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d004      	beq.n	8006306 <USB_HC_StartXfer+0x1ae>
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	e003      	b.n	800630e <USB_HC_StartXfer+0x1b6>
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006314:	613b      	str	r3, [r7, #16]
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006322:	461a      	mov	r2, r3
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <USB_HC_StartXfer+0x1da>
 800632e:	2300      	movs	r3, #0
 8006330:	e04e      	b.n	80063d0 <USB_HC_StartXfer+0x278>
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	78db      	ldrb	r3, [r3, #3]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d149      	bne.n	80063ce <USB_HC_StartXfer+0x276>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d045      	beq.n	80063ce <USB_HC_StartXfer+0x276>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	79db      	ldrb	r3, [r3, #7]
 8006346:	2b03      	cmp	r3, #3
 8006348:	d830      	bhi.n	80063ac <USB_HC_StartXfer+0x254>
 800634a:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <USB_HC_StartXfer+0x1f8>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006361 	.word	0x08006361
 8006354:	08006385 	.word	0x08006385
 8006358:	08006361 	.word	0x08006361
 800635c:	08006385 	.word	0x08006385
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	3303      	adds	r3, #3
 8006366:	089b      	lsrs	r3, r3, #2
 8006368:	82fb      	strh	r3, [r7, #22]
 800636a:	8afa      	ldrh	r2, [r7, #22]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	b29b      	uxth	r3, r3
 8006372:	429a      	cmp	r2, r3
 8006374:	d91c      	bls.n	80063b0 <USB_HC_StartXfer+0x258>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	f043 0220 	orr.w	r2, r3, #32
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	619a      	str	r2, [r3, #24]
 8006382:	e015      	b.n	80063b0 <USB_HC_StartXfer+0x258>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	3303      	adds	r3, #3
 800638a:	089b      	lsrs	r3, r3, #2
 800638c:	82fb      	strh	r3, [r7, #22]
 800638e:	8afa      	ldrh	r2, [r7, #22]
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	b29b      	uxth	r3, r3
 800639a:	429a      	cmp	r2, r3
 800639c:	d90a      	bls.n	80063b4 <USB_HC_StartXfer+0x25c>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	619a      	str	r2, [r3, #24]
 80063aa:	e003      	b.n	80063b4 <USB_HC_StartXfer+0x25c>
 80063ac:	bf00      	nop
 80063ae:	e002      	b.n	80063b6 <USB_HC_StartXfer+0x25e>
 80063b0:	bf00      	nop
 80063b2:	e000      	b.n	80063b6 <USB_HC_StartXfer+0x25e>
 80063b4:	bf00      	nop
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	68d9      	ldr	r1, [r3, #12]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	785a      	ldrb	r2, [r3, #1]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2000      	movs	r0, #0
 80063c6:	9000      	str	r0, [sp, #0]
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f7ff fb31 	bl	8005a30 <USB_WritePacket>
 80063ce:	2300      	movs	r3, #0
 80063d0:	4618      	mov	r0, r3
 80063d2:	3728      	adds	r7, #40	; 0x28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	1ff80000 	.word	0x1ff80000

080063dc <USB_HC_ReadInterrupt>:
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <USB_HC_Halt>:
 80063fe:	b480      	push	{r7}
 8006400:	b089      	sub	sp, #36	; 0x24
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	61fb      	str	r3, [r7, #28]
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	4413      	add	r3, r2
 800641e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	0c9b      	lsrs	r3, r3, #18
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	4413      	add	r3, r2
 8006434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	0fdb      	lsrs	r3, r3, #31
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b20      	cmp	r3, #32
 800644c:	d104      	bne.n	8006458 <USB_HC_Halt+0x5a>
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <USB_HC_Halt+0x5a>
 8006454:	2300      	movs	r3, #0
 8006456:	e0c8      	b.n	80065ea <USB_HC_Halt+0x1ec>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <USB_HC_Halt+0x66>
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b02      	cmp	r3, #2
 8006462:	d163      	bne.n	800652c <USB_HC_Halt+0x12e>
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	4413      	add	r3, r2
 800646c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	0151      	lsls	r1, r2, #5
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	440a      	add	r2, r1
 800647a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800647e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	f040 80ab 	bne.w	80065e8 <USB_HC_Halt+0x1ea>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006496:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d133      	bne.n	8006506 <USB_HC_Halt+0x108>
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	0151      	lsls	r1, r2, #5
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	440a      	add	r2, r1
 80064b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	0151      	lsls	r1, r2, #5
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	440a      	add	r2, r1
 80064d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3301      	adds	r3, #1
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064ea:	d81d      	bhi.n	8006528 <USB_HC_Halt+0x12a>
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006502:	d0ec      	beq.n	80064de <USB_HC_Halt+0xe0>
 8006504:	e070      	b.n	80065e8 <USB_HC_Halt+0x1ea>
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	4413      	add	r3, r2
 800650e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	0151      	lsls	r1, r2, #5
 8006518:	69fa      	ldr	r2, [r7, #28]
 800651a:	440a      	add	r2, r1
 800651c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006520:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	e05f      	b.n	80065e8 <USB_HC_Halt+0x1ea>
 8006528:	bf00      	nop
 800652a:	e05d      	b.n	80065e8 <USB_HC_Halt+0x1ea>
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	4413      	add	r3, r2
 8006534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	69fa      	ldr	r2, [r7, #28]
 8006540:	440a      	add	r2, r1
 8006542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006546:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d133      	bne.n	80065c4 <USB_HC_Halt+0x1c6>
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	440a      	add	r2, r1
 8006572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	69fa      	ldr	r2, [r7, #28]
 8006590:	440a      	add	r2, r1
 8006592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800659a:	6013      	str	r3, [r2, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3301      	adds	r3, #1
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065a8:	d81d      	bhi.n	80065e6 <USB_HC_Halt+0x1e8>
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065c0:	d0ec      	beq.n	800659c <USB_HC_Halt+0x19e>
 80065c2:	e011      	b.n	80065e8 <USB_HC_Halt+0x1ea>
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	0151      	lsls	r1, r2, #5
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	440a      	add	r2, r1
 80065da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	e000      	b.n	80065e8 <USB_HC_Halt+0x1ea>
 80065e6:	bf00      	nop
 80065e8:	2300      	movs	r3, #0
 80065ea:	4618      	mov	r0, r3
 80065ec:	3724      	adds	r7, #36	; 0x24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
	...

080065f8 <USB_DoPing>:
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	70fb      	strb	r3, [r7, #3]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	2301      	movs	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	04da      	lsls	r2, r3, #19
 8006614:	4b15      	ldr	r3, [pc, #84]	; (800666c <USB_DoPing+0x74>)
 8006616:	4013      	ands	r3, r2
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	0151      	lsls	r1, r2, #5
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	440a      	add	r2, r1
 8006620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006628:	6113      	str	r3, [r2, #16]
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	4413      	add	r3, r2
 8006632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60bb      	str	r3, [r7, #8]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006640:	60bb      	str	r3, [r7, #8]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	4413      	add	r3, r2
 8006652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006656:	461a      	mov	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	2300      	movs	r3, #0
 800665e:	4618      	mov	r0, r3
 8006660:	371c      	adds	r7, #28
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	1ff80000 	.word	0x1ff80000

08006670 <USB_StopHost>:
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	2300      	movs	r3, #0
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff f911 	bl	80058ac <USB_DisableGlobalInt>
 800668a:	2110      	movs	r1, #16
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff f96b 	bl	8005968 <USB_FlushTxFifo>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <USB_StopHost+0x2c>
 8006698:	2301      	movs	r3, #1
 800669a:	77fb      	strb	r3, [r7, #31]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff f997 	bl	80059d0 <USB_FlushRxFifo>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <USB_StopHost+0x3c>
 80066a8:	2301      	movs	r3, #1
 80066aa:	77fb      	strb	r3, [r7, #31]
 80066ac:	2300      	movs	r3, #0
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	e01f      	b.n	80066f2 <USB_StopHost+0x82>
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e6:	461a      	mov	r2, r3
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	3301      	adds	r3, #1
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	2b0f      	cmp	r3, #15
 80066f6:	d9dc      	bls.n	80066b2 <USB_StopHost+0x42>
 80066f8:	2300      	movs	r3, #0
 80066fa:	61bb      	str	r3, [r7, #24]
 80066fc:	e034      	b.n	8006768 <USB_StopHost+0xf8>
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	4413      	add	r3, r2
 8006706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	613b      	str	r3, [r7, #16]
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800671c:	613b      	str	r3, [r7, #16]
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	4413      	add	r3, r2
 800672e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006732:	461a      	mov	r2, r3
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3301      	adds	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006744:	d80c      	bhi.n	8006760 <USB_StopHost+0xf0>
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	4413      	add	r3, r2
 800674e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800675c:	d0ec      	beq.n	8006738 <USB_StopHost+0xc8>
 800675e:	e000      	b.n	8006762 <USB_StopHost+0xf2>
 8006760:	bf00      	nop
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	3301      	adds	r3, #1
 8006766:	61bb      	str	r3, [r7, #24]
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	2b0f      	cmp	r3, #15
 800676c:	d9c7      	bls.n	80066fe <USB_StopHost+0x8e>
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006774:	461a      	mov	r2, r3
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
 800677a:	6153      	str	r3, [r2, #20]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f04f 32ff 	mov.w	r2, #4294967295
 8006782:	615a      	str	r2, [r3, #20]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff f880 	bl	800588a <USB_EnableGlobalInt>
 800678a:	7ffb      	ldrb	r3, [r7, #31]
 800678c:	4618      	mov	r0, r3
 800678e:	3720      	adds	r7, #32
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006794:	b590      	push	{r4, r7, lr}
 8006796:	b089      	sub	sp, #36	; 0x24
 8006798:	af04      	add	r7, sp, #16
 800679a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800679c:	2301      	movs	r3, #1
 800679e:	2202      	movs	r2, #2
 80067a0:	2102      	movs	r1, #2
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fc66 	bl	8007074 <USBH_FindInterface>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	2bff      	cmp	r3, #255	; 0xff
 80067b0:	d002      	beq.n	80067b8 <USBH_CDC_InterfaceInit+0x24>
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d901      	bls.n	80067bc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80067b8:	2302      	movs	r3, #2
 80067ba:	e13d      	b.n	8006a38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fc3b 	bl	800703c <USBH_SelectInterface>
 80067c6:	4603      	mov	r3, r0
 80067c8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80067ca:	7bbb      	ldrb	r3, [r7, #14]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80067d0:	2302      	movs	r3, #2
 80067d2:	e131      	b.n	8006a38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80067da:	2050      	movs	r0, #80	; 0x50
 80067dc:	f002 fad2 	bl	8008d84 <malloc>
 80067e0:	4603      	mov	r3, r0
 80067e2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80067f4:	2302      	movs	r3, #2
 80067f6:	e11f      	b.n	8006a38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80067f8:	2250      	movs	r2, #80	; 0x50
 80067fa:	2100      	movs	r1, #0
 80067fc:	68b8      	ldr	r0, [r7, #8]
 80067fe:	f002 fb7d 	bl	8008efc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	211a      	movs	r1, #26
 8006808:	fb01 f303 	mul.w	r3, r1, r3
 800680c:	4413      	add	r3, r2
 800680e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	b25b      	sxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	da15      	bge.n	8006846 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	211a      	movs	r1, #26
 8006820:	fb01 f303 	mul.w	r3, r1, r3
 8006824:	4413      	add	r3, r2
 8006826:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800682a:	781a      	ldrb	r2, [r3, #0]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	211a      	movs	r1, #26
 8006836:	fb01 f303 	mul.w	r3, r1, r3
 800683a:	4413      	add	r3, r2
 800683c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006840:	881a      	ldrh	r2, [r3, #0]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	785b      	ldrb	r3, [r3, #1]
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f001 ff2e 	bl	80086ae <USBH_AllocPipe>
 8006852:	4603      	mov	r3, r0
 8006854:	461a      	mov	r2, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	7819      	ldrb	r1, [r3, #0]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	7858      	ldrb	r0, [r3, #1]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	8952      	ldrh	r2, [r2, #10]
 8006872:	9202      	str	r2, [sp, #8]
 8006874:	2203      	movs	r2, #3
 8006876:	9201      	str	r2, [sp, #4]
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	4623      	mov	r3, r4
 800687c:	4602      	mov	r2, r0
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f001 fee6 	bl	8008650 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2200      	movs	r2, #0
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f002 f9f5 	bl	8008c7c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006892:	2300      	movs	r3, #0
 8006894:	2200      	movs	r2, #0
 8006896:	210a      	movs	r1, #10
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fbeb 	bl	8007074 <USBH_FindInterface>
 800689e:	4603      	mov	r3, r0
 80068a0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
 80068a4:	2bff      	cmp	r3, #255	; 0xff
 80068a6:	d002      	beq.n	80068ae <USBH_CDC_InterfaceInit+0x11a>
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d901      	bls.n	80068b2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80068ae:	2302      	movs	r3, #2
 80068b0:	e0c2      	b.n	8006a38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	211a      	movs	r1, #26
 80068b8:	fb01 f303 	mul.w	r3, r1, r3
 80068bc:	4413      	add	r3, r2
 80068be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	b25b      	sxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da16      	bge.n	80068f8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	211a      	movs	r1, #26
 80068d0:	fb01 f303 	mul.w	r3, r1, r3
 80068d4:	4413      	add	r3, r2
 80068d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068da:	781a      	ldrb	r2, [r3, #0]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	211a      	movs	r1, #26
 80068e6:	fb01 f303 	mul.w	r3, r1, r3
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068f0:	881a      	ldrh	r2, [r3, #0]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	835a      	strh	r2, [r3, #26]
 80068f6:	e015      	b.n	8006924 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	211a      	movs	r1, #26
 80068fe:	fb01 f303 	mul.w	r3, r1, r3
 8006902:	4413      	add	r3, r2
 8006904:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006908:	781a      	ldrb	r2, [r3, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	211a      	movs	r1, #26
 8006914:	fb01 f303 	mul.w	r3, r1, r3
 8006918:	4413      	add	r3, r2
 800691a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800691e:	881a      	ldrh	r2, [r3, #0]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	211a      	movs	r1, #26
 800692a:	fb01 f303 	mul.w	r3, r1, r3
 800692e:	4413      	add	r3, r2
 8006930:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	b25b      	sxtb	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	da16      	bge.n	800696a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	211a      	movs	r1, #26
 8006942:	fb01 f303 	mul.w	r3, r1, r3
 8006946:	4413      	add	r3, r2
 8006948:	f203 3356 	addw	r3, r3, #854	; 0x356
 800694c:	781a      	ldrb	r2, [r3, #0]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	211a      	movs	r1, #26
 8006958:	fb01 f303 	mul.w	r3, r1, r3
 800695c:	4413      	add	r3, r2
 800695e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006962:	881a      	ldrh	r2, [r3, #0]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	835a      	strh	r2, [r3, #26]
 8006968:	e015      	b.n	8006996 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	211a      	movs	r1, #26
 8006970:	fb01 f303 	mul.w	r3, r1, r3
 8006974:	4413      	add	r3, r2
 8006976:	f203 3356 	addw	r3, r3, #854	; 0x356
 800697a:	781a      	ldrb	r2, [r3, #0]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	211a      	movs	r1, #26
 8006986:	fb01 f303 	mul.w	r3, r1, r3
 800698a:	4413      	add	r3, r2
 800698c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006990:	881a      	ldrh	r2, [r3, #0]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	7b9b      	ldrb	r3, [r3, #14]
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 fe86 	bl	80086ae <USBH_AllocPipe>
 80069a2:	4603      	mov	r3, r0
 80069a4:	461a      	mov	r2, r3
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	7bdb      	ldrb	r3, [r3, #15]
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fe7c 	bl	80086ae <USBH_AllocPipe>
 80069b6:	4603      	mov	r3, r0
 80069b8:	461a      	mov	r2, r3
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	7b59      	ldrb	r1, [r3, #13]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	7b98      	ldrb	r0, [r3, #14]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	8b12      	ldrh	r2, [r2, #24]
 80069d6:	9202      	str	r2, [sp, #8]
 80069d8:	2202      	movs	r2, #2
 80069da:	9201      	str	r2, [sp, #4]
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	4623      	mov	r3, r4
 80069e0:	4602      	mov	r2, r0
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 fe34 	bl	8008650 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	7b19      	ldrb	r1, [r3, #12]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	7bd8      	ldrb	r0, [r3, #15]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	8b52      	ldrh	r2, [r2, #26]
 8006a00:	9202      	str	r2, [sp, #8]
 8006a02:	2202      	movs	r2, #2
 8006a04:	9201      	str	r2, [sp, #4]
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	4623      	mov	r3, r4
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 fe1f 	bl	8008650 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	7b5b      	ldrb	r3, [r3, #13]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f002 f92a 	bl	8008c7c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	7b1b      	ldrb	r3, [r3, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f002 f923 	bl	8008c7c <USBH_LL_SetToggle>

  return USBH_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd90      	pop	{r4, r7, pc}

08006a40 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00e      	beq.n	8006a78 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 fe14 	bl	800868e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 fe3f 	bl	80086f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	7b1b      	ldrb	r3, [r3, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00e      	beq.n	8006a9e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	7b1b      	ldrb	r3, [r3, #12]
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 fe01 	bl	800868e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	7b1b      	ldrb	r3, [r3, #12]
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 fe2c 	bl	80086f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	7b5b      	ldrb	r3, [r3, #13]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00e      	beq.n	8006ac4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	7b5b      	ldrb	r3, [r3, #13]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 fdee 	bl	800868e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	7b5b      	ldrb	r3, [r3, #13]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 fe19 	bl	80086f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00b      	beq.n	8006ae8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f002 f95b 	bl	8008d94 <free>
    phost->pActiveClass->pData = 0U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3340      	adds	r3, #64	; 0x40
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f8b1 	bl	8006c72 <GetLineCoding>
 8006b10:	4603      	mov	r3, r0
 8006b12:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006b14:	7afb      	ldrb	r3, [r7, #11]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d105      	bne.n	8006b26 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b20:	2102      	movs	r1, #2
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006b26:	7afb      	ldrb	r3, [r7, #11]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b50:	2b04      	cmp	r3, #4
 8006b52:	d877      	bhi.n	8006c44 <USBH_CDC_Process+0x114>
 8006b54:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <USBH_CDC_Process+0x2c>)
 8006b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5a:	bf00      	nop
 8006b5c:	08006b71 	.word	0x08006b71
 8006b60:	08006b77 	.word	0x08006b77
 8006b64:	08006ba7 	.word	0x08006ba7
 8006b68:	08006c1b 	.word	0x08006c1b
 8006b6c:	08006c29 	.word	0x08006c29
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	73fb      	strb	r3, [r7, #15]
      break;
 8006b74:	e06d      	b.n	8006c52 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f897 	bl	8006cb0 <SetLineCoding>
 8006b82:	4603      	mov	r3, r0
 8006b84:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b86:	7bbb      	ldrb	r3, [r7, #14]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d104      	bne.n	8006b96 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b94:	e058      	b.n	8006c48 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d055      	beq.n	8006c48 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2204      	movs	r2, #4
 8006ba0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ba4:	e050      	b.n	8006c48 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	3340      	adds	r3, #64	; 0x40
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f860 	bl	8006c72 <GetLineCoding>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bb6:	7bbb      	ldrb	r3, [r7, #14]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d126      	bne.n	8006c0a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bce:	791b      	ldrb	r3, [r3, #4]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d13b      	bne.n	8006c4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bde:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d133      	bne.n	8006c4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d12b      	bne.n	8006c4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d124      	bne.n	8006c4c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f958 	bl	8006eb8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c08:	e020      	b.n	8006c4c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d01d      	beq.n	8006c4c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2204      	movs	r2, #4
 8006c14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c18:	e018      	b.n	8006c4c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f867 	bl	8006cee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f8da 	bl	8006dda <CDC_ProcessReception>
      break;
 8006c26:	e014      	b.n	8006c52 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006c28:	2100      	movs	r1, #0
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 ffef 	bl	8007c0e <USBH_ClrFeature>
 8006c30:	4603      	mov	r3, r0
 8006c32:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006c42:	e005      	b.n	8006c50 <USBH_CDC_Process+0x120>

    default:
      break;
 8006c44:	bf00      	nop
 8006c46:	e004      	b.n	8006c52 <USBH_CDC_Process+0x122>
      break;
 8006c48:	bf00      	nop
 8006c4a:	e002      	b.n	8006c52 <USBH_CDC_Process+0x122>
      break;
 8006c4c:	bf00      	nop
 8006c4e:	e000      	b.n	8006c52 <USBH_CDC_Process+0x122>
      break;
 8006c50:	bf00      	nop

  }

  return status;
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b082      	sub	sp, #8
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	22a1      	movs	r2, #161	; 0xa1
 8006c80:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2221      	movs	r2, #33	; 0x21
 8006c86:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2207      	movs	r2, #7
 8006c98:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2207      	movs	r2, #7
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 fa83 	bl	80081ac <USBH_CtlReq>
 8006ca6:	4603      	mov	r3, r0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2221      	movs	r2, #33	; 0x21
 8006cbe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2207      	movs	r2, #7
 8006cd6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2207      	movs	r2, #7
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f001 fa64 	bl	80081ac <USBH_CtlReq>
 8006ce4:	4603      	mov	r3, r0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b086      	sub	sp, #24
 8006cf2:	af02      	add	r7, sp, #8
 8006cf4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d002      	beq.n	8006d14 <CDC_ProcessTransmission+0x26>
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d023      	beq.n	8006d5a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006d12:	e05e      	b.n	8006dd2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	8b12      	ldrh	r2, [r2, #24]
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d90b      	bls.n	8006d38 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	69d9      	ldr	r1, [r3, #28]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8b1a      	ldrh	r2, [r3, #24]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	7b5b      	ldrb	r3, [r3, #13]
 8006d2c:	2001      	movs	r0, #1
 8006d2e:	9000      	str	r0, [sp, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 fc4a 	bl	80085ca <USBH_BulkSendData>
 8006d36:	e00b      	b.n	8006d50 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	7b5b      	ldrb	r3, [r3, #13]
 8006d46:	2001      	movs	r0, #1
 8006d48:	9000      	str	r0, [sp, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fc3d 	bl	80085ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d58:	e03b      	b.n	8006dd2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	7b5b      	ldrb	r3, [r3, #13]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 ff61 	bl	8008c28 <USBH_LL_GetURBState>
 8006d66:	4603      	mov	r3, r0
 8006d68:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d6a:	7afb      	ldrb	r3, [r7, #11]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d128      	bne.n	8006dc2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	8b12      	ldrh	r2, [r2, #24]
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d90e      	bls.n	8006d9a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	8b12      	ldrh	r2, [r2, #24]
 8006d84:	1a9a      	subs	r2, r3, r2
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	8b12      	ldrh	r2, [r2, #24]
 8006d92:	441a      	add	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	61da      	str	r2, [r3, #28]
 8006d98:	e002      	b.n	8006da0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d004      	beq.n	8006db2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006db0:	e00e      	b.n	8006dd0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f868 	bl	8006e90 <USBH_CDC_TransmitCallback>
      break;
 8006dc0:	e006      	b.n	8006dd0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006dc2:	7afb      	ldrb	r3, [r7, #11]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d103      	bne.n	8006dd0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006dd0:	bf00      	nop
  }
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b086      	sub	sp, #24
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dec:	2300      	movs	r3, #0
 8006dee:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d002      	beq.n	8006e00 <CDC_ProcessReception+0x26>
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d00e      	beq.n	8006e1c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006dfe:	e043      	b.n	8006e88 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	6a19      	ldr	r1, [r3, #32]
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	8b5a      	ldrh	r2, [r3, #26]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	7b1b      	ldrb	r3, [r3, #12]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 fc01 	bl	8008614 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2204      	movs	r2, #4
 8006e16:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e1a:	e035      	b.n	8006e88 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	7b1b      	ldrb	r3, [r3, #12]
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 ff00 	bl	8008c28 <USBH_LL_GetURBState>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006e2c:	7cfb      	ldrb	r3, [r7, #19]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d129      	bne.n	8006e86 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	7b1b      	ldrb	r3, [r3, #12]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 fe63 	bl	8008b04 <USBH_LL_GetLastXferSize>
 8006e3e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d016      	beq.n	8006e78 <CDC_ProcessReception+0x9e>
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	8b5b      	ldrh	r3, [r3, #26]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d910      	bls.n	8006e78 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	1ad2      	subs	r2, r2, r3
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	6a1a      	ldr	r2, [r3, #32]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	441a      	add	r2, r3
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2203      	movs	r2, #3
 8006e72:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e76:	e006      	b.n	8006e86 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f80f 	bl	8006ea4 <USBH_CDC_ReceiveCallback>
      break;
 8006e86:	bf00      	nop
  }
}
 8006e88:	bf00      	nop
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e029      	b.n	8006f38 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	79fa      	ldrb	r2, [r7, #7]
 8006ee8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 f81f 	bl	8006f40 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f001 fd33 	bl	800899c <USBH_LL_Init>

  return USBH_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	e009      	b.n	8006f66 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	33e0      	adds	r3, #224	; 0xe0
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3301      	adds	r3, #1
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b0f      	cmp	r3, #15
 8006f6a:	d9f2      	bls.n	8006f52 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	e009      	b.n	8006f86 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	3301      	adds	r3, #1
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f8c:	d3f1      	bcc.n	8006f72 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2240      	movs	r2, #64	; 0x40
 8006fb2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d016      	beq.n	800702a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10e      	bne.n	8007024 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800700c:	1c59      	adds	r1, r3, #1
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	33de      	adds	r3, #222	; 0xde
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	73fb      	strb	r3, [r7, #15]
 8007022:	e004      	b.n	800702e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007024:	2302      	movs	r3, #2
 8007026:	73fb      	strb	r3, [r7, #15]
 8007028:	e001      	b.n	800702e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800702a:	2302      	movs	r3, #2
 800702c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	429a      	cmp	r2, r3
 8007056:	d204      	bcs.n	8007062 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	78fa      	ldrb	r2, [r7, #3]
 800705c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007060:	e001      	b.n	8007066 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007062:	2302      	movs	r3, #2
 8007064:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007066:	7bfb      	ldrb	r3, [r7, #15]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	4608      	mov	r0, r1
 800707e:	4611      	mov	r1, r2
 8007080:	461a      	mov	r2, r3
 8007082:	4603      	mov	r3, r0
 8007084:	70fb      	strb	r3, [r7, #3]
 8007086:	460b      	mov	r3, r1
 8007088:	70bb      	strb	r3, [r7, #2]
 800708a:	4613      	mov	r3, r2
 800708c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007092:	2300      	movs	r3, #0
 8007094:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800709c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800709e:	e025      	b.n	80070ec <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	221a      	movs	r2, #26
 80070a4:	fb02 f303 	mul.w	r3, r2, r3
 80070a8:	3308      	adds	r3, #8
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	3302      	adds	r3, #2
 80070b0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	795b      	ldrb	r3, [r3, #5]
 80070b6:	78fa      	ldrb	r2, [r7, #3]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d002      	beq.n	80070c2 <USBH_FindInterface+0x4e>
 80070bc:	78fb      	ldrb	r3, [r7, #3]
 80070be:	2bff      	cmp	r3, #255	; 0xff
 80070c0:	d111      	bne.n	80070e6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070c6:	78ba      	ldrb	r2, [r7, #2]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d002      	beq.n	80070d2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070cc:	78bb      	ldrb	r3, [r7, #2]
 80070ce:	2bff      	cmp	r3, #255	; 0xff
 80070d0:	d109      	bne.n	80070e6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070d6:	787a      	ldrb	r2, [r7, #1]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d002      	beq.n	80070e2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070dc:	787b      	ldrb	r3, [r7, #1]
 80070de:	2bff      	cmp	r3, #255	; 0xff
 80070e0:	d101      	bne.n	80070e6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
 80070e4:	e006      	b.n	80070f4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
 80070e8:	3301      	adds	r3, #1
 80070ea:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d9d6      	bls.n	80070a0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80070f2:	23ff      	movs	r3, #255	; 0xff
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 fc83 	bl	8008a14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800710e:	2101      	movs	r1, #1
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 fd9c 	bl	8008c4e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b088      	sub	sp, #32
 8007124:	af04      	add	r7, sp, #16
 8007126:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007128:	2302      	movs	r3, #2
 800712a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b01      	cmp	r3, #1
 800713a:	d102      	bne.n	8007142 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2203      	movs	r2, #3
 8007140:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b0b      	cmp	r3, #11
 800714a:	f200 81be 	bhi.w	80074ca <USBH_Process+0x3aa>
 800714e:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <USBH_Process+0x34>)
 8007150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007154:	08007185 	.word	0x08007185
 8007158:	080071b7 	.word	0x080071b7
 800715c:	0800721f 	.word	0x0800721f
 8007160:	08007465 	.word	0x08007465
 8007164:	080074cb 	.word	0x080074cb
 8007168:	080072c3 	.word	0x080072c3
 800716c:	0800740b 	.word	0x0800740b
 8007170:	080072f9 	.word	0x080072f9
 8007174:	08007319 	.word	0x08007319
 8007178:	08007339 	.word	0x08007339
 800717c:	0800737d 	.word	0x0800737d
 8007180:	0800744d 	.word	0x0800744d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 819e 	beq.w	80074ce <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007198:	20c8      	movs	r0, #200	; 0xc8
 800719a:	f001 fd9f 	bl	8008cdc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fc95 	bl	8008ace <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80071b4:	e18b      	b.n	80074ce <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d107      	bne.n	80071d0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071ce:	e18d      	b.n	80074ec <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071da:	d914      	bls.n	8007206 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071e2:	3301      	adds	r3, #1
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d903      	bls.n	80071fe <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	220d      	movs	r2, #13
 80071fa:	701a      	strb	r2, [r3, #0]
      break;
 80071fc:	e176      	b.n	80074ec <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	701a      	strb	r2, [r3, #0]
      break;
 8007204:	e172      	b.n	80074ec <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800720c:	f103 020a 	add.w	r2, r3, #10
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007216:	200a      	movs	r0, #10
 8007218:	f001 fd60 	bl	8008cdc <USBH_Delay>
      break;
 800721c:	e166      	b.n	80074ec <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800722e:	2104      	movs	r1, #4
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007234:	2064      	movs	r0, #100	; 0x64
 8007236:	f001 fd51 	bl	8008cdc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fc20 	bl	8008a80 <USBH_LL_GetSpeed>
 8007240:	4603      	mov	r3, r0
 8007242:	461a      	mov	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2205      	movs	r2, #5
 800724e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007250:	2100      	movs	r1, #0
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 fa2b 	bl	80086ae <USBH_AllocPipe>
 8007258:	4603      	mov	r3, r0
 800725a:	461a      	mov	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007260:	2180      	movs	r1, #128	; 0x80
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 fa23 	bl	80086ae <USBH_AllocPipe>
 8007268:	4603      	mov	r3, r0
 800726a:	461a      	mov	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7919      	ldrb	r1, [r3, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007284:	b292      	uxth	r2, r2
 8007286:	9202      	str	r2, [sp, #8]
 8007288:	2200      	movs	r2, #0
 800728a:	9201      	str	r2, [sp, #4]
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	4603      	mov	r3, r0
 8007290:	2280      	movs	r2, #128	; 0x80
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 f9dc 	bl	8008650 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	7959      	ldrb	r1, [r3, #5]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80072ac:	b292      	uxth	r2, r2
 80072ae:	9202      	str	r2, [sp, #8]
 80072b0:	2200      	movs	r2, #0
 80072b2:	9201      	str	r2, [sp, #4]
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	4603      	mov	r3, r0
 80072b8:	2200      	movs	r2, #0
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 f9c8 	bl	8008650 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072c0:	e114      	b.n	80074ec <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f918 	bl	80074f8 <USBH_HandleEnum>
 80072c8:	4603      	mov	r3, r0
 80072ca:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f040 80fe 	bne.w	80074d2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d103      	bne.n	80072f0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2208      	movs	r2, #8
 80072ec:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072ee:	e0f0      	b.n	80074d2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2207      	movs	r2, #7
 80072f4:	701a      	strb	r2, [r3, #0]
      break;
 80072f6:	e0ec      	b.n	80074d2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 80e9 	beq.w	80074d6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800730a:	2101      	movs	r1, #1
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2208      	movs	r2, #8
 8007314:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007316:	e0de      	b.n	80074d6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800731e:	b29b      	uxth	r3, r3
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fc2c 	bl	8007b80 <USBH_SetCfg>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	f040 80d5 	bne.w	80074da <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2209      	movs	r2, #9
 8007334:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007336:	e0d0      	b.n	80074da <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b00      	cmp	r3, #0
 8007344:	d016      	beq.n	8007374 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007346:	2101      	movs	r1, #1
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fc3c 	bl	8007bc6 <USBH_SetFeature>
 800734e:	4603      	mov	r3, r0
 8007350:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007352:	7bbb      	ldrb	r3, [r7, #14]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d103      	bne.n	8007362 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	220a      	movs	r2, #10
 800735e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007360:	e0bd      	b.n	80074de <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b03      	cmp	r3, #3
 8007368:	f040 80b9 	bne.w	80074de <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	220a      	movs	r2, #10
 8007370:	701a      	strb	r2, [r3, #0]
      break;
 8007372:	e0b4      	b.n	80074de <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	220a      	movs	r2, #10
 8007378:	701a      	strb	r2, [r3, #0]
      break;
 800737a:	e0b0      	b.n	80074de <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 80ad 	beq.w	80074e2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007390:	2300      	movs	r3, #0
 8007392:	73fb      	strb	r3, [r7, #15]
 8007394:	e016      	b.n	80073c4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007396:	7bfa      	ldrb	r2, [r7, #15]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	32de      	adds	r2, #222	; 0xde
 800739c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a0:	791a      	ldrb	r2, [r3, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d108      	bne.n	80073be <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80073ac:	7bfa      	ldrb	r2, [r7, #15]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	32de      	adds	r2, #222	; 0xde
 80073b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80073bc:	e005      	b.n	80073ca <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	3301      	adds	r3, #1
 80073c2:	73fb      	strb	r3, [r7, #15]
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0e5      	beq.n	8007396 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d016      	beq.n	8007402 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d109      	bne.n	80073fa <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2206      	movs	r2, #6
 80073ea:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073f2:	2103      	movs	r1, #3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073f8:	e073      	b.n	80074e2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	220d      	movs	r2, #13
 80073fe:	701a      	strb	r2, [r3, #0]
      break;
 8007400:	e06f      	b.n	80074e2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	220d      	movs	r2, #13
 8007406:	701a      	strb	r2, [r3, #0]
      break;
 8007408:	e06b      	b.n	80074e2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007410:	2b00      	cmp	r3, #0
 8007412:	d017      	beq.n	8007444 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	4798      	blx	r3
 8007420:	4603      	mov	r3, r0
 8007422:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d103      	bne.n	8007434 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	220b      	movs	r2, #11
 8007430:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007432:	e058      	b.n	80074e6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b02      	cmp	r3, #2
 800743a:	d154      	bne.n	80074e6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	220d      	movs	r2, #13
 8007440:	701a      	strb	r2, [r3, #0]
      break;
 8007442:	e050      	b.n	80074e6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	220d      	movs	r2, #13
 8007448:	701a      	strb	r2, [r3, #0]
      break;
 800744a:	e04c      	b.n	80074e6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d049      	beq.n	80074ea <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
      }
      break;
 8007462:	e042      	b.n	80074ea <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7ff fd67 	bl	8006f40 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d009      	beq.n	8007490 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074a0:	2105      	movs	r1, #5
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d107      	bne.n	80074c2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7ff fe20 	bl	8007100 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074c0:	e014      	b.n	80074ec <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 faa6 	bl	8008a14 <USBH_LL_Start>
      break;
 80074c8:	e010      	b.n	80074ec <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80074ca:	bf00      	nop
 80074cc:	e00e      	b.n	80074ec <USBH_Process+0x3cc>
      break;
 80074ce:	bf00      	nop
 80074d0:	e00c      	b.n	80074ec <USBH_Process+0x3cc>
      break;
 80074d2:	bf00      	nop
 80074d4:	e00a      	b.n	80074ec <USBH_Process+0x3cc>
    break;
 80074d6:	bf00      	nop
 80074d8:	e008      	b.n	80074ec <USBH_Process+0x3cc>
      break;
 80074da:	bf00      	nop
 80074dc:	e006      	b.n	80074ec <USBH_Process+0x3cc>
      break;
 80074de:	bf00      	nop
 80074e0:	e004      	b.n	80074ec <USBH_Process+0x3cc>
      break;
 80074e2:	bf00      	nop
 80074e4:	e002      	b.n	80074ec <USBH_Process+0x3cc>
      break;
 80074e6:	bf00      	nop
 80074e8:	e000      	b.n	80074ec <USBH_Process+0x3cc>
      break;
 80074ea:	bf00      	nop
  }
  return USBH_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop

080074f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af04      	add	r7, sp, #16
 80074fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007500:	2301      	movs	r3, #1
 8007502:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007504:	2301      	movs	r3, #1
 8007506:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	785b      	ldrb	r3, [r3, #1]
 800750c:	2b07      	cmp	r3, #7
 800750e:	f200 81c1 	bhi.w	8007894 <USBH_HandleEnum+0x39c>
 8007512:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <USBH_HandleEnum+0x20>)
 8007514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007518:	08007539 	.word	0x08007539
 800751c:	080075f7 	.word	0x080075f7
 8007520:	08007661 	.word	0x08007661
 8007524:	080076ef 	.word	0x080076ef
 8007528:	08007759 	.word	0x08007759
 800752c:	080077c9 	.word	0x080077c9
 8007530:	0800780f 	.word	0x0800780f
 8007534:	08007855 	.word	0x08007855
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007538:	2108      	movs	r1, #8
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fa50 	bl	80079e0 <USBH_Get_DevDesc>
 8007540:	4603      	mov	r3, r0
 8007542:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d130      	bne.n	80075ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	7919      	ldrb	r1, [r3, #4]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800756e:	b292      	uxth	r2, r2
 8007570:	9202      	str	r2, [sp, #8]
 8007572:	2200      	movs	r2, #0
 8007574:	9201      	str	r2, [sp, #4]
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	4603      	mov	r3, r0
 800757a:	2280      	movs	r2, #128	; 0x80
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f001 f867 	bl	8008650 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	7959      	ldrb	r1, [r3, #5]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007596:	b292      	uxth	r2, r2
 8007598:	9202      	str	r2, [sp, #8]
 800759a:	2200      	movs	r2, #0
 800759c:	9201      	str	r2, [sp, #4]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	4603      	mov	r3, r0
 80075a2:	2200      	movs	r2, #0
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 f853 	bl	8008650 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80075aa:	e175      	b.n	8007898 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	f040 8172 	bne.w	8007898 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075ba:	3301      	adds	r3, #1
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d903      	bls.n	80075d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	220d      	movs	r2, #13
 80075d2:	701a      	strb	r2, [r3, #0]
      break;
 80075d4:	e160      	b.n	8007898 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	795b      	ldrb	r3, [r3, #5]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 f887 	bl	80086f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	791b      	ldrb	r3, [r3, #4]
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 f881 	bl	80086f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]
      break;
 80075f4:	e150      	b.n	8007898 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80075f6:	2112      	movs	r1, #18
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f9f1 	bl	80079e0 <USBH_Get_DevDesc>
 80075fe:	4603      	mov	r3, r0
 8007600:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d103      	bne.n	8007610 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800760e:	e145      	b.n	800789c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007610:	7bbb      	ldrb	r3, [r7, #14]
 8007612:	2b03      	cmp	r3, #3
 8007614:	f040 8142 	bne.w	800789c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800761e:	3301      	adds	r3, #1
 8007620:	b2da      	uxtb	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800762e:	2b03      	cmp	r3, #3
 8007630:	d903      	bls.n	800763a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	220d      	movs	r2, #13
 8007636:	701a      	strb	r2, [r3, #0]
      break;
 8007638:	e130      	b.n	800789c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	795b      	ldrb	r3, [r3, #5]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 f855 	bl	80086f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	791b      	ldrb	r3, [r3, #4]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 f84f 	bl	80086f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
      break;
 800765e:	e11d      	b.n	800789c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007660:	2101      	movs	r1, #1
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fa68 	bl	8007b38 <USBH_SetAddress>
 8007668:	4603      	mov	r3, r0
 800766a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d132      	bne.n	80076d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007672:	2002      	movs	r0, #2
 8007674:	f001 fb32 	bl	8008cdc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2203      	movs	r2, #3
 8007684:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	7919      	ldrb	r1, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800769a:	b292      	uxth	r2, r2
 800769c:	9202      	str	r2, [sp, #8]
 800769e:	2200      	movs	r2, #0
 80076a0:	9201      	str	r2, [sp, #4]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	4603      	mov	r3, r0
 80076a6:	2280      	movs	r2, #128	; 0x80
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 ffd1 	bl	8008650 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	7959      	ldrb	r1, [r3, #5]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076c2:	b292      	uxth	r2, r2
 80076c4:	9202      	str	r2, [sp, #8]
 80076c6:	2200      	movs	r2, #0
 80076c8:	9201      	str	r2, [sp, #4]
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	4603      	mov	r3, r0
 80076ce:	2200      	movs	r2, #0
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 ffbd 	bl	8008650 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076d6:	e0e3      	b.n	80078a0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	f040 80e0 	bne.w	80078a0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	220d      	movs	r2, #13
 80076e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	705a      	strb	r2, [r3, #1]
      break;
 80076ec:	e0d8      	b.n	80078a0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80076ee:	2109      	movs	r1, #9
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f99d 	bl	8007a30 <USBH_Get_CfgDesc>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d103      	bne.n	8007708 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2204      	movs	r2, #4
 8007704:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007706:	e0cd      	b.n	80078a4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	2b03      	cmp	r3, #3
 800770c:	f040 80ca 	bne.w	80078a4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007716:	3301      	adds	r3, #1
 8007718:	b2da      	uxtb	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007726:	2b03      	cmp	r3, #3
 8007728:	d903      	bls.n	8007732 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	220d      	movs	r2, #13
 800772e:	701a      	strb	r2, [r3, #0]
      break;
 8007730:	e0b8      	b.n	80078a4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	795b      	ldrb	r3, [r3, #5]
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 ffd9 	bl	80086f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	791b      	ldrb	r3, [r3, #4]
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 ffd3 	bl	80086f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	701a      	strb	r2, [r3, #0]
      break;
 8007756:	e0a5      	b.n	80078a4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f965 	bl	8007a30 <USBH_Get_CfgDesc>
 8007766:	4603      	mov	r3, r0
 8007768:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800776a:	7bbb      	ldrb	r3, [r7, #14]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d103      	bne.n	8007778 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2205      	movs	r2, #5
 8007774:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007776:	e097      	b.n	80078a8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	2b03      	cmp	r3, #3
 800777c:	f040 8094 	bne.w	80078a8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007786:	3301      	adds	r3, #1
 8007788:	b2da      	uxtb	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007796:	2b03      	cmp	r3, #3
 8007798:	d903      	bls.n	80077a2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	220d      	movs	r2, #13
 800779e:	701a      	strb	r2, [r3, #0]
      break;
 80077a0:	e082      	b.n	80078a8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	795b      	ldrb	r3, [r3, #5]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 ffa1 	bl	80086f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	791b      	ldrb	r3, [r3, #4]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 ff9b 	bl	80086f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	701a      	strb	r2, [r3, #0]
      break;
 80077c6:	e06f      	b.n	80078a8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d019      	beq.n	8007806 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077de:	23ff      	movs	r3, #255	; 0xff
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f949 	bl	8007a78 <USBH_Get_StringDesc>
 80077e6:	4603      	mov	r3, r0
 80077e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d103      	bne.n	80077f8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2206      	movs	r2, #6
 80077f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077f6:	e059      	b.n	80078ac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077f8:	7bbb      	ldrb	r3, [r7, #14]
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d156      	bne.n	80078ac <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2206      	movs	r2, #6
 8007802:	705a      	strb	r2, [r3, #1]
      break;
 8007804:	e052      	b.n	80078ac <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2206      	movs	r2, #6
 800780a:	705a      	strb	r2, [r3, #1]
      break;
 800780c:	e04e      	b.n	80078ac <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007814:	2b00      	cmp	r3, #0
 8007816:	d019      	beq.n	800784c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007824:	23ff      	movs	r3, #255	; 0xff
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f926 	bl	8007a78 <USBH_Get_StringDesc>
 800782c:	4603      	mov	r3, r0
 800782e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d103      	bne.n	800783e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2207      	movs	r2, #7
 800783a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800783c:	e038      	b.n	80078b0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b03      	cmp	r3, #3
 8007842:	d135      	bne.n	80078b0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2207      	movs	r2, #7
 8007848:	705a      	strb	r2, [r3, #1]
      break;
 800784a:	e031      	b.n	80078b0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2207      	movs	r2, #7
 8007850:	705a      	strb	r2, [r3, #1]
      break;
 8007852:	e02d      	b.n	80078b0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800785a:	2b00      	cmp	r3, #0
 800785c:	d017      	beq.n	800788e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800786a:	23ff      	movs	r3, #255	; 0xff
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f903 	bl	8007a78 <USBH_Get_StringDesc>
 8007872:	4603      	mov	r3, r0
 8007874:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007880:	e018      	b.n	80078b4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	2b03      	cmp	r3, #3
 8007886:	d115      	bne.n	80078b4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007888:	2300      	movs	r3, #0
 800788a:	73fb      	strb	r3, [r7, #15]
      break;
 800788c:	e012      	b.n	80078b4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]
      break;
 8007892:	e00f      	b.n	80078b4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007894:	bf00      	nop
 8007896:	e00e      	b.n	80078b6 <USBH_HandleEnum+0x3be>
      break;
 8007898:	bf00      	nop
 800789a:	e00c      	b.n	80078b6 <USBH_HandleEnum+0x3be>
      break;
 800789c:	bf00      	nop
 800789e:	e00a      	b.n	80078b6 <USBH_HandleEnum+0x3be>
      break;
 80078a0:	bf00      	nop
 80078a2:	e008      	b.n	80078b6 <USBH_HandleEnum+0x3be>
      break;
 80078a4:	bf00      	nop
 80078a6:	e006      	b.n	80078b6 <USBH_HandleEnum+0x3be>
      break;
 80078a8:	bf00      	nop
 80078aa:	e004      	b.n	80078b6 <USBH_HandleEnum+0x3be>
      break;
 80078ac:	bf00      	nop
 80078ae:	e002      	b.n	80078b6 <USBH_HandleEnum+0x3be>
      break;
 80078b0:	bf00      	nop
 80078b2:	e000      	b.n	80078b6 <USBH_HandleEnum+0x3be>
      break;
 80078b4:	bf00      	nop
  }
  return Status;
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80078d2:	bf00      	nop
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f804 	bl	8007902 <USBH_HandleSof>
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b0b      	cmp	r3, #11
 8007912:	d10a      	bne.n	800792a <USBH_HandleSof+0x28>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800791a:	2b00      	cmp	r3, #0
 800791c:	d005      	beq.n	800792a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	4798      	blx	r3
  }
}
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007942:	bf00      	nop
}
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800795e:	bf00      	nop
}
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 f846 	bl	8008a4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	791b      	ldrb	r3, [r3, #4]
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fe93 	bl	80086f0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	795b      	ldrb	r3, [r3, #5]
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fe8d 	bl	80086f0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80079f2:	78fb      	ldrb	r3, [r7, #3]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	4613      	mov	r3, r2
 80079fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079fe:	2100      	movs	r1, #0
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f864 	bl	8007ace <USBH_GetDescriptor>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10a      	bne.n	8007a26 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a1c:	78fa      	ldrb	r2, [r7, #3]
 8007a1e:	b292      	uxth	r2, r2
 8007a20:	4619      	mov	r1, r3
 8007a22:	f000 f919 	bl	8007c58 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af02      	add	r7, sp, #8
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	331c      	adds	r3, #28
 8007a40:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007a42:	887b      	ldrh	r3, [r7, #2]
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f83d 	bl	8007ace <USBH_GetDescriptor>
 8007a54:	4603      	mov	r3, r0
 8007a56:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d107      	bne.n	8007a6e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007a5e:	887b      	ldrh	r3, [r7, #2]
 8007a60:	461a      	mov	r2, r3
 8007a62:	68b9      	ldr	r1, [r7, #8]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f989 	bl	8007d7c <USBH_ParseCfgDesc>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	607a      	str	r2, [r7, #4]
 8007a82:	461a      	mov	r2, r3
 8007a84:	460b      	mov	r3, r1
 8007a86:	72fb      	strb	r3, [r7, #11]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007a8c:	7afb      	ldrb	r3, [r7, #11]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007a94:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a9c:	893b      	ldrh	r3, [r7, #8]
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 f812 	bl	8007ace <USBH_GetDescriptor>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d107      	bne.n	8007ac4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007aba:	893a      	ldrh	r2, [r7, #8]
 8007abc:	6879      	ldr	r1, [r7, #4]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fb26 	bl	8008110 <USBH_ParseStringDesc>
  }

  return status;
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	607b      	str	r3, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	72fb      	strb	r3, [r7, #11]
 8007adc:	4613      	mov	r3, r2
 8007ade:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	789b      	ldrb	r3, [r3, #2]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d11c      	bne.n	8007b22 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ae8:	7afb      	ldrb	r3, [r7, #11]
 8007aea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2206      	movs	r2, #6
 8007af8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	893a      	ldrh	r2, [r7, #8]
 8007afe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b00:	893b      	ldrh	r3, [r7, #8]
 8007b02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b0a:	d104      	bne.n	8007b16 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f240 4209 	movw	r2, #1033	; 0x409
 8007b12:	829a      	strh	r2, [r3, #20]
 8007b14:	e002      	b.n	8007b1c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8b3a      	ldrh	r2, [r7, #24]
 8007b20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007b22:	8b3b      	ldrh	r3, [r7, #24]
 8007b24:	461a      	mov	r2, r3
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 fb3f 	bl	80081ac <USBH_CtlReq>
 8007b2e:	4603      	mov	r3, r0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	789b      	ldrb	r3, [r3, #2]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d10f      	bne.n	8007b6c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2205      	movs	r2, #5
 8007b56:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007b58:	78fb      	ldrb	r3, [r7, #3]
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2100      	movs	r1, #0
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fb1b 	bl	80081ac <USBH_CtlReq>
 8007b76:	4603      	mov	r3, r0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	789b      	ldrb	r3, [r3, #2]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d10e      	bne.n	8007bb2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2209      	movs	r2, #9
 8007b9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	887a      	ldrh	r2, [r7, #2]
 8007ba4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 faf8 	bl	80081ac <USBH_CtlReq>
 8007bbc:	4603      	mov	r3, r0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	789b      	ldrb	r3, [r3, #2]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d10f      	bne.n	8007bfa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2203      	movs	r2, #3
 8007be4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fad4 	bl	80081ac <USBH_CtlReq>
 8007c04:	4603      	mov	r3, r0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b082      	sub	sp, #8
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	460b      	mov	r3, r1
 8007c18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	789b      	ldrb	r3, [r3, #2]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d10f      	bne.n	8007c42 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2202      	movs	r2, #2
 8007c26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007c42:	2200      	movs	r2, #0
 8007c44:	2100      	movs	r1, #0
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fab0 	bl	80081ac <USBH_CtlReq>
 8007c4c:	4603      	mov	r3, r0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	4613      	mov	r3, r2
 8007c64:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	781a      	ldrb	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	785a      	ldrb	r2, [r3, #1]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	3302      	adds	r3, #2
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	3303      	adds	r3, #3
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	791a      	ldrb	r2, [r3, #4]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	795a      	ldrb	r2, [r3, #5]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	799a      	ldrb	r2, [r3, #6]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	79da      	ldrb	r2, [r3, #7]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	79db      	ldrb	r3, [r3, #7]
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	dc0f      	bgt.n	8007cda <USBH_ParseDevDesc+0x82>
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	db14      	blt.n	8007ce8 <USBH_ParseDevDesc+0x90>
 8007cbe:	3b08      	subs	r3, #8
 8007cc0:	4a2d      	ldr	r2, [pc, #180]	; (8007d78 <USBH_ParseDevDesc+0x120>)
 8007cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bf14      	ite	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	2300      	moveq	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d102      	bne.n	8007cde <USBH_ParseDevDesc+0x86>
 8007cd8:	e006      	b.n	8007ce8 <USBH_ParseDevDesc+0x90>
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	d104      	bne.n	8007ce8 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	79da      	ldrb	r2, [r3, #7]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	71da      	strb	r2, [r3, #7]
      break;
 8007ce6:	e003      	b.n	8007cf0 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2240      	movs	r2, #64	; 0x40
 8007cec:	71da      	strb	r2, [r3, #7]
      break;
 8007cee:	bf00      	nop
  }

  if (length > 8U)
 8007cf0:	88fb      	ldrh	r3, [r7, #6]
 8007cf2:	2b08      	cmp	r3, #8
 8007cf4:	d939      	bls.n	8007d6a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	3309      	adds	r3, #9
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	330a      	adds	r3, #10
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	330b      	adds	r3, #11
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	021b      	lsls	r3, r3, #8
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	4313      	orrs	r3, r2
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	330c      	adds	r3, #12
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	330d      	adds	r3, #13
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	021b      	lsls	r3, r3, #8
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	4313      	orrs	r3, r2
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	7b9a      	ldrb	r2, [r3, #14]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	7bda      	ldrb	r2, [r3, #15]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	7c1a      	ldrb	r2, [r3, #16]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	7c5a      	ldrb	r2, [r3, #17]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	745a      	strb	r2, [r3, #17]
  }
}
 8007d6a:	bf00      	nop
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	01000101 	.word	0x01000101

08007d7c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08c      	sub	sp, #48	; 0x30
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	4613      	mov	r3, r2
 8007d88:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d90:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	781a      	ldrb	r2, [r3, #0]
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	785a      	ldrb	r2, [r3, #1]
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	3302      	adds	r3, #2
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	3303      	adds	r3, #3
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	021b      	lsls	r3, r3, #8
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd8:	bf28      	it	cs
 8007dda:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	791a      	ldrb	r2, [r3, #4]
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	795a      	ldrb	r2, [r3, #5]
 8007df0:	6a3b      	ldr	r3, [r7, #32]
 8007df2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	799a      	ldrb	r2, [r3, #6]
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	79da      	ldrb	r2, [r3, #7]
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	7a1a      	ldrb	r2, [r3, #8]
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	2b09      	cmp	r3, #9
 8007e12:	d002      	beq.n	8007e1a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	2209      	movs	r2, #9
 8007e18:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e1a:	88fb      	ldrh	r3, [r7, #6]
 8007e1c:	2b09      	cmp	r3, #9
 8007e1e:	f240 809d 	bls.w	8007f5c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e22:	2309      	movs	r3, #9
 8007e24:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e2a:	e081      	b.n	8007f30 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e2c:	f107 0316 	add.w	r3, r7, #22
 8007e30:	4619      	mov	r1, r3
 8007e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e34:	f000 f99f 	bl	8008176 <USBH_GetNextDesc>
 8007e38:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	785b      	ldrb	r3, [r3, #1]
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d176      	bne.n	8007f30 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b09      	cmp	r3, #9
 8007e48:	d002      	beq.n	8007e50 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	2209      	movs	r2, #9
 8007e4e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e54:	221a      	movs	r2, #26
 8007e56:	fb02 f303 	mul.w	r3, r2, r3
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	6a3a      	ldr	r2, [r7, #32]
 8007e5e:	4413      	add	r3, r2
 8007e60:	3302      	adds	r3, #2
 8007e62:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e66:	69f8      	ldr	r0, [r7, #28]
 8007e68:	f000 f87e 	bl	8007f68 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e76:	e043      	b.n	8007f00 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e78:	f107 0316 	add.w	r3, r7, #22
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e80:	f000 f979 	bl	8008176 <USBH_GetNextDesc>
 8007e84:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	785b      	ldrb	r3, [r3, #1]
 8007e8a:	2b05      	cmp	r3, #5
 8007e8c:	d138      	bne.n	8007f00 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	795b      	ldrb	r3, [r3, #5]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d10f      	bne.n	8007eb6 <USBH_ParseCfgDesc+0x13a>
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	799b      	ldrb	r3, [r3, #6]
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d10b      	bne.n	8007eb6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	79db      	ldrb	r3, [r3, #7]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10f      	bne.n	8007ec6 <USBH_ParseCfgDesc+0x14a>
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b09      	cmp	r3, #9
 8007eac:	d00b      	beq.n	8007ec6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	2209      	movs	r2, #9
 8007eb2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007eb4:	e007      	b.n	8007ec6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b07      	cmp	r3, #7
 8007ebc:	d004      	beq.n	8007ec8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	701a      	strb	r2, [r3, #0]
 8007ec4:	e000      	b.n	8007ec8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ec6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ecc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ed0:	3201      	adds	r2, #1
 8007ed2:	00d2      	lsls	r2, r2, #3
 8007ed4:	211a      	movs	r1, #26
 8007ed6:	fb01 f303 	mul.w	r3, r1, r3
 8007eda:	4413      	add	r3, r2
 8007edc:	3308      	adds	r3, #8
 8007ede:	6a3a      	ldr	r2, [r7, #32]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee8:	69b9      	ldr	r1, [r7, #24]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 f86b 	bl	8007fc6 <USBH_ParseEPDesc>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007efa:	3301      	adds	r3, #1
 8007efc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	791b      	ldrb	r3, [r3, #4]
 8007f04:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d204      	bcs.n	8007f16 <USBH_ParseCfgDesc+0x19a>
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	885a      	ldrh	r2, [r3, #2]
 8007f10:	8afb      	ldrh	r3, [r7, #22]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d8b0      	bhi.n	8007e78 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	791b      	ldrb	r3, [r3, #4]
 8007f1a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d201      	bcs.n	8007f26 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e01c      	b.n	8007f60 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d805      	bhi.n	8007f44 <USBH_ParseCfgDesc+0x1c8>
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	885a      	ldrh	r2, [r3, #2]
 8007f3c:	8afb      	ldrh	r3, [r7, #22]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	f63f af74 	bhi.w	8007e2c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	791b      	ldrb	r3, [r3, #4]
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	bf28      	it	cs
 8007f4c:	2302      	movcs	r3, #2
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d201      	bcs.n	8007f5c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e001      	b.n	8007f60 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3730      	adds	r7, #48	; 0x30
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781a      	ldrb	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	785a      	ldrb	r2, [r3, #1]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	789a      	ldrb	r2, [r3, #2]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	78da      	ldrb	r2, [r3, #3]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	791a      	ldrb	r2, [r3, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	795a      	ldrb	r2, [r3, #5]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	799a      	ldrb	r2, [r3, #6]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	79da      	ldrb	r2, [r3, #7]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	7a1a      	ldrb	r2, [r3, #8]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	721a      	strb	r2, [r3, #8]
}
 8007fba:	bf00      	nop
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b087      	sub	sp, #28
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	781a      	ldrb	r2, [r3, #0]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	785a      	ldrb	r2, [r3, #1]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	789a      	ldrb	r2, [r3, #2]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	78da      	ldrb	r2, [r3, #3]
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	3305      	adds	r3, #5
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	021b      	lsls	r3, r3, #8
 8008008:	b29b      	uxth	r3, r3
 800800a:	4313      	orrs	r3, r2
 800800c:	b29a      	uxth	r2, r3
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	799a      	ldrb	r2, [r3, #6]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	889b      	ldrh	r3, [r3, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d102      	bne.n	8008028 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008022:	2303      	movs	r3, #3
 8008024:	75fb      	strb	r3, [r7, #23]
 8008026:	e033      	b.n	8008090 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	889b      	ldrh	r3, [r3, #4]
 800802c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008030:	f023 0307 	bic.w	r3, r3, #7
 8008034:	b29a      	uxth	r2, r3
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	889b      	ldrh	r3, [r3, #4]
 800803e:	b21a      	sxth	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3304      	adds	r3, #4
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	b299      	uxth	r1, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3305      	adds	r3, #5
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	b29b      	uxth	r3, r3
 8008054:	430b      	orrs	r3, r1
 8008056:	b29b      	uxth	r3, r3
 8008058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800805c:	2b00      	cmp	r3, #0
 800805e:	d110      	bne.n	8008082 <USBH_ParseEPDesc+0xbc>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3304      	adds	r3, #4
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	b299      	uxth	r1, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3305      	adds	r3, #5
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	b29b      	uxth	r3, r3
 8008074:	430b      	orrs	r3, r1
 8008076:	b29b      	uxth	r3, r3
 8008078:	b21b      	sxth	r3, r3
 800807a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800807e:	b21b      	sxth	r3, r3
 8008080:	e001      	b.n	8008086 <USBH_ParseEPDesc+0xc0>
 8008082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008086:	4313      	orrs	r3, r2
 8008088:	b21b      	sxth	r3, r3
 800808a:	b29a      	uxth	r2, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008096:	2b00      	cmp	r3, #0
 8008098:	d116      	bne.n	80080c8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	78db      	ldrb	r3, [r3, #3]
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d005      	beq.n	80080b2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	78db      	ldrb	r3, [r3, #3]
 80080aa:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d127      	bne.n	8008102 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	799b      	ldrb	r3, [r3, #6]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <USBH_ParseEPDesc+0xfc>
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	799b      	ldrb	r3, [r3, #6]
 80080be:	2b10      	cmp	r3, #16
 80080c0:	d91f      	bls.n	8008102 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080c2:	2303      	movs	r3, #3
 80080c4:	75fb      	strb	r3, [r7, #23]
 80080c6:	e01c      	b.n	8008102 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	78db      	ldrb	r3, [r3, #3]
 80080cc:	f003 0303 	and.w	r3, r3, #3
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d10a      	bne.n	80080ea <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	799b      	ldrb	r3, [r3, #6]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d003      	beq.n	80080e4 <USBH_ParseEPDesc+0x11e>
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	799b      	ldrb	r3, [r3, #6]
 80080e0:	2b10      	cmp	r3, #16
 80080e2:	d90e      	bls.n	8008102 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080e4:	2303      	movs	r3, #3
 80080e6:	75fb      	strb	r3, [r7, #23]
 80080e8:	e00b      	b.n	8008102 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	78db      	ldrb	r3, [r3, #3]
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d105      	bne.n	8008102 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	799b      	ldrb	r3, [r3, #6]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080fe:	2303      	movs	r3, #3
 8008100:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
}
 8008104:	4618      	mov	r0, r3
 8008106:	371c      	adds	r7, #28
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	4613      	mov	r3, r2
 800811c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3301      	adds	r3, #1
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b03      	cmp	r3, #3
 8008126:	d120      	bne.n	800816a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	1e9a      	subs	r2, r3, #2
 800812e:	88fb      	ldrh	r3, [r7, #6]
 8008130:	4293      	cmp	r3, r2
 8008132:	bf28      	it	cs
 8008134:	4613      	movcs	r3, r2
 8008136:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3302      	adds	r3, #2
 800813c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800813e:	2300      	movs	r3, #0
 8008140:	82fb      	strh	r3, [r7, #22]
 8008142:	e00b      	b.n	800815c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008144:	8afb      	ldrh	r3, [r7, #22]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	4413      	add	r3, r2
 800814a:	781a      	ldrb	r2, [r3, #0]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	3301      	adds	r3, #1
 8008154:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008156:	8afb      	ldrh	r3, [r7, #22]
 8008158:	3302      	adds	r3, #2
 800815a:	82fb      	strh	r3, [r7, #22]
 800815c:	8afa      	ldrh	r2, [r7, #22]
 800815e:	8abb      	ldrh	r3, [r7, #20]
 8008160:	429a      	cmp	r2, r3
 8008162:	d3ef      	bcc.n	8008144 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2200      	movs	r2, #0
 8008168:	701a      	strb	r2, [r3, #0]
  }
}
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008176:	b480      	push	{r7}
 8008178:	b085      	sub	sp, #20
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	881a      	ldrh	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	b29b      	uxth	r3, r3
 800818a:	4413      	add	r3, r2
 800818c:	b29a      	uxth	r2, r3
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4413      	add	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800819e:	68fb      	ldr	r3, [r7, #12]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80081ba:	2301      	movs	r3, #1
 80081bc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	789b      	ldrb	r3, [r3, #2]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d002      	beq.n	80081cc <USBH_CtlReq+0x20>
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d00f      	beq.n	80081ea <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80081ca:	e027      	b.n	800821c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	88fa      	ldrh	r2, [r7, #6]
 80081d6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2201      	movs	r2, #1
 80081dc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2202      	movs	r2, #2
 80081e2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80081e4:	2301      	movs	r3, #1
 80081e6:	75fb      	strb	r3, [r7, #23]
      break;
 80081e8:	e018      	b.n	800821c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 f81c 	bl	8008228 <USBH_HandleControl>
 80081f0:	4603      	mov	r3, r0
 80081f2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <USBH_CtlReq+0x54>
 80081fa:	7dfb      	ldrb	r3, [r7, #23]
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d106      	bne.n	800820e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2201      	movs	r2, #1
 8008204:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	761a      	strb	r2, [r3, #24]
      break;
 800820c:	e005      	b.n	800821a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d102      	bne.n	800821a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2201      	movs	r2, #1
 8008218:	709a      	strb	r2, [r3, #2]
      break;
 800821a:	bf00      	nop
  }
  return status;
 800821c:	7dfb      	ldrb	r3, [r7, #23]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af02      	add	r7, sp, #8
 800822e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008230:	2301      	movs	r3, #1
 8008232:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008234:	2300      	movs	r3, #0
 8008236:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	7e1b      	ldrb	r3, [r3, #24]
 800823c:	3b01      	subs	r3, #1
 800823e:	2b0a      	cmp	r3, #10
 8008240:	f200 8156 	bhi.w	80084f0 <USBH_HandleControl+0x2c8>
 8008244:	a201      	add	r2, pc, #4	; (adr r2, 800824c <USBH_HandleControl+0x24>)
 8008246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824a:	bf00      	nop
 800824c:	08008279 	.word	0x08008279
 8008250:	08008293 	.word	0x08008293
 8008254:	080082fd 	.word	0x080082fd
 8008258:	08008323 	.word	0x08008323
 800825c:	0800835b 	.word	0x0800835b
 8008260:	08008385 	.word	0x08008385
 8008264:	080083d7 	.word	0x080083d7
 8008268:	080083f9 	.word	0x080083f9
 800826c:	08008435 	.word	0x08008435
 8008270:	0800845b 	.word	0x0800845b
 8008274:	08008499 	.word	0x08008499
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f103 0110 	add.w	r1, r3, #16
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	795b      	ldrb	r3, [r3, #5]
 8008282:	461a      	mov	r2, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f943 	bl	8008510 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2202      	movs	r2, #2
 800828e:	761a      	strb	r2, [r3, #24]
      break;
 8008290:	e139      	b.n	8008506 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	795b      	ldrb	r3, [r3, #5]
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fcc5 	bl	8008c28 <USBH_LL_GetURBState>
 800829e:	4603      	mov	r3, r0
 80082a0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d11e      	bne.n	80082e6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	7c1b      	ldrb	r3, [r3, #16]
 80082ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082b0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	8adb      	ldrh	r3, [r3, #22]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80082ba:	7b7b      	ldrb	r3, [r7, #13]
 80082bc:	2b80      	cmp	r3, #128	; 0x80
 80082be:	d103      	bne.n	80082c8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2203      	movs	r2, #3
 80082c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082c6:	e115      	b.n	80084f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2205      	movs	r2, #5
 80082cc:	761a      	strb	r2, [r3, #24]
      break;
 80082ce:	e111      	b.n	80084f4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80082d0:	7b7b      	ldrb	r3, [r7, #13]
 80082d2:	2b80      	cmp	r3, #128	; 0x80
 80082d4:	d103      	bne.n	80082de <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2209      	movs	r2, #9
 80082da:	761a      	strb	r2, [r3, #24]
      break;
 80082dc:	e10a      	b.n	80084f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2207      	movs	r2, #7
 80082e2:	761a      	strb	r2, [r3, #24]
      break;
 80082e4:	e106      	b.n	80084f4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	d003      	beq.n	80082f4 <USBH_HandleControl+0xcc>
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	f040 8100 	bne.w	80084f4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	220b      	movs	r2, #11
 80082f8:	761a      	strb	r2, [r3, #24]
      break;
 80082fa:	e0fb      	b.n	80084f4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008302:	b29a      	uxth	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6899      	ldr	r1, [r3, #8]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	899a      	ldrh	r2, [r3, #12]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	791b      	ldrb	r3, [r3, #4]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f93a 	bl	800858e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2204      	movs	r2, #4
 800831e:	761a      	strb	r2, [r3, #24]
      break;
 8008320:	e0f1      	b.n	8008506 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	791b      	ldrb	r3, [r3, #4]
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fc7d 	bl	8008c28 <USBH_LL_GetURBState>
 800832e:	4603      	mov	r3, r0
 8008330:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008332:	7bbb      	ldrb	r3, [r7, #14]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d102      	bne.n	800833e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2209      	movs	r2, #9
 800833c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b05      	cmp	r3, #5
 8008342:	d102      	bne.n	800834a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008344:	2303      	movs	r3, #3
 8008346:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008348:	e0d6      	b.n	80084f8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	2b04      	cmp	r3, #4
 800834e:	f040 80d3 	bne.w	80084f8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	220b      	movs	r2, #11
 8008356:	761a      	strb	r2, [r3, #24]
      break;
 8008358:	e0ce      	b.n	80084f8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6899      	ldr	r1, [r3, #8]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	899a      	ldrh	r2, [r3, #12]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	795b      	ldrb	r3, [r3, #5]
 8008366:	2001      	movs	r0, #1
 8008368:	9000      	str	r0, [sp, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f8ea 	bl	8008544 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008376:	b29a      	uxth	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2206      	movs	r2, #6
 8008380:	761a      	strb	r2, [r3, #24]
      break;
 8008382:	e0c0      	b.n	8008506 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	795b      	ldrb	r3, [r3, #5]
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fc4c 	bl	8008c28 <USBH_LL_GetURBState>
 8008390:	4603      	mov	r3, r0
 8008392:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d103      	bne.n	80083a2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2207      	movs	r2, #7
 800839e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083a0:	e0ac      	b.n	80084fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	2b05      	cmp	r3, #5
 80083a6:	d105      	bne.n	80083b4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	220c      	movs	r2, #12
 80083ac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80083ae:	2303      	movs	r3, #3
 80083b0:	73fb      	strb	r3, [r7, #15]
      break;
 80083b2:	e0a3      	b.n	80084fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d103      	bne.n	80083c2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2205      	movs	r2, #5
 80083be:	761a      	strb	r2, [r3, #24]
      break;
 80083c0:	e09c      	b.n	80084fc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	f040 8099 	bne.w	80084fc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	220b      	movs	r2, #11
 80083ce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80083d0:	2302      	movs	r3, #2
 80083d2:	73fb      	strb	r3, [r7, #15]
      break;
 80083d4:	e092      	b.n	80084fc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	791b      	ldrb	r3, [r3, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	2100      	movs	r1, #0
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f8d5 	bl	800858e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2208      	movs	r2, #8
 80083f4:	761a      	strb	r2, [r3, #24]

      break;
 80083f6:	e086      	b.n	8008506 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	791b      	ldrb	r3, [r3, #4]
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fc12 	bl	8008c28 <USBH_LL_GetURBState>
 8008404:	4603      	mov	r3, r0
 8008406:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d105      	bne.n	800841a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	220d      	movs	r2, #13
 8008412:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008418:	e072      	b.n	8008500 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2b04      	cmp	r3, #4
 800841e:	d103      	bne.n	8008428 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	220b      	movs	r2, #11
 8008424:	761a      	strb	r2, [r3, #24]
      break;
 8008426:	e06b      	b.n	8008500 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	2b05      	cmp	r3, #5
 800842c:	d168      	bne.n	8008500 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800842e:	2303      	movs	r3, #3
 8008430:	73fb      	strb	r3, [r7, #15]
      break;
 8008432:	e065      	b.n	8008500 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	795b      	ldrb	r3, [r3, #5]
 8008438:	2201      	movs	r2, #1
 800843a:	9200      	str	r2, [sp, #0]
 800843c:	2200      	movs	r2, #0
 800843e:	2100      	movs	r1, #0
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f87f 	bl	8008544 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800844c:	b29a      	uxth	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	220a      	movs	r2, #10
 8008456:	761a      	strb	r2, [r3, #24]
      break;
 8008458:	e055      	b.n	8008506 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	795b      	ldrb	r3, [r3, #5]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fbe1 	bl	8008c28 <USBH_LL_GetURBState>
 8008466:	4603      	mov	r3, r0
 8008468:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d105      	bne.n	800847c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	220d      	movs	r2, #13
 8008478:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800847a:	e043      	b.n	8008504 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d103      	bne.n	800848a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2209      	movs	r2, #9
 8008486:	761a      	strb	r2, [r3, #24]
      break;
 8008488:	e03c      	b.n	8008504 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800848a:	7bbb      	ldrb	r3, [r7, #14]
 800848c:	2b04      	cmp	r3, #4
 800848e:	d139      	bne.n	8008504 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	220b      	movs	r2, #11
 8008494:	761a      	strb	r2, [r3, #24]
      break;
 8008496:	e035      	b.n	8008504 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	7e5b      	ldrb	r3, [r3, #25]
 800849c:	3301      	adds	r3, #1
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	765a      	strb	r2, [r3, #25]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	7e5b      	ldrb	r3, [r3, #25]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d806      	bhi.n	80084ba <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80084b8:	e025      	b.n	8008506 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084c0:	2106      	movs	r1, #6
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	795b      	ldrb	r3, [r3, #5]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f90c 	bl	80086f0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	791b      	ldrb	r3, [r3, #4]
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f906 	bl	80086f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80084ea:	2302      	movs	r3, #2
 80084ec:	73fb      	strb	r3, [r7, #15]
      break;
 80084ee:	e00a      	b.n	8008506 <USBH_HandleControl+0x2de>

    default:
      break;
 80084f0:	bf00      	nop
 80084f2:	e008      	b.n	8008506 <USBH_HandleControl+0x2de>
      break;
 80084f4:	bf00      	nop
 80084f6:	e006      	b.n	8008506 <USBH_HandleControl+0x2de>
      break;
 80084f8:	bf00      	nop
 80084fa:	e004      	b.n	8008506 <USBH_HandleControl+0x2de>
      break;
 80084fc:	bf00      	nop
 80084fe:	e002      	b.n	8008506 <USBH_HandleControl+0x2de>
      break;
 8008500:	bf00      	nop
 8008502:	e000      	b.n	8008506 <USBH_HandleControl+0x2de>
      break;
 8008504:	bf00      	nop
  }

  return status;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af04      	add	r7, sp, #16
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800851e:	79f9      	ldrb	r1, [r7, #7]
 8008520:	2300      	movs	r3, #0
 8008522:	9303      	str	r3, [sp, #12]
 8008524:	2308      	movs	r3, #8
 8008526:	9302      	str	r3, [sp, #8]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	2300      	movs	r3, #0
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	2300      	movs	r3, #0
 8008532:	2200      	movs	r2, #0
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 fb46 	bl	8008bc6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af04      	add	r7, sp, #16
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	4611      	mov	r1, r2
 8008550:	461a      	mov	r2, r3
 8008552:	460b      	mov	r3, r1
 8008554:	80fb      	strh	r3, [r7, #6]
 8008556:	4613      	mov	r3, r2
 8008558:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008568:	7979      	ldrb	r1, [r7, #5]
 800856a:	7e3b      	ldrb	r3, [r7, #24]
 800856c:	9303      	str	r3, [sp, #12]
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	9302      	str	r3, [sp, #8]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	2301      	movs	r3, #1
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	2300      	movs	r3, #0
 800857c:	2200      	movs	r2, #0
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 fb21 	bl	8008bc6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b088      	sub	sp, #32
 8008592:	af04      	add	r7, sp, #16
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	4611      	mov	r1, r2
 800859a:	461a      	mov	r2, r3
 800859c:	460b      	mov	r3, r1
 800859e:	80fb      	strh	r3, [r7, #6]
 80085a0:	4613      	mov	r3, r2
 80085a2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085a4:	7979      	ldrb	r1, [r7, #5]
 80085a6:	2300      	movs	r3, #0
 80085a8:	9303      	str	r3, [sp, #12]
 80085aa:	88fb      	ldrh	r3, [r7, #6]
 80085ac:	9302      	str	r3, [sp, #8]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	2301      	movs	r3, #1
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	2300      	movs	r3, #0
 80085b8:	2201      	movs	r2, #1
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f000 fb03 	bl	8008bc6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80085c0:	2300      	movs	r3, #0

}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b088      	sub	sp, #32
 80085ce:	af04      	add	r7, sp, #16
 80085d0:	60f8      	str	r0, [r7, #12]
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	4611      	mov	r1, r2
 80085d6:	461a      	mov	r2, r3
 80085d8:	460b      	mov	r3, r1
 80085da:	80fb      	strh	r3, [r7, #6]
 80085dc:	4613      	mov	r3, r2
 80085de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085ee:	7979      	ldrb	r1, [r7, #5]
 80085f0:	7e3b      	ldrb	r3, [r7, #24]
 80085f2:	9303      	str	r3, [sp, #12]
 80085f4:	88fb      	ldrh	r3, [r7, #6]
 80085f6:	9302      	str	r3, [sp, #8]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	9301      	str	r3, [sp, #4]
 80085fc:	2301      	movs	r3, #1
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	2302      	movs	r3, #2
 8008602:	2200      	movs	r2, #0
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 fade 	bl	8008bc6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af04      	add	r7, sp, #16
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	4611      	mov	r1, r2
 8008620:	461a      	mov	r2, r3
 8008622:	460b      	mov	r3, r1
 8008624:	80fb      	strh	r3, [r7, #6]
 8008626:	4613      	mov	r3, r2
 8008628:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800862a:	7979      	ldrb	r1, [r7, #5]
 800862c:	2300      	movs	r3, #0
 800862e:	9303      	str	r3, [sp, #12]
 8008630:	88fb      	ldrh	r3, [r7, #6]
 8008632:	9302      	str	r3, [sp, #8]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	9301      	str	r3, [sp, #4]
 8008638:	2301      	movs	r3, #1
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	2302      	movs	r3, #2
 800863e:	2201      	movs	r2, #1
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 fac0 	bl	8008bc6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af04      	add	r7, sp, #16
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	4608      	mov	r0, r1
 800865a:	4611      	mov	r1, r2
 800865c:	461a      	mov	r2, r3
 800865e:	4603      	mov	r3, r0
 8008660:	70fb      	strb	r3, [r7, #3]
 8008662:	460b      	mov	r3, r1
 8008664:	70bb      	strb	r3, [r7, #2]
 8008666:	4613      	mov	r3, r2
 8008668:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800866a:	7878      	ldrb	r0, [r7, #1]
 800866c:	78ba      	ldrb	r2, [r7, #2]
 800866e:	78f9      	ldrb	r1, [r7, #3]
 8008670:	8b3b      	ldrh	r3, [r7, #24]
 8008672:	9302      	str	r3, [sp, #8]
 8008674:	7d3b      	ldrb	r3, [r7, #20]
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	7c3b      	ldrb	r3, [r7, #16]
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	4603      	mov	r3, r0
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fa53 	bl	8008b2a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fa72 	bl	8008b88 <USBH_LL_ClosePipe>

  return USBH_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f836 	bl	800872c <USBH_GetFreePipe>
 80086c0:	4603      	mov	r3, r0
 80086c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80086c4:	89fb      	ldrh	r3, [r7, #14]
 80086c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d00a      	beq.n	80086e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80086ce:	78fa      	ldrb	r2, [r7, #3]
 80086d0:	89fb      	ldrh	r3, [r7, #14]
 80086d2:	f003 030f 	and.w	r3, r3, #15
 80086d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	33e0      	adds	r3, #224	; 0xe0
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80086e4:	89fb      	ldrh	r3, [r7, #14]
 80086e6:	b2db      	uxtb	r3, r3
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80086fc:	78fb      	ldrb	r3, [r7, #3]
 80086fe:	2b0f      	cmp	r3, #15
 8008700:	d80d      	bhi.n	800871e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	33e0      	adds	r3, #224	; 0xe0
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	78fb      	ldrb	r3, [r7, #3]
 8008710:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008714:	6879      	ldr	r1, [r7, #4]
 8008716:	33e0      	adds	r3, #224	; 0xe0
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	440b      	add	r3, r1
 800871c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008738:	2300      	movs	r3, #0
 800873a:	73fb      	strb	r3, [r7, #15]
 800873c:	e00f      	b.n	800875e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	33e0      	adds	r3, #224	; 0xe0
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d102      	bne.n	8008758 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	b29b      	uxth	r3, r3
 8008756:	e007      	b.n	8008768 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008758:	7bfb      	ldrb	r3, [r7, #15]
 800875a:	3301      	adds	r3, #1
 800875c:	73fb      	strb	r3, [r7, #15]
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	2b0f      	cmp	r3, #15
 8008762:	d9ec      	bls.n	800873e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008764:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008778:	2201      	movs	r2, #1
 800877a:	490e      	ldr	r1, [pc, #56]	; (80087b4 <MX_USB_HOST_Init+0x40>)
 800877c:	480e      	ldr	r0, [pc, #56]	; (80087b8 <MX_USB_HOST_Init+0x44>)
 800877e:	f7fe fba5 	bl	8006ecc <USBH_Init>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008788:	f7f8 fb9a 	bl	8000ec0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800878c:	490b      	ldr	r1, [pc, #44]	; (80087bc <MX_USB_HOST_Init+0x48>)
 800878e:	480a      	ldr	r0, [pc, #40]	; (80087b8 <MX_USB_HOST_Init+0x44>)
 8008790:	f7fe fc2a 	bl	8006fe8 <USBH_RegisterClass>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800879a:	f7f8 fb91 	bl	8000ec0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800879e:	4806      	ldr	r0, [pc, #24]	; (80087b8 <MX_USB_HOST_Init+0x44>)
 80087a0:	f7fe fcae 	bl	8007100 <USBH_Start>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80087aa:	f7f8 fb89 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80087ae:	bf00      	nop
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	080087d5 	.word	0x080087d5
 80087b8:	200001b8 	.word	0x200001b8
 80087bc:	2000000c 	.word	0x2000000c

080087c0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80087c4:	4802      	ldr	r0, [pc, #8]	; (80087d0 <MX_USB_HOST_Process+0x10>)
 80087c6:	f7fe fcab 	bl	8007120 <USBH_Process>
}
 80087ca:	bf00      	nop
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	200001b8 	.word	0x200001b8

080087d4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d819      	bhi.n	800881c <USBH_UserProcess+0x48>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <USBH_UserProcess+0x1c>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	0800881d 	.word	0x0800881d
 80087f4:	0800880d 	.word	0x0800880d
 80087f8:	0800881d 	.word	0x0800881d
 80087fc:	08008815 	.word	0x08008815
 8008800:	08008805 	.word	0x08008805
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008804:	4b09      	ldr	r3, [pc, #36]	; (800882c <USBH_UserProcess+0x58>)
 8008806:	2203      	movs	r2, #3
 8008808:	701a      	strb	r2, [r3, #0]
  break;
 800880a:	e008      	b.n	800881e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800880c:	4b07      	ldr	r3, [pc, #28]	; (800882c <USBH_UserProcess+0x58>)
 800880e:	2202      	movs	r2, #2
 8008810:	701a      	strb	r2, [r3, #0]
  break;
 8008812:	e004      	b.n	800881e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008814:	4b05      	ldr	r3, [pc, #20]	; (800882c <USBH_UserProcess+0x58>)
 8008816:	2201      	movs	r2, #1
 8008818:	701a      	strb	r2, [r3, #0]
  break;
 800881a:	e000      	b.n	800881e <USBH_UserProcess+0x4a>

  default:
  break;
 800881c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	20000590 	.word	0x20000590

08008830 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08a      	sub	sp, #40	; 0x28
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008838:	f107 0314 	add.w	r3, r7, #20
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	605a      	str	r2, [r3, #4]
 8008842:	609a      	str	r2, [r3, #8]
 8008844:	60da      	str	r2, [r3, #12]
 8008846:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008850:	d147      	bne.n	80088e2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008852:	2300      	movs	r3, #0
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	4b25      	ldr	r3, [pc, #148]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	4a24      	ldr	r2, [pc, #144]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 800885c:	f043 0301 	orr.w	r3, r3, #1
 8008860:	6313      	str	r3, [r2, #48]	; 0x30
 8008862:	4b22      	ldr	r3, [pc, #136]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	613b      	str	r3, [r7, #16]
 800886c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800886e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008874:	2300      	movs	r3, #0
 8008876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008878:	2300      	movs	r3, #0
 800887a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800887c:	f107 0314 	add.w	r3, r7, #20
 8008880:	4619      	mov	r1, r3
 8008882:	481b      	ldr	r0, [pc, #108]	; (80088f0 <HAL_HCD_MspInit+0xc0>)
 8008884:	f7f8 ff2e 	bl	80016e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008888:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800888c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800888e:	2302      	movs	r3, #2
 8008890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008892:	2300      	movs	r3, #0
 8008894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008896:	2300      	movs	r3, #0
 8008898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800889a:	230a      	movs	r3, #10
 800889c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800889e:	f107 0314 	add.w	r3, r7, #20
 80088a2:	4619      	mov	r1, r3
 80088a4:	4812      	ldr	r0, [pc, #72]	; (80088f0 <HAL_HCD_MspInit+0xc0>)
 80088a6:	f7f8 ff1d 	bl	80016e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088aa:	4b10      	ldr	r3, [pc, #64]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 80088ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ae:	4a0f      	ldr	r2, [pc, #60]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 80088b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b4:	6353      	str	r3, [r2, #52]	; 0x34
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
 80088ba:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 80088bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088be:	4a0b      	ldr	r2, [pc, #44]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 80088c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088c4:	6453      	str	r3, [r2, #68]	; 0x44
 80088c6:	4b09      	ldr	r3, [pc, #36]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 80088c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088d2:	2200      	movs	r2, #0
 80088d4:	2100      	movs	r1, #0
 80088d6:	2043      	movs	r0, #67	; 0x43
 80088d8:	f7f8 feab 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088dc:	2043      	movs	r0, #67	; 0x43
 80088de:	f7f8 fec4 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088e2:	bf00      	nop
 80088e4:	3728      	adds	r7, #40	; 0x28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	40023800 	.word	0x40023800
 80088f0:	40020000 	.word	0x40020000

080088f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe ffeb 	bl	80078de <USBH_LL_IncTimer>
}
 8008908:	bf00      	nop
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800891e:	4618      	mov	r0, r3
 8008920:	f7ff f823 	bl	800796a <USBH_LL_Connect>
}
 8008924:	bf00      	nop
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff f82c 	bl	8007998 <USBH_LL_Disconnect>
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
 8008954:	4613      	mov	r3, r2
 8008956:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe ffdd 	bl	8007932 <USBH_LL_PortEnabled>
}
 8008978:	bf00      	nop
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe ffdd 	bl	800794e <USBH_LL_PortDisabled>
}
 8008994:	bf00      	nop
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d12a      	bne.n	8008a04 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80089ae:	4a18      	ldr	r2, [pc, #96]	; (8008a10 <USBH_LL_Init+0x74>)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a15      	ldr	r2, [pc, #84]	; (8008a10 <USBH_LL_Init+0x74>)
 80089ba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089be:	4b14      	ldr	r3, [pc, #80]	; (8008a10 <USBH_LL_Init+0x74>)
 80089c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80089c6:	4b12      	ldr	r3, [pc, #72]	; (8008a10 <USBH_LL_Init+0x74>)
 80089c8:	2208      	movs	r2, #8
 80089ca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80089cc:	4b10      	ldr	r3, [pc, #64]	; (8008a10 <USBH_LL_Init+0x74>)
 80089ce:	2201      	movs	r2, #1
 80089d0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089d2:	4b0f      	ldr	r3, [pc, #60]	; (8008a10 <USBH_LL_Init+0x74>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80089d8:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <USBH_LL_Init+0x74>)
 80089da:	2202      	movs	r2, #2
 80089dc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089de:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <USBH_LL_Init+0x74>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80089e4:	480a      	ldr	r0, [pc, #40]	; (8008a10 <USBH_LL_Init+0x74>)
 80089e6:	f7f9 f832 	bl	8001a4e <HAL_HCD_Init>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80089f0:	f7f8 fa66 	bl	8000ec0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80089f4:	4806      	ldr	r0, [pc, #24]	; (8008a10 <USBH_LL_Init+0x74>)
 80089f6:	f7f9 fc16 	bl	8002226 <HAL_HCD_GetCurrentFrame>
 80089fa:	4603      	mov	r3, r0
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7fe ff5e 	bl	80078c0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	20000594 	.word	0x20000594

08008a14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7f9 fb85 	bl	800213a <HAL_HCD_Start>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 f95c 	bl	8008cf4 <USBH_Get_USB_Status>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7f9 fb8d 	bl	8002180 <HAL_HCD_Stop>
 8008a66:	4603      	mov	r3, r0
 8008a68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 f941 	bl	8008cf4 <USBH_Get_USB_Status>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7f9 fbd5 	bl	8002242 <HAL_HCD_GetCurrentSpeed>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d00c      	beq.n	8008ab8 <USBH_LL_GetSpeed+0x38>
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d80d      	bhi.n	8008abe <USBH_LL_GetSpeed+0x3e>
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <USBH_LL_GetSpeed+0x2c>
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d003      	beq.n	8008ab2 <USBH_LL_GetSpeed+0x32>
 8008aaa:	e008      	b.n	8008abe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab0:	e008      	b.n	8008ac4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab6:	e005      	b.n	8008ac4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008ab8:	2302      	movs	r3, #2
 8008aba:	73fb      	strb	r3, [r7, #15]
    break;
 8008abc:	e002      	b.n	8008ac4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac2:	bf00      	nop
  }
  return  speed;
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7f9 fb68 	bl	80021ba <HAL_HCD_ResetPort>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f8ff 	bl	8008cf4 <USBH_Get_USB_Status>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b16:	78fa      	ldrb	r2, [r7, #3]
 8008b18:	4611      	mov	r1, r2
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7f9 fb6f 	bl	80021fe <HAL_HCD_HC_GetXferCount>
 8008b20:	4603      	mov	r3, r0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b2a:	b590      	push	{r4, r7, lr}
 8008b2c:	b089      	sub	sp, #36	; 0x24
 8008b2e:	af04      	add	r7, sp, #16
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	4608      	mov	r0, r1
 8008b34:	4611      	mov	r1, r2
 8008b36:	461a      	mov	r2, r3
 8008b38:	4603      	mov	r3, r0
 8008b3a:	70fb      	strb	r3, [r7, #3]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70bb      	strb	r3, [r7, #2]
 8008b40:	4613      	mov	r3, r2
 8008b42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b52:	787c      	ldrb	r4, [r7, #1]
 8008b54:	78ba      	ldrb	r2, [r7, #2]
 8008b56:	78f9      	ldrb	r1, [r7, #3]
 8008b58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b5a:	9302      	str	r3, [sp, #8]
 8008b5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	4623      	mov	r3, r4
 8008b6a:	f7f8 ffd2 	bl	8001b12 <HAL_HCD_HC_Init>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 f8bd 	bl	8008cf4 <USBH_Get_USB_Status>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd90      	pop	{r4, r7, pc}

08008b88 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7f9 f842 	bl	8001c30 <HAL_HCD_HC_Halt>
 8008bac:	4603      	mov	r3, r0
 8008bae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 f89e 	bl	8008cf4 <USBH_Get_USB_Status>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008bc6:	b590      	push	{r4, r7, lr}
 8008bc8:	b089      	sub	sp, #36	; 0x24
 8008bca:	af04      	add	r7, sp, #16
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	4608      	mov	r0, r1
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	70fb      	strb	r3, [r7, #3]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70bb      	strb	r3, [r7, #2]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bee:	787c      	ldrb	r4, [r7, #1]
 8008bf0:	78ba      	ldrb	r2, [r7, #2]
 8008bf2:	78f9      	ldrb	r1, [r7, #3]
 8008bf4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bf8:	9303      	str	r3, [sp, #12]
 8008bfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bfc:	9302      	str	r3, [sp, #8]
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	4623      	mov	r3, r4
 8008c0a:	f7f9 f835 	bl	8001c78 <HAL_HCD_HC_SubmitRequest>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 f86d 	bl	8008cf4 <USBH_Get_USB_Status>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd90      	pop	{r4, r7, pc}

08008c28 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c3a:	78fa      	ldrb	r2, [r7, #3]
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7f9 fac9 	bl	80021d6 <HAL_HCD_HC_GetURBState>
 8008c44:	4603      	mov	r3, r0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	460b      	mov	r3, r1
 8008c58:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d103      	bne.n	8008c6c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 f870 	bl	8008d4c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c6c:	20c8      	movs	r0, #200	; 0xc8
 8008c6e:	f7f8 fbe1 	bl	8001434 <HAL_Delay>
  return USBH_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c92:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	212c      	movs	r1, #44	; 0x2c
 8008c9a:	fb01 f303 	mul.w	r3, r1, r3
 8008c9e:	4413      	add	r3, r2
 8008ca0:	333b      	adds	r3, #59	; 0x3b
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d009      	beq.n	8008cbc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008ca8:	78fb      	ldrb	r3, [r7, #3]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	212c      	movs	r1, #44	; 0x2c
 8008cae:	fb01 f303 	mul.w	r3, r1, r3
 8008cb2:	4413      	add	r3, r2
 8008cb4:	3354      	adds	r3, #84	; 0x54
 8008cb6:	78ba      	ldrb	r2, [r7, #2]
 8008cb8:	701a      	strb	r2, [r3, #0]
 8008cba:	e008      	b.n	8008cce <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008cbc:	78fb      	ldrb	r3, [r7, #3]
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	212c      	movs	r1, #44	; 0x2c
 8008cc2:	fb01 f303 	mul.w	r3, r1, r3
 8008cc6:	4413      	add	r3, r2
 8008cc8:	3355      	adds	r3, #85	; 0x55
 8008cca:	78ba      	ldrb	r2, [r7, #2]
 8008ccc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f7f8 fba5 	bl	8001434 <HAL_Delay>
}
 8008cea:	bf00      	nop
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
	...

08008cf4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d817      	bhi.n	8008d38 <USBH_Get_USB_Status+0x44>
 8008d08:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <USBH_Get_USB_Status+0x1c>)
 8008d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0e:	bf00      	nop
 8008d10:	08008d21 	.word	0x08008d21
 8008d14:	08008d27 	.word	0x08008d27
 8008d18:	08008d2d 	.word	0x08008d2d
 8008d1c:	08008d33 	.word	0x08008d33
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]
    break;
 8008d24:	e00b      	b.n	8008d3e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d26:	2302      	movs	r3, #2
 8008d28:	73fb      	strb	r3, [r7, #15]
    break;
 8008d2a:	e008      	b.n	8008d3e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d30:	e005      	b.n	8008d3e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d32:	2302      	movs	r3, #2
 8008d34:	73fb      	strb	r3, [r7, #15]
    break;
 8008d36:	e002      	b.n	8008d3e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d38:	2302      	movs	r3, #2
 8008d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d3c:	bf00      	nop
  }
  return usb_status;
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <MX_DriverVbusFS>:
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	71fb      	strb	r3, [r7, #7]
 8008d56:	79fb      	ldrb	r3, [r7, #7]
 8008d58:	73fb      	strb	r3, [r7, #15]
 8008d5a:	79fb      	ldrb	r3, [r7, #7]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d102      	bne.n	8008d66 <MX_DriverVbusFS+0x1a>
 8008d60:	2300      	movs	r3, #0
 8008d62:	73fb      	strb	r3, [r7, #15]
 8008d64:	e001      	b.n	8008d6a <MX_DriverVbusFS+0x1e>
 8008d66:	2301      	movs	r3, #1
 8008d68:	73fb      	strb	r3, [r7, #15]
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	2101      	movs	r1, #1
 8008d70:	4803      	ldr	r0, [pc, #12]	; (8008d80 <MX_DriverVbusFS+0x34>)
 8008d72:	f7f8 fe53 	bl	8001a1c <HAL_GPIO_WritePin>
 8008d76:	bf00      	nop
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	40020800 	.word	0x40020800

08008d84 <malloc>:
 8008d84:	4b02      	ldr	r3, [pc, #8]	; (8008d90 <malloc+0xc>)
 8008d86:	4601      	mov	r1, r0
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	f000 b82b 	b.w	8008de4 <_malloc_r>
 8008d8e:	bf00      	nop
 8008d90:	20000078 	.word	0x20000078

08008d94 <free>:
 8008d94:	4b02      	ldr	r3, [pc, #8]	; (8008da0 <free+0xc>)
 8008d96:	4601      	mov	r1, r0
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	f000 b8f3 	b.w	8008f84 <_free_r>
 8008d9e:	bf00      	nop
 8008da0:	20000078 	.word	0x20000078

08008da4 <sbrk_aligned>:
 8008da4:	b570      	push	{r4, r5, r6, lr}
 8008da6:	4e0e      	ldr	r6, [pc, #56]	; (8008de0 <sbrk_aligned+0x3c>)
 8008da8:	460c      	mov	r4, r1
 8008daa:	6831      	ldr	r1, [r6, #0]
 8008dac:	4605      	mov	r5, r0
 8008dae:	b911      	cbnz	r1, 8008db6 <sbrk_aligned+0x12>
 8008db0:	f000 f8ac 	bl	8008f0c <_sbrk_r>
 8008db4:	6030      	str	r0, [r6, #0]
 8008db6:	4621      	mov	r1, r4
 8008db8:	4628      	mov	r0, r5
 8008dba:	f000 f8a7 	bl	8008f0c <_sbrk_r>
 8008dbe:	1c43      	adds	r3, r0, #1
 8008dc0:	d00a      	beq.n	8008dd8 <sbrk_aligned+0x34>
 8008dc2:	1cc4      	adds	r4, r0, #3
 8008dc4:	f024 0403 	bic.w	r4, r4, #3
 8008dc8:	42a0      	cmp	r0, r4
 8008dca:	d007      	beq.n	8008ddc <sbrk_aligned+0x38>
 8008dcc:	1a21      	subs	r1, r4, r0
 8008dce:	4628      	mov	r0, r5
 8008dd0:	f000 f89c 	bl	8008f0c <_sbrk_r>
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d101      	bne.n	8008ddc <sbrk_aligned+0x38>
 8008dd8:	f04f 34ff 	mov.w	r4, #4294967295
 8008ddc:	4620      	mov	r0, r4
 8008dde:	bd70      	pop	{r4, r5, r6, pc}
 8008de0:	2000089c 	.word	0x2000089c

08008de4 <_malloc_r>:
 8008de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de8:	1ccd      	adds	r5, r1, #3
 8008dea:	f025 0503 	bic.w	r5, r5, #3
 8008dee:	3508      	adds	r5, #8
 8008df0:	2d0c      	cmp	r5, #12
 8008df2:	bf38      	it	cc
 8008df4:	250c      	movcc	r5, #12
 8008df6:	2d00      	cmp	r5, #0
 8008df8:	4607      	mov	r7, r0
 8008dfa:	db01      	blt.n	8008e00 <_malloc_r+0x1c>
 8008dfc:	42a9      	cmp	r1, r5
 8008dfe:	d905      	bls.n	8008e0c <_malloc_r+0x28>
 8008e00:	230c      	movs	r3, #12
 8008e02:	603b      	str	r3, [r7, #0]
 8008e04:	2600      	movs	r6, #0
 8008e06:	4630      	mov	r0, r6
 8008e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ee0 <_malloc_r+0xfc>
 8008e10:	f000 f868 	bl	8008ee4 <__malloc_lock>
 8008e14:	f8d8 3000 	ldr.w	r3, [r8]
 8008e18:	461c      	mov	r4, r3
 8008e1a:	bb5c      	cbnz	r4, 8008e74 <_malloc_r+0x90>
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	4638      	mov	r0, r7
 8008e20:	f7ff ffc0 	bl	8008da4 <sbrk_aligned>
 8008e24:	1c43      	adds	r3, r0, #1
 8008e26:	4604      	mov	r4, r0
 8008e28:	d155      	bne.n	8008ed6 <_malloc_r+0xf2>
 8008e2a:	f8d8 4000 	ldr.w	r4, [r8]
 8008e2e:	4626      	mov	r6, r4
 8008e30:	2e00      	cmp	r6, #0
 8008e32:	d145      	bne.n	8008ec0 <_malloc_r+0xdc>
 8008e34:	2c00      	cmp	r4, #0
 8008e36:	d048      	beq.n	8008eca <_malloc_r+0xe6>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	4631      	mov	r1, r6
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	eb04 0903 	add.w	r9, r4, r3
 8008e42:	f000 f863 	bl	8008f0c <_sbrk_r>
 8008e46:	4581      	cmp	r9, r0
 8008e48:	d13f      	bne.n	8008eca <_malloc_r+0xe6>
 8008e4a:	6821      	ldr	r1, [r4, #0]
 8008e4c:	1a6d      	subs	r5, r5, r1
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4638      	mov	r0, r7
 8008e52:	f7ff ffa7 	bl	8008da4 <sbrk_aligned>
 8008e56:	3001      	adds	r0, #1
 8008e58:	d037      	beq.n	8008eca <_malloc_r+0xe6>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	442b      	add	r3, r5
 8008e5e:	6023      	str	r3, [r4, #0]
 8008e60:	f8d8 3000 	ldr.w	r3, [r8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d038      	beq.n	8008eda <_malloc_r+0xf6>
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	42a2      	cmp	r2, r4
 8008e6c:	d12b      	bne.n	8008ec6 <_malloc_r+0xe2>
 8008e6e:	2200      	movs	r2, #0
 8008e70:	605a      	str	r2, [r3, #4]
 8008e72:	e00f      	b.n	8008e94 <_malloc_r+0xb0>
 8008e74:	6822      	ldr	r2, [r4, #0]
 8008e76:	1b52      	subs	r2, r2, r5
 8008e78:	d41f      	bmi.n	8008eba <_malloc_r+0xd6>
 8008e7a:	2a0b      	cmp	r2, #11
 8008e7c:	d917      	bls.n	8008eae <_malloc_r+0xca>
 8008e7e:	1961      	adds	r1, r4, r5
 8008e80:	42a3      	cmp	r3, r4
 8008e82:	6025      	str	r5, [r4, #0]
 8008e84:	bf18      	it	ne
 8008e86:	6059      	strne	r1, [r3, #4]
 8008e88:	6863      	ldr	r3, [r4, #4]
 8008e8a:	bf08      	it	eq
 8008e8c:	f8c8 1000 	streq.w	r1, [r8]
 8008e90:	5162      	str	r2, [r4, r5]
 8008e92:	604b      	str	r3, [r1, #4]
 8008e94:	4638      	mov	r0, r7
 8008e96:	f104 060b 	add.w	r6, r4, #11
 8008e9a:	f000 f829 	bl	8008ef0 <__malloc_unlock>
 8008e9e:	f026 0607 	bic.w	r6, r6, #7
 8008ea2:	1d23      	adds	r3, r4, #4
 8008ea4:	1af2      	subs	r2, r6, r3
 8008ea6:	d0ae      	beq.n	8008e06 <_malloc_r+0x22>
 8008ea8:	1b9b      	subs	r3, r3, r6
 8008eaa:	50a3      	str	r3, [r4, r2]
 8008eac:	e7ab      	b.n	8008e06 <_malloc_r+0x22>
 8008eae:	42a3      	cmp	r3, r4
 8008eb0:	6862      	ldr	r2, [r4, #4]
 8008eb2:	d1dd      	bne.n	8008e70 <_malloc_r+0x8c>
 8008eb4:	f8c8 2000 	str.w	r2, [r8]
 8008eb8:	e7ec      	b.n	8008e94 <_malloc_r+0xb0>
 8008eba:	4623      	mov	r3, r4
 8008ebc:	6864      	ldr	r4, [r4, #4]
 8008ebe:	e7ac      	b.n	8008e1a <_malloc_r+0x36>
 8008ec0:	4634      	mov	r4, r6
 8008ec2:	6876      	ldr	r6, [r6, #4]
 8008ec4:	e7b4      	b.n	8008e30 <_malloc_r+0x4c>
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	e7cc      	b.n	8008e64 <_malloc_r+0x80>
 8008eca:	230c      	movs	r3, #12
 8008ecc:	603b      	str	r3, [r7, #0]
 8008ece:	4638      	mov	r0, r7
 8008ed0:	f000 f80e 	bl	8008ef0 <__malloc_unlock>
 8008ed4:	e797      	b.n	8008e06 <_malloc_r+0x22>
 8008ed6:	6025      	str	r5, [r4, #0]
 8008ed8:	e7dc      	b.n	8008e94 <_malloc_r+0xb0>
 8008eda:	605b      	str	r3, [r3, #4]
 8008edc:	deff      	udf	#255	; 0xff
 8008ede:	bf00      	nop
 8008ee0:	20000898 	.word	0x20000898

08008ee4 <__malloc_lock>:
 8008ee4:	4801      	ldr	r0, [pc, #4]	; (8008eec <__malloc_lock+0x8>)
 8008ee6:	f000 b84b 	b.w	8008f80 <__retarget_lock_acquire_recursive>
 8008eea:	bf00      	nop
 8008eec:	200009dc 	.word	0x200009dc

08008ef0 <__malloc_unlock>:
 8008ef0:	4801      	ldr	r0, [pc, #4]	; (8008ef8 <__malloc_unlock+0x8>)
 8008ef2:	f000 b846 	b.w	8008f82 <__retarget_lock_release_recursive>
 8008ef6:	bf00      	nop
 8008ef8:	200009dc 	.word	0x200009dc

08008efc <memset>:
 8008efc:	4402      	add	r2, r0
 8008efe:	4603      	mov	r3, r0
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d100      	bne.n	8008f06 <memset+0xa>
 8008f04:	4770      	bx	lr
 8008f06:	f803 1b01 	strb.w	r1, [r3], #1
 8008f0a:	e7f9      	b.n	8008f00 <memset+0x4>

08008f0c <_sbrk_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d06      	ldr	r5, [pc, #24]	; (8008f28 <_sbrk_r+0x1c>)
 8008f10:	2300      	movs	r3, #0
 8008f12:	4604      	mov	r4, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	602b      	str	r3, [r5, #0]
 8008f18:	f7f8 f9a8 	bl	800126c <_sbrk>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	d102      	bne.n	8008f26 <_sbrk_r+0x1a>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	b103      	cbz	r3, 8008f26 <_sbrk_r+0x1a>
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	bd38      	pop	{r3, r4, r5, pc}
 8008f28:	200009d8 	.word	0x200009d8

08008f2c <__errno>:
 8008f2c:	4b01      	ldr	r3, [pc, #4]	; (8008f34 <__errno+0x8>)
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20000078 	.word	0x20000078

08008f38 <__libc_init_array>:
 8008f38:	b570      	push	{r4, r5, r6, lr}
 8008f3a:	4d0d      	ldr	r5, [pc, #52]	; (8008f70 <__libc_init_array+0x38>)
 8008f3c:	4c0d      	ldr	r4, [pc, #52]	; (8008f74 <__libc_init_array+0x3c>)
 8008f3e:	1b64      	subs	r4, r4, r5
 8008f40:	10a4      	asrs	r4, r4, #2
 8008f42:	2600      	movs	r6, #0
 8008f44:	42a6      	cmp	r6, r4
 8008f46:	d109      	bne.n	8008f5c <__libc_init_array+0x24>
 8008f48:	4d0b      	ldr	r5, [pc, #44]	; (8008f78 <__libc_init_array+0x40>)
 8008f4a:	4c0c      	ldr	r4, [pc, #48]	; (8008f7c <__libc_init_array+0x44>)
 8008f4c:	f000 f866 	bl	800901c <_init>
 8008f50:	1b64      	subs	r4, r4, r5
 8008f52:	10a4      	asrs	r4, r4, #2
 8008f54:	2600      	movs	r6, #0
 8008f56:	42a6      	cmp	r6, r4
 8008f58:	d105      	bne.n	8008f66 <__libc_init_array+0x2e>
 8008f5a:	bd70      	pop	{r4, r5, r6, pc}
 8008f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f60:	4798      	blx	r3
 8008f62:	3601      	adds	r6, #1
 8008f64:	e7ee      	b.n	8008f44 <__libc_init_array+0xc>
 8008f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f6a:	4798      	blx	r3
 8008f6c:	3601      	adds	r6, #1
 8008f6e:	e7f2      	b.n	8008f56 <__libc_init_array+0x1e>
 8008f70:	08009058 	.word	0x08009058
 8008f74:	08009058 	.word	0x08009058
 8008f78:	08009058 	.word	0x08009058
 8008f7c:	0800905c 	.word	0x0800905c

08008f80 <__retarget_lock_acquire_recursive>:
 8008f80:	4770      	bx	lr

08008f82 <__retarget_lock_release_recursive>:
 8008f82:	4770      	bx	lr

08008f84 <_free_r>:
 8008f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f86:	2900      	cmp	r1, #0
 8008f88:	d044      	beq.n	8009014 <_free_r+0x90>
 8008f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f8e:	9001      	str	r0, [sp, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f1a1 0404 	sub.w	r4, r1, #4
 8008f96:	bfb8      	it	lt
 8008f98:	18e4      	addlt	r4, r4, r3
 8008f9a:	f7ff ffa3 	bl	8008ee4 <__malloc_lock>
 8008f9e:	4a1e      	ldr	r2, [pc, #120]	; (8009018 <_free_r+0x94>)
 8008fa0:	9801      	ldr	r0, [sp, #4]
 8008fa2:	6813      	ldr	r3, [r2, #0]
 8008fa4:	b933      	cbnz	r3, 8008fb4 <_free_r+0x30>
 8008fa6:	6063      	str	r3, [r4, #4]
 8008fa8:	6014      	str	r4, [r2, #0]
 8008faa:	b003      	add	sp, #12
 8008fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fb0:	f7ff bf9e 	b.w	8008ef0 <__malloc_unlock>
 8008fb4:	42a3      	cmp	r3, r4
 8008fb6:	d908      	bls.n	8008fca <_free_r+0x46>
 8008fb8:	6825      	ldr	r5, [r4, #0]
 8008fba:	1961      	adds	r1, r4, r5
 8008fbc:	428b      	cmp	r3, r1
 8008fbe:	bf01      	itttt	eq
 8008fc0:	6819      	ldreq	r1, [r3, #0]
 8008fc2:	685b      	ldreq	r3, [r3, #4]
 8008fc4:	1949      	addeq	r1, r1, r5
 8008fc6:	6021      	streq	r1, [r4, #0]
 8008fc8:	e7ed      	b.n	8008fa6 <_free_r+0x22>
 8008fca:	461a      	mov	r2, r3
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	b10b      	cbz	r3, 8008fd4 <_free_r+0x50>
 8008fd0:	42a3      	cmp	r3, r4
 8008fd2:	d9fa      	bls.n	8008fca <_free_r+0x46>
 8008fd4:	6811      	ldr	r1, [r2, #0]
 8008fd6:	1855      	adds	r5, r2, r1
 8008fd8:	42a5      	cmp	r5, r4
 8008fda:	d10b      	bne.n	8008ff4 <_free_r+0x70>
 8008fdc:	6824      	ldr	r4, [r4, #0]
 8008fde:	4421      	add	r1, r4
 8008fe0:	1854      	adds	r4, r2, r1
 8008fe2:	42a3      	cmp	r3, r4
 8008fe4:	6011      	str	r1, [r2, #0]
 8008fe6:	d1e0      	bne.n	8008faa <_free_r+0x26>
 8008fe8:	681c      	ldr	r4, [r3, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	6053      	str	r3, [r2, #4]
 8008fee:	440c      	add	r4, r1
 8008ff0:	6014      	str	r4, [r2, #0]
 8008ff2:	e7da      	b.n	8008faa <_free_r+0x26>
 8008ff4:	d902      	bls.n	8008ffc <_free_r+0x78>
 8008ff6:	230c      	movs	r3, #12
 8008ff8:	6003      	str	r3, [r0, #0]
 8008ffa:	e7d6      	b.n	8008faa <_free_r+0x26>
 8008ffc:	6825      	ldr	r5, [r4, #0]
 8008ffe:	1961      	adds	r1, r4, r5
 8009000:	428b      	cmp	r3, r1
 8009002:	bf04      	itt	eq
 8009004:	6819      	ldreq	r1, [r3, #0]
 8009006:	685b      	ldreq	r3, [r3, #4]
 8009008:	6063      	str	r3, [r4, #4]
 800900a:	bf04      	itt	eq
 800900c:	1949      	addeq	r1, r1, r5
 800900e:	6021      	streq	r1, [r4, #0]
 8009010:	6054      	str	r4, [r2, #4]
 8009012:	e7ca      	b.n	8008faa <_free_r+0x26>
 8009014:	b003      	add	sp, #12
 8009016:	bd30      	pop	{r4, r5, pc}
 8009018:	20000898 	.word	0x20000898

0800901c <_init>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	bf00      	nop
 8009020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009022:	bc08      	pop	{r3}
 8009024:	469e      	mov	lr, r3
 8009026:	4770      	bx	lr

08009028 <_fini>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	bf00      	nop
 800902c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902e:	bc08      	pop	{r3}
 8009030:	469e      	mov	lr, r3
 8009032:	4770      	bx	lr
