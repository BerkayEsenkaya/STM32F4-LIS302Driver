
STM32F4-LIS302Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004410  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a8  080045a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080045a8  080045a8  000145a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045b0  080045b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000049c  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200004ac  200004ac  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000dde8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000026a8  00000000  00000000  0002de67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bf8  00000000  00000000  00030510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000090d  00000000  00000000  00031108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020ad2  00000000  00000000  00031a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f4ed  00000000  00000000  000524e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c32c3  00000000  00000000  000619d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000030dc  00000000  00000000  00124c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  00127d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004580 	.word	0x08004580

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004580 	.word	0x08004580

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <LIS3DSH_Init>:
/******************************************************************************
 *** FUNCTIONS
 ******************************************************************************/
/** \brief
 */
uint8_t LIS3DSH_Init(){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
	uint8_t whoIam[1];
	whoIam[0] = LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_WHOIAM, 1);
 80004ca:	2101      	movs	r1, #1
 80004cc:	200f      	movs	r0, #15
 80004ce:	f000 f80f 	bl	80004f0 <LIS3DSH_Read_Reg>
 80004d2:	4603      	mov	r3, r0
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	713b      	strb	r3, [r7, #4]
	if(whoIam[0] == _LIS3DSH_ID){  /* Communication is successful*/
 80004d8:	793b      	ldrb	r3, [r7, #4]
 80004da:	2b3f      	cmp	r3, #63	; 0x3f
 80004dc:	d103      	bne.n	80004e6 <LIS3DSH_Init+0x22>
		LIS3DSH_AccalometerSoftReset();
 80004de:	f000 f9c4 	bl	800086a <LIS3DSH_AccalometerSoftReset>
        return _LIS3DSH_OK;
 80004e2:	2301      	movs	r3, #1
 80004e4:	e000      	b.n	80004e8 <LIS3DSH_Init+0x24>
	}else{
		while(1){
 80004e6:	e7fe      	b.n	80004e6 <LIS3DSH_Init+0x22>

		}

	}
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <LIS3DSH_Read_Reg>:

/** \brief
 */
uint16_t LIS3DSH_Read_Reg(uint8_t RegAddr,uint8_t lenght){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af02      	add	r7, sp, #8
 80004f6:	4603      	mov	r3, r0
 80004f8:	460a      	mov	r2, r1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	4613      	mov	r3, r2
 80004fe:	71bb      	strb	r3, [r7, #6]
	uint8_t txBuff[1];
	uint8_t rxBuff[1];
	txBuff[0] = RegAddr | LIS3DSH_SPIMODE_READ;
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000506:	b2db      	uxtb	r3, r3
 8000508:	733b      	strb	r3, [r7, #12]

	SPI_TransmitReceive(SPI_NO1, txBuff, rxBuff, 1, lenght);
 800050a:	f107 0208 	add.w	r2, r7, #8
 800050e:	f107 010c 	add.w	r1, r7, #12
 8000512:	79bb      	ldrb	r3, [r7, #6]
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2301      	movs	r3, #1
 8000518:	2001      	movs	r0, #1
 800051a:	f000 feb7 	bl	800128c <SPI_TransmitReceive>
	return rxBuff[0];
 800051e:	7a3b      	ldrb	r3, [r7, #8]
 8000520:	b29b      	uxth	r3, r3
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <LIS3DSH_Write_Reg>:

/** \brief
 */
uint8_t LIS3DSH_Write_Reg(uint8_t RegAddr, uint8_t *data,uint8_t lenght){
 800052a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800052e:	b089      	sub	sp, #36	; 0x24
 8000530:	af02      	add	r7, sp, #8
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	4613      	mov	r3, r2
 800053a:	71bb      	strb	r3, [r7, #6]
 800053c:	466b      	mov	r3, sp
 800053e:	461e      	mov	r6, r3
	uint8_t txBuff[lenght+1];
 8000540:	79bb      	ldrb	r3, [r7, #6]
 8000542:	1c59      	adds	r1, r3, #1
 8000544:	1e4b      	subs	r3, r1, #1
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	460a      	mov	r2, r1
 800054a:	2300      	movs	r3, #0
 800054c:	4690      	mov	r8, r2
 800054e:	4699      	mov	r9, r3
 8000550:	f04f 0200 	mov.w	r2, #0
 8000554:	f04f 0300 	mov.w	r3, #0
 8000558:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800055c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000560:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000564:	460a      	mov	r2, r1
 8000566:	2300      	movs	r3, #0
 8000568:	4614      	mov	r4, r2
 800056a:	461d      	mov	r5, r3
 800056c:	f04f 0200 	mov.w	r2, #0
 8000570:	f04f 0300 	mov.w	r3, #0
 8000574:	00eb      	lsls	r3, r5, #3
 8000576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800057a:	00e2      	lsls	r2, r4, #3
 800057c:	460b      	mov	r3, r1
 800057e:	3307      	adds	r3, #7
 8000580:	08db      	lsrs	r3, r3, #3
 8000582:	00db      	lsls	r3, r3, #3
 8000584:	ebad 0d03 	sub.w	sp, sp, r3
 8000588:	ab02      	add	r3, sp, #8
 800058a:	3300      	adds	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
	uint8_t i;

	txBuff[0] = RegAddr & LIS3DSH_SPIMODE_WRITE;
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000594:	b2da      	uxtb	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	701a      	strb	r2, [r3, #0]
	for(i=1;i<lenght+1;i++){
 800059a:	2301      	movs	r3, #1
 800059c:	75fb      	strb	r3, [r7, #23]
 800059e:	e00a      	b.n	80005b6 <LIS3DSH_Write_Reg+0x8c>
	  txBuff[i] = data[i-1];
 80005a0:	7dfb      	ldrb	r3, [r7, #23]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	441a      	add	r2, r3
 80005a8:	7dfb      	ldrb	r3, [r7, #23]
 80005aa:	7811      	ldrb	r1, [r2, #0]
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<lenght+1;i++){
 80005b0:	7dfb      	ldrb	r3, [r7, #23]
 80005b2:	3301      	adds	r3, #1
 80005b4:	75fb      	strb	r3, [r7, #23]
 80005b6:	79ba      	ldrb	r2, [r7, #6]
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d2f0      	bcs.n	80005a0 <LIS3DSH_Write_Reg+0x76>
	}

    SPI_TransmitReceive(SPI_NO1, txBuff, NULL, lenght, 0);
 80005be:	79bb      	ldrb	r3, [r7, #6]
 80005c0:	2200      	movs	r2, #0
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	2200      	movs	r2, #0
 80005c6:	68f9      	ldr	r1, [r7, #12]
 80005c8:	2001      	movs	r0, #1
 80005ca:	f000 fe5f 	bl	800128c <SPI_TransmitReceive>
    return LIS3DSH_CTRL_WRITE_DATA_IS_CORRECT(RegAddr, data);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	6839      	ldr	r1, [r7, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f95c 	bl	8000890 <LIS3DSH_CTRL_WRITE_DATA_IS_CORRECT>
 80005d8:	4603      	mov	r3, r0
 80005da:	46b5      	mov	sp, r6
}
 80005dc:	4618      	mov	r0, r3
 80005de:	371c      	adds	r7, #28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080005e6 <LIS3DSH_Reg_Set_Ctrl3>:
    return LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL2, txBuff, 2);
}

/** \brief
 */
uint8_t LIS3DSH_Reg_Set_Ctrl3(LIS3DSH_DR_EN_T dren, LIS3DSH_IEA_T iea, LIS3DSH_IEL_T iel, LIS3DSH_INT2_EN_T int2_en, LIS3DSH_INT1_EN_T int1_en, LIS3DSH_VFILT_T Vfilt, LIS3DSH_STRT_T reset){
 80005e6:	b590      	push	{r4, r7, lr}
 80005e8:	b085      	sub	sp, #20
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	4604      	mov	r4, r0
 80005ee:	4608      	mov	r0, r1
 80005f0:	4611      	mov	r1, r2
 80005f2:	461a      	mov	r2, r3
 80005f4:	4623      	mov	r3, r4
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4603      	mov	r3, r0
 80005fa:	71bb      	strb	r3, [r7, #6]
 80005fc:	460b      	mov	r3, r1
 80005fe:	717b      	strb	r3, [r7, #5]
 8000600:	4613      	mov	r3, r2
 8000602:	713b      	strb	r3, [r7, #4]
	LIS3DSH_REG_CTRL_3_T SetReg;
    uint8_t txBuff[1];
    SetReg.dren = dren;
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	b2da      	uxtb	r2, r3
 800060c:	7b3b      	ldrb	r3, [r7, #12]
 800060e:	f362 1386 	bfi	r3, r2, #6, #1
 8000612:	733b      	strb	r3, [r7, #12]
    SetReg.iea = iea;
 8000614:	79bb      	ldrb	r3, [r7, #6]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	b2da      	uxtb	r2, r3
 800061c:	7b3b      	ldrb	r3, [r7, #12]
 800061e:	f362 1345 	bfi	r3, r2, #5, #1
 8000622:	733b      	strb	r3, [r7, #12]
    SetReg.iel = iel;
 8000624:	797b      	ldrb	r3, [r7, #5]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	b2da      	uxtb	r2, r3
 800062c:	7b3b      	ldrb	r3, [r7, #12]
 800062e:	f362 1304 	bfi	r3, r2, #4, #1
 8000632:	733b      	strb	r3, [r7, #12]
    SetReg.int2en = int2_en;
 8000634:	793b      	ldrb	r3, [r7, #4]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	b2da      	uxtb	r2, r3
 800063c:	7b3b      	ldrb	r3, [r7, #12]
 800063e:	f362 03c3 	bfi	r3, r2, #3, #1
 8000642:	733b      	strb	r3, [r7, #12]
    SetReg.int1en = int1_en;
 8000644:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	b2da      	uxtb	r2, r3
 800064e:	7b3b      	ldrb	r3, [r7, #12]
 8000650:	f362 0382 	bfi	r3, r2, #2, #1
 8000654:	733b      	strb	r3, [r7, #12]
    SetReg.vfilt = Vfilt;
 8000656:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	7b3b      	ldrb	r3, [r7, #12]
 8000662:	f362 0341 	bfi	r3, r2, #1, #1
 8000666:	733b      	strb	r3, [r7, #12]
    SetReg.reset = reset;
 8000668:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	b2da      	uxtb	r2, r3
 8000672:	7b3b      	ldrb	r3, [r7, #12]
 8000674:	f362 0300 	bfi	r3, r2, #0, #1
 8000678:	733b      	strb	r3, [r7, #12]
    txBuff[0] = SetReg.CTRL3;
 800067a:	7b3b      	ldrb	r3, [r7, #12]
 800067c:	723b      	strb	r3, [r7, #8]
    return LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL3, txBuff, 2);
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	2202      	movs	r2, #2
 8000684:	4619      	mov	r1, r3
 8000686:	2023      	movs	r0, #35	; 0x23
 8000688:	f7ff ff4f 	bl	800052a <LIS3DSH_Write_Reg>
 800068c:	4603      	mov	r3, r0
}
 800068e:	4618      	mov	r0, r3
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bd90      	pop	{r4, r7, pc}

08000696 <LIS3DSH_Reg_Set_Ctrl4>:

/** \brief
 */
uint8_t LIS3DSH_Reg_Set_Ctrl4(LIS3DSH_ODR_T odrVal, LIS3DSH_BDU_T bduVal, LIS3DSH_XEN_T StateXAxis, LIS3DSH_YEN_T StateYAxis, LIS3DSH_ZEN_T StateZAxis ){
 8000696:	b590      	push	{r4, r7, lr}
 8000698:	b085      	sub	sp, #20
 800069a:	af00      	add	r7, sp, #0
 800069c:	4604      	mov	r4, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4611      	mov	r1, r2
 80006a2:	461a      	mov	r2, r3
 80006a4:	4623      	mov	r3, r4
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4603      	mov	r3, r0
 80006aa:	71bb      	strb	r3, [r7, #6]
 80006ac:	460b      	mov	r3, r1
 80006ae:	717b      	strb	r3, [r7, #5]
 80006b0:	4613      	mov	r3, r2
 80006b2:	713b      	strb	r3, [r7, #4]
    LIS3DSH_REG_CTRL_4_T SetReg;
    uint8_t txBuff[1];
    SetReg.odr = odrVal;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	7b3b      	ldrb	r3, [r7, #12]
 80006be:	f362 1307 	bfi	r3, r2, #4, #4
 80006c2:	733b      	strb	r3, [r7, #12]
    SetReg.bdu = bduVal;
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	7b3b      	ldrb	r3, [r7, #12]
 80006ce:	f362 03c3 	bfi	r3, r2, #3, #1
 80006d2:	733b      	strb	r3, [r7, #12]
    SetReg.xaxis_en = StateXAxis;
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	7b3b      	ldrb	r3, [r7, #12]
 80006de:	f362 0300 	bfi	r3, r2, #0, #1
 80006e2:	733b      	strb	r3, [r7, #12]
    SetReg.yaxis_en = StateYAxis;
 80006e4:	793b      	ldrb	r3, [r7, #4]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	7b3b      	ldrb	r3, [r7, #12]
 80006ee:	f362 0341 	bfi	r3, r2, #1, #1
 80006f2:	733b      	strb	r3, [r7, #12]
    SetReg.zaxis_en = StateZAxis;
 80006f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	7b3b      	ldrb	r3, [r7, #12]
 8000700:	f362 0382 	bfi	r3, r2, #2, #1
 8000704:	733b      	strb	r3, [r7, #12]
    txBuff[0] = SetReg.CTRL4;
 8000706:	7b3b      	ldrb	r3, [r7, #12]
 8000708:	723b      	strb	r3, [r7, #8]
    return LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL4, txBuff, 2);
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	2202      	movs	r2, #2
 8000710:	4619      	mov	r1, r3
 8000712:	2020      	movs	r0, #32
 8000714:	f7ff ff09 	bl	800052a <LIS3DSH_Write_Reg>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	bd90      	pop	{r4, r7, pc}
	...

08000724 <LIS3DSH_Reg_Set_Ctrl5>:

/** \brief
 */
uint8_t LIS3DSH_Reg_Set_Ctrl5(LIS3DSH_BW_T bw,LIS3DSH_FSCALE_T scale, LIS3DSH_ST_T selftest ,LIS3DSH_SIM_T spiMode ){
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	4604      	mov	r4, r0
 800072c:	4608      	mov	r0, r1
 800072e:	4611      	mov	r1, r2
 8000730:	461a      	mov	r2, r3
 8000732:	4623      	mov	r3, r4
 8000734:	71fb      	strb	r3, [r7, #7]
 8000736:	4603      	mov	r3, r0
 8000738:	71bb      	strb	r3, [r7, #6]
 800073a:	460b      	mov	r3, r1
 800073c:	717b      	strb	r3, [r7, #5]
 800073e:	4613      	mov	r3, r2
 8000740:	713b      	strb	r3, [r7, #4]
	LIS3DSH_REG_CTRL_5_T SetReg;
	save.scale = scale;
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <LIS3DSH_Reg_Set_Ctrl5+0x80>)
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	7013      	strb	r3, [r2, #0]
	uint8_t txBuff[1];
	SetReg.bandwith = bw;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f003 0303 	and.w	r3, r3, #3
 800074e:	b2da      	uxtb	r2, r3
 8000750:	7b3b      	ldrb	r3, [r7, #12]
 8000752:	f362 1387 	bfi	r3, r2, #6, #2
 8000756:	733b      	strb	r3, [r7, #12]
	SetReg.scale = scale;
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	b2da      	uxtb	r2, r3
 8000760:	7b3b      	ldrb	r3, [r7, #12]
 8000762:	f362 03c5 	bfi	r3, r2, #3, #3
 8000766:	733b      	strb	r3, [r7, #12]
	SetReg.selftest = selftest;
 8000768:	797b      	ldrb	r3, [r7, #5]
 800076a:	f003 0303 	and.w	r3, r3, #3
 800076e:	b2da      	uxtb	r2, r3
 8000770:	7b3b      	ldrb	r3, [r7, #12]
 8000772:	f362 0342 	bfi	r3, r2, #1, #2
 8000776:	733b      	strb	r3, [r7, #12]
	SetReg.spiMode = spiMode;
 8000778:	793b      	ldrb	r3, [r7, #4]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b2da      	uxtb	r2, r3
 8000780:	7b3b      	ldrb	r3, [r7, #12]
 8000782:	f362 0300 	bfi	r3, r2, #0, #1
 8000786:	733b      	strb	r3, [r7, #12]
	txBuff[0] = SetReg.CTRL5;
 8000788:	7b3b      	ldrb	r3, [r7, #12]
 800078a:	723b      	strb	r3, [r7, #8]
	return LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL5, txBuff, 2);
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	2202      	movs	r2, #2
 8000792:	4619      	mov	r1, r3
 8000794:	2024      	movs	r0, #36	; 0x24
 8000796:	f7ff fec8 	bl	800052a <LIS3DSH_Write_Reg>
 800079a:	4603      	mov	r3, r0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd90      	pop	{r4, r7, pc}
 80007a4:	20000058 	.word	0x20000058

080007a8 <LIS3DSH_Reg_Set_Ctrl6>:

/** \brief
 */
uint8_t LIS3DSH_Reg_Set_Ctrl6(uint8_t boot, LIS3DSH_FIFO_EN_T fifo_en, LIS3DSH_WTM_EN_T wtm_en, LIS3DSH_ADD_INC_T reg_inc_en, LIS3DSH_P1_EMPTY_T fifo_empty_int, LIS3DSH_P1_WTM_T fifo_wtm_int, LIS3DSH_P1_OVERRUN_T fifo_ovr_int, LIS3DSH_P2_BOOT_T bootint){
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4604      	mov	r4, r0
 80007b0:	4608      	mov	r0, r1
 80007b2:	4611      	mov	r1, r2
 80007b4:	461a      	mov	r2, r3
 80007b6:	4623      	mov	r3, r4
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	4603      	mov	r3, r0
 80007bc:	71bb      	strb	r3, [r7, #6]
 80007be:	460b      	mov	r3, r1
 80007c0:	717b      	strb	r3, [r7, #5]
 80007c2:	4613      	mov	r3, r2
 80007c4:	713b      	strb	r3, [r7, #4]
	LIS3DSH_REG_CTRL_6_T SetReg;
	uint8_t txBuff[1];
	SetReg.boot = boot;
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	7b3b      	ldrb	r3, [r7, #12]
 80007d0:	f362 13c7 	bfi	r3, r2, #7, #1
 80007d4:	733b      	strb	r3, [r7, #12]
	SetReg.fifo_en = fifo_en;
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	7b3b      	ldrb	r3, [r7, #12]
 80007e0:	f362 1386 	bfi	r3, r2, #6, #1
 80007e4:	733b      	strb	r3, [r7, #12]
	SetReg.wtm_en = wtm_en;
 80007e6:	797b      	ldrb	r3, [r7, #5]
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	7b3b      	ldrb	r3, [r7, #12]
 80007f0:	f362 1345 	bfi	r3, r2, #5, #1
 80007f4:	733b      	strb	r3, [r7, #12]
	SetReg.reg_inc_en = reg_inc_en;
 80007f6:	793b      	ldrb	r3, [r7, #4]
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	7b3b      	ldrb	r3, [r7, #12]
 8000800:	f362 1304 	bfi	r3, r2, #4, #1
 8000804:	733b      	strb	r3, [r7, #12]
	SetReg.fifo_empty_int = fifo_empty_int;
 8000806:	f897 3020 	ldrb.w	r3, [r7, #32]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	b2da      	uxtb	r2, r3
 8000810:	7b3b      	ldrb	r3, [r7, #12]
 8000812:	f362 03c3 	bfi	r3, r2, #3, #1
 8000816:	733b      	strb	r3, [r7, #12]
	SetReg.fifo_wtm_int = fifo_wtm_int;
 8000818:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	b2da      	uxtb	r2, r3
 8000822:	7b3b      	ldrb	r3, [r7, #12]
 8000824:	f362 0382 	bfi	r3, r2, #2, #1
 8000828:	733b      	strb	r3, [r7, #12]
	SetReg.fifo_ovr_int = fifo_ovr_int;
 800082a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	b2da      	uxtb	r2, r3
 8000834:	7b3b      	ldrb	r3, [r7, #12]
 8000836:	f362 0341 	bfi	r3, r2, #1, #1
 800083a:	733b      	strb	r3, [r7, #12]
	SetReg.bootint = bootint;
 800083c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	b2da      	uxtb	r2, r3
 8000846:	7b3b      	ldrb	r3, [r7, #12]
 8000848:	f362 0300 	bfi	r3, r2, #0, #1
 800084c:	733b      	strb	r3, [r7, #12]
	txBuff[0] = SetReg.CTRL6;
 800084e:	7b3b      	ldrb	r3, [r7, #12]
 8000850:	723b      	strb	r3, [r7, #8]
	return LIS3DSH_Write_Reg(_LIS3DSH_REGADDR_CTRL6, txBuff, 2);
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	2202      	movs	r2, #2
 8000858:	4619      	mov	r1, r3
 800085a:	2025      	movs	r0, #37	; 0x25
 800085c:	f7ff fe65 	bl	800052a <LIS3DSH_Write_Reg>
 8000860:	4603      	mov	r3, r0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bd90      	pop	{r4, r7, pc}

0800086a <LIS3DSH_AccalometerSoftReset>:

/** \brief
 */
uint8_t LIS3DSH_AccalometerSoftReset(){
 800086a:	b580      	push	{r7, lr}
 800086c:	b084      	sub	sp, #16
 800086e:	af04      	add	r7, sp, #16
	LIS3DSH_Reg_Set_Ctrl3(INT1_DATA_READY_SIGNAL_DISABLE,INT_SIGNAL_ACTIVE_LOW,INT_SIGNAL_LATCH,INT2_DISABLE,INT1_DISABLE,VECTOR_FILT_DISABLE,SOFT_RESET_ENABLE);
 8000870:	2301      	movs	r3, #1
 8000872:	9302      	str	r3, [sp, #8]
 8000874:	2300      	movs	r3, #0
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	2300      	movs	r3, #0
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2300      	movs	r3, #0
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff feaf 	bl	80005e6 <LIS3DSH_Reg_Set_Ctrl3>
}
 8000888:	bf00      	nop
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <LIS3DSH_CTRL_WRITE_DATA_IS_CORRECT>:

/** \brief
 */
uint8_t LIS3DSH_CTRL_WRITE_DATA_IS_CORRECT(uint8_t regAddr, uint8_t *WrittenData){
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
	uint8_t rxBuff[1];
	rxBuff[0] = LIS3DSH_Read_Reg(regAddr,1);
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2101      	movs	r1, #1
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe25 	bl	80004f0 <LIS3DSH_Read_Reg>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	733b      	strb	r3, [r7, #12]
	if(WrittenData[0] == rxBuff[0]){
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	7b3b      	ldrb	r3, [r7, #12]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d101      	bne.n	80008ba <LIS3DSH_CTRL_WRITE_DATA_IS_CORRECT+0x2a>
		return _LIS3DSH_OK;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e000      	b.n	80008bc <LIS3DSH_CTRL_WRITE_DATA_IS_CORRECT+0x2c>
	}else{
		return _LIS3DSH_NOT_OK;
 80008ba:	2300      	movs	r3, #0
	}
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <LIS3DSH_Read_Accmeter_Data>:

/** \brief
 */
uint8_t LIS3DSH_Read_Accmeter_Data(){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

	results.axis[AXIS_X].raw  = LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_XH,1) << 8;
 80008c8:	2101      	movs	r1, #1
 80008ca:	2029      	movs	r0, #41	; 0x29
 80008cc:	f7ff fe10 	bl	80004f0 <LIS3DSH_Read_Reg>
 80008d0:	4603      	mov	r3, r0
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	4b44      	ldr	r3, [pc, #272]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 80008d8:	801a      	strh	r2, [r3, #0]
	results.axis[AXIS_X].raw |= LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_XL,1);
 80008da:	2101      	movs	r1, #1
 80008dc:	2028      	movs	r0, #40	; 0x28
 80008de:	f7ff fe07 	bl	80004f0 <LIS3DSH_Read_Reg>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b40      	ldr	r3, [pc, #256]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b3e      	ldr	r3, [pc, #248]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 80008f0:	801a      	strh	r2, [r3, #0]

	results.axis[AXIS_Y].raw =LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_YH,1) << 8;
 80008f2:	2101      	movs	r1, #1
 80008f4:	202b      	movs	r0, #43	; 0x2b
 80008f6:	f7ff fdfb 	bl	80004f0 <LIS3DSH_Read_Reg>
 80008fa:	4603      	mov	r3, r0
 80008fc:	021b      	lsls	r3, r3, #8
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4b39      	ldr	r3, [pc, #228]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 8000902:	819a      	strh	r2, [r3, #12]
	results.axis[AXIS_Y].raw |=LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_YL,1);
 8000904:	2101      	movs	r1, #1
 8000906:	202a      	movs	r0, #42	; 0x2a
 8000908:	f7ff fdf2 	bl	80004f0 <LIS3DSH_Read_Reg>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 8000912:	899b      	ldrh	r3, [r3, #12]
 8000914:	4313      	orrs	r3, r2
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 800091a:	819a      	strh	r2, [r3, #12]

	results.axis[AXIS_Z].raw = LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_ZH,1) << 8;
 800091c:	2101      	movs	r1, #1
 800091e:	202d      	movs	r0, #45	; 0x2d
 8000920:	f7ff fde6 	bl	80004f0 <LIS3DSH_Read_Reg>
 8000924:	4603      	mov	r3, r0
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	b29a      	uxth	r2, r3
 800092a:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 800092c:	831a      	strh	r2, [r3, #24]
	results.axis[AXIS_Z].raw |= LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_AXIS_ZL,1);
 800092e:	2101      	movs	r1, #1
 8000930:	202c      	movs	r0, #44	; 0x2c
 8000932:	f7ff fddd 	bl	80004f0 <LIS3DSH_Read_Reg>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 800093c:	8b1b      	ldrh	r3, [r3, #24]
 800093e:	4313      	orrs	r3, r2
 8000940:	b29a      	uxth	r2, r3
 8000942:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 8000944:	831a      	strh	r2, [r3, #24]

    if(results.axis[AXIS_X].raw >= 32767){
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800094e:	4293      	cmp	r3, r2
 8000950:	d909      	bls.n	8000966 <LIS3DSH_Read_Accmeter_Data+0xa2>
        	results.axis[AXIS_X].raw = 65535 - results.axis[AXIS_X].raw;
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	43db      	mvns	r3, r3
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 800095c:	801a      	strh	r2, [r3, #0]
        	results.axis[AXIS_X].sign = _DATA_NEGATIVE;
 800095e:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 8000960:	2200      	movs	r2, #0
 8000962:	721a      	strb	r2, [r3, #8]
 8000964:	e002      	b.n	800096c <LIS3DSH_Read_Accmeter_Data+0xa8>
        }else{
        	results.axis[AXIS_X].sign = _DATA_POSITIVE;
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 8000968:	2201      	movs	r2, #1
 800096a:	721a      	strb	r2, [r3, #8]
        }
        if(results.axis[AXIS_Y].raw >= 32767){
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 800096e:	899b      	ldrh	r3, [r3, #12]
 8000970:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8000974:	4293      	cmp	r3, r2
 8000976:	d909      	bls.n	800098c <LIS3DSH_Read_Accmeter_Data+0xc8>
            	results.axis[AXIS_Y].raw = 65535 - results.axis[AXIS_Y].raw;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 800097a:	899b      	ldrh	r3, [r3, #12]
 800097c:	43db      	mvns	r3, r3
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 8000982:	819a      	strh	r2, [r3, #12]
            	results.axis[AXIS_Y].sign = _DATA_NEGATIVE;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 8000986:	2200      	movs	r2, #0
 8000988:	751a      	strb	r2, [r3, #20]
 800098a:	e002      	b.n	8000992 <LIS3DSH_Read_Accmeter_Data+0xce>
        }else{
        	results.axis[AXIS_Y].sign = _DATA_POSITIVE;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 800098e:	2201      	movs	r2, #1
 8000990:	751a      	strb	r2, [r3, #20]
        }
        if(results.axis[AXIS_Z].raw >= 32767){
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 8000994:	8b1b      	ldrh	r3, [r3, #24]
 8000996:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800099a:	4293      	cmp	r3, r2
 800099c:	d90a      	bls.n	80009b4 <LIS3DSH_Read_Accmeter_Data+0xf0>
            	results.axis[AXIS_Z].raw = 65535 - results.axis[AXIS_Z].raw;
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 80009a0:	8b1b      	ldrh	r3, [r3, #24]
 80009a2:	43db      	mvns	r3, r3
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 80009a8:	831a      	strh	r2, [r3, #24]
            	results.axis[AXIS_Z].sign = _DATA_NEGATIVE;
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	f883 2020 	strb.w	r2, [r3, #32]
 80009b2:	e003      	b.n	80009bc <LIS3DSH_Read_Accmeter_Data+0xf8>
        }else{
        	results.axis[AXIS_Z].sign = _DATA_POSITIVE;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <LIS3DSH_Read_Accmeter_Data+0x124>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	f883 2020 	strb.w	r2, [r3, #32]
        }
        LIS3DSH_AvarageFilter(AXIS_X);
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f89f 	bl	8000b00 <LIS3DSH_AvarageFilter>
        LIS3DSH_ConvertData(AXIS_X);
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 f836 	bl	8000a34 <LIS3DSH_ConvertData>

        LIS3DSH_AvarageFilter(AXIS_Y);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f000 f899 	bl	8000b00 <LIS3DSH_AvarageFilter>
        LIS3DSH_ConvertData(AXIS_Y);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 f830 	bl	8000a34 <LIS3DSH_ConvertData>

        LIS3DSH_AvarageFilter(AXIS_Z);
 80009d4:	2002      	movs	r0, #2
 80009d6:	f000 f893 	bl	8000b00 <LIS3DSH_AvarageFilter>
        LIS3DSH_ConvertData(AXIS_Z);
 80009da:	2002      	movs	r0, #2
 80009dc:	f000 f82a 	bl	8000a34 <LIS3DSH_ConvertData>

}
 80009e0:	bf00      	nop
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000002c 	.word	0x2000002c

080009ec <LIS3DSH_Read_Temperature_Data>:

/** \brief
 */
uint8_t LIS3DSH_Read_Temperature_Data(){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	results.temperature.raw = LIS3DSH_Read_Reg(_LIS3DSH_REGADDR_OUTPUT_TEMPERATURE,2);
 80009f0:	2102      	movs	r1, #2
 80009f2:	200c      	movs	r0, #12
 80009f4:	f7ff fd7c 	bl	80004f0 <LIS3DSH_Read_Reg>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <LIS3DSH_Read_Temperature_Data+0x44>)
 80009fe:	849a      	strh	r2, [r3, #36]	; 0x24
	if(results.temperature.raw >= 0x80){
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <LIS3DSH_Read_Temperature_Data+0x44>)
 8000a02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a04:	2b7f      	cmp	r3, #127	; 0x7f
 8000a06:	d906      	bls.n	8000a16 <LIS3DSH_Read_Temperature_Data+0x2a>
		results.temperature.raw = 0xFF - results.temperature.raw + 1;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <LIS3DSH_Read_Temperature_Data+0x44>)
 8000a0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a0c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <LIS3DSH_Read_Temperature_Data+0x44>)
 8000a14:	849a      	strh	r2, [r3, #36]	; 0x24
	}
	results.temperature.celcius = 25 + (results.temperature.raw/2);
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <LIS3DSH_Read_Temperature_Data+0x44>)
 8000a18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a1a:	085b      	lsrs	r3, r3, #1
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	3319      	adds	r3, #25
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <LIS3DSH_Read_Temperature_Data+0x44>)
 8000a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8000a2a:	bf00      	nop
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2000002c 	.word	0x2000002c

08000a34 <LIS3DSH_ConvertData>:

/** \brief
 */
uint8_t LIS3DSH_ConvertData(uint8_t axis){
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	uint32_t convertMltply;
    switch(save.scale){
 8000a3e:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <LIS3DSH_ConvertData+0xbc>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	d81f      	bhi.n	8000a86 <LIS3DSH_ConvertData+0x52>
 8000a46:	a201      	add	r2, pc, #4	; (adr r2, 8000a4c <LIS3DSH_ConvertData+0x18>)
 8000a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4c:	08000a61 	.word	0x08000a61
 8000a50:	08000a69 	.word	0x08000a69
 8000a54:	08000a71 	.word	0x08000a71
 8000a58:	08000a79 	.word	0x08000a79
 8000a5c:	08000a81 	.word	0x08000a81
       case SCALE_SELECT_2G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_2G;
 8000a60:	f241 73d7 	movw	r3, #6103	; 0x17d7
 8000a64:	60fb      	str	r3, [r7, #12]
       break;
 8000a66:	e00e      	b.n	8000a86 <LIS3DSH_ConvertData+0x52>
       case SCALE_SELECT_4G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_4G;
 8000a68:	f642 73af 	movw	r3, #12207	; 0x2faf
 8000a6c:	60fb      	str	r3, [r7, #12]
       break;
 8000a6e:	e00a      	b.n	8000a86 <LIS3DSH_ConvertData+0x52>
       case SCALE_SELECT_6G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_6G;
 8000a70:	f244 7386 	movw	r3, #18310	; 0x4786
 8000a74:	60fb      	str	r3, [r7, #12]
       break;
 8000a76:	e006      	b.n	8000a86 <LIS3DSH_ConvertData+0x52>
       case SCALE_SELECT_8G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_8G;
 8000a78:	f645 735e 	movw	r3, #24414	; 0x5f5e
 8000a7c:	60fb      	str	r3, [r7, #12]
       break;
 8000a7e:	e002      	b.n	8000a86 <LIS3DSH_ConvertData+0x52>
       case SCALE_SELECT_16G :convertMltply = _LIS3DSH_CONVERT_DATA_CONST_16G;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <LIS3DSH_ConvertData+0xc0>)
 8000a82:	60fb      	str	r3, [r7, #12]
       break;
 8000a84:	bf00      	nop
    }

    results.axis[axis].mg = results.axis[axis].filtered * convertMltply;
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	491b      	ldr	r1, [pc, #108]	; (8000af8 <LIS3DSH_ConvertData+0xc4>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	440b      	add	r3, r1
 8000a94:	3302      	adds	r3, #2
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	fb03 f101 	mul.w	r1, r3, r1
 8000aa2:	4815      	ldr	r0, [pc, #84]	; (8000af8 <LIS3DSH_ConvertData+0xc4>)
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4403      	add	r3, r0
 8000aae:	3304      	adds	r3, #4
 8000ab0:	6019      	str	r1, [r3, #0]
    results.axis[axis].mg = results.axis[axis].mg / _LIS3DSH_CONVERT_DATA_CONST_DIVIDER;
 8000ab2:	79fa      	ldrb	r2, [r7, #7]
 8000ab4:	4910      	ldr	r1, [pc, #64]	; (8000af8 <LIS3DSH_ConvertData+0xc4>)
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	440b      	add	r3, r1
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	490c      	ldr	r1, [pc, #48]	; (8000afc <LIS3DSH_ConvertData+0xc8>)
 8000aca:	fba1 1303 	umull	r1, r3, r1, r3
 8000ace:	09d9      	lsrs	r1, r3, #7
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <LIS3DSH_ConvertData+0xc4>)
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	4413      	add	r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4403      	add	r3, r0
 8000adc:	3304      	adds	r3, #4
 8000ade:	6019      	str	r1, [r3, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000058 	.word	0x20000058
 8000af4:	00011d28 	.word	0x00011d28
 8000af8:	2000002c 	.word	0x2000002c
 8000afc:	0a7c5ac5 	.word	0x0a7c5ac5

08000b00 <LIS3DSH_AvarageFilter>:

/** \brief
 */
uint8_t LIS3DSH_AvarageFilter(uint8_t axis){
 8000b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b04:	b085      	sub	sp, #20
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t arrayMaxIndex = (_LIS3DSH_FILTERSIZE - 1);
 8000b0c:	2309      	movs	r3, #9
 8000b0e:	73bb      	strb	r3, [r7, #14]
		Filter.AvarageFilter[axis].data[Filter.AvarageFilter[axis].entered] = results.axis[axis].raw;
		Filter.AvarageFilter[axis].entered = 1;
		return 1;
	}
*/
	Filter.AvarageFilter[axis].data[ Filter.AvarageFilter[axis].entered ] = results.axis[axis].raw; /* */
 8000b10:	79f9      	ldrb	r1, [r7, #7]
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	79f8      	ldrb	r0, [r7, #7]
 8000b16:	4e6a      	ldr	r6, [pc, #424]	; (8000cc0 <LIS3DSH_AvarageFilter+0x1c0>)
 8000b18:	4603      	mov	r3, r0
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4403      	add	r3, r0
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	4433      	add	r3, r6
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461e      	mov	r6, r3
 8000b26:	4867      	ldr	r0, [pc, #412]	; (8000cc4 <LIS3DSH_AvarageFilter+0x1c4>)
 8000b28:	460b      	mov	r3, r1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	440b      	add	r3, r1
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4403      	add	r3, r0
 8000b32:	8818      	ldrh	r0, [r3, #0]
 8000b34:	4962      	ldr	r1, [pc, #392]	; (8000cc0 <LIS3DSH_AvarageFilter+0x1c0>)
 8000b36:	4613      	mov	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4413      	add	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4433      	add	r3, r6
 8000b40:	3308      	adds	r3, #8
 8000b42:	4602      	mov	r2, r0
 8000b44:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	if(Filter.AvarageFilter[axis].entered == arrayMaxIndex){
 8000b48:	79fa      	ldrb	r2, [r7, #7]
 8000b4a:	495d      	ldr	r1, [pc, #372]	; (8000cc0 <LIS3DSH_AvarageFilter+0x1c0>)
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	440b      	add	r3, r1
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	7bba      	ldrb	r2, [r7, #14]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	f040 8096 	bne.w	8000c8c <LIS3DSH_AvarageFilter+0x18c>
		for(i=0; i <= arrayMaxIndex; i++ ){
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e02b      	b.n	8000bbe <LIS3DSH_AvarageFilter+0xbe>
			Filter.AvarageFilter[axis].sum +=  Filter.AvarageFilter[axis].data[i]; /* The received data is summed after reaching the filter size*/
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	4955      	ldr	r1, [pc, #340]	; (8000cc0 <LIS3DSH_AvarageFilter+0x1c0>)
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	440b      	add	r3, r1
 8000b74:	3308      	adds	r3, #8
 8000b76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	7bfe      	ldrb	r6, [r7, #15]
 8000b7e:	4b50      	ldr	r3, [pc, #320]	; (8000cc0 <LIS3DSH_AvarageFilter+0x1c0>)
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4613      	mov	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4433      	add	r3, r6
 8000b8c:	3308      	adds	r3, #8
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	2200      	movs	r2, #0
 8000b98:	461c      	mov	r4, r3
 8000b9a:	4615      	mov	r5, r2
 8000b9c:	79fa      	ldrb	r2, [r7, #7]
 8000b9e:	eb10 0804 	adds.w	r8, r0, r4
 8000ba2:	eb41 0905 	adc.w	r9, r1, r5
 8000ba6:	4946      	ldr	r1, [pc, #280]	; (8000cc0 <LIS3DSH_AvarageFilter+0x1c0>)
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	440b      	add	r3, r1
 8000bb2:	3308      	adds	r3, #8
 8000bb4:	e9c3 8900 	strd	r8, r9, [r3]
		for(i=0; i <= arrayMaxIndex; i++ ){
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	7bfa      	ldrb	r2, [r7, #15]
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d9cf      	bls.n	8000b66 <LIS3DSH_AvarageFilter+0x66>
		}
		for(i=1; i <= arrayMaxIndex; i++ ){
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	e01a      	b.n	8000c02 <LIS3DSH_AvarageFilter+0x102>
			Filter.AvarageFilter[axis].data[i-1] = Filter.AvarageFilter[axis].data[i]; /* Fifo */
 8000bcc:	79f9      	ldrb	r1, [r7, #7]
 8000bce:	7bfc      	ldrb	r4, [r7, #15]
 8000bd0:	79fa      	ldrb	r2, [r7, #7]
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	1e58      	subs	r0, r3, #1
 8000bd6:	4d3a      	ldr	r5, [pc, #232]	; (8000cc0 <LIS3DSH_AvarageFilter+0x1c0>)
 8000bd8:	460b      	mov	r3, r1
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	440b      	add	r3, r1
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4423      	add	r3, r4
 8000be2:	3308      	adds	r3, #8
 8000be4:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 8000be8:	4935      	ldr	r1, [pc, #212]	; (8000cc0 <LIS3DSH_AvarageFilter+0x1c0>)
 8000bea:	4613      	mov	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4403      	add	r3, r0
 8000bf4:	3308      	adds	r3, #8
 8000bf6:	4622      	mov	r2, r4
 8000bf8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(i=1; i <= arrayMaxIndex; i++ ){
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	7bfa      	ldrb	r2, [r7, #15]
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d9e0      	bls.n	8000bcc <LIS3DSH_AvarageFilter+0xcc>
		}

		results.axis[axis].filtered = Filter.AvarageFilter[axis].sum / (_LIS3DSH_FILTERSIZE); /* Calculate the average*/
 8000c0a:	79fa      	ldrb	r2, [r7, #7]
 8000c0c:	492c      	ldr	r1, [pc, #176]	; (8000cc0 <LIS3DSH_AvarageFilter+0x1c0>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3308      	adds	r3, #8
 8000c1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c1e:	f04f 020a 	mov.w	r2, #10
 8000c22:	f04f 0300 	mov.w	r3, #0
 8000c26:	f7ff facf 	bl	80001c8 <__aeabi_uldivmod>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4619      	mov	r1, r3
 8000c32:	79fa      	ldrb	r2, [r7, #7]
 8000c34:	b280      	uxth	r0, r0
 8000c36:	4923      	ldr	r1, [pc, #140]	; (8000cc4 <LIS3DSH_AvarageFilter+0x1c4>)
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	440b      	add	r3, r1
 8000c42:	3302      	adds	r3, #2
 8000c44:	4602      	mov	r2, r0
 8000c46:	801a      	strh	r2, [r3, #0]
		Filter.AvarageFilter[axis].sum = 0;
 8000c48:	79fa      	ldrb	r2, [r7, #7]
 8000c4a:	491d      	ldr	r1, [pc, #116]	; (8000cc0 <LIS3DSH_AvarageFilter+0x1c0>)
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	440b      	add	r3, r1
 8000c56:	f103 0108 	add.w	r1, r3, #8
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	f04f 0300 	mov.w	r3, #0
 8000c62:	e9c1 2300 	strd	r2, r3, [r1]
		Filter.AvarageFilter[axis].entered -= 1;
 8000c66:	79fa      	ldrb	r2, [r7, #7]
 8000c68:	4915      	ldr	r1, [pc, #84]	; (8000cc0 <LIS3DSH_AvarageFilter+0x1c0>)
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	440b      	add	r3, r1
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	79fa      	ldrb	r2, [r7, #7]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	b2d8      	uxtb	r0, r3
 8000c7c:	4910      	ldr	r1, [pc, #64]	; (8000cc0 <LIS3DSH_AvarageFilter+0x1c0>)
 8000c7e:	4613      	mov	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	440b      	add	r3, r1
 8000c88:	4602      	mov	r2, r0
 8000c8a:	701a      	strb	r2, [r3, #0]

	}

	Filter.AvarageFilter[axis].entered += 1;
 8000c8c:	79fa      	ldrb	r2, [r7, #7]
 8000c8e:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <LIS3DSH_AvarageFilter+0x1c0>)
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	440b      	add	r3, r1
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	79fa      	ldrb	r2, [r7, #7]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b2d8      	uxtb	r0, r3
 8000ca2:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <LIS3DSH_AvarageFilter+0x1c0>)
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	4602      	mov	r2, r0
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000060 	.word	0x20000060
 8000cc4:	2000002c 	.word	0x2000002c

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cce:	f000 fd0f 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd2:	f000 f8af 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd6:	f000 f9ab 	bl	8001030 <MX_GPIO_Init>
  MX_I2S3_Init();
 8000cda:	f000 f921 	bl	8000f20 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000cde:	f000 f94f 	bl	8000f80 <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000ce2:	f000 f983 	bl	8000fec <MX_USB_OTG_FS_HCD_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ce6:	f000 f90f 	bl	8000f08 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2108      	movs	r1, #8
 8000cee:	484d      	ldr	r0, [pc, #308]	; (8000e24 <main+0x15c>)
 8000cf0:	f001 f864 	bl	8001dbc <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000cf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf8:	f000 fd6c 	bl	80017d4 <HAL_Delay>
  LIS3DSH_Init();
 8000cfc:	f7ff fbe2 	bl	80004c4 <LIS3DSH_Init>

  LIS3DSH_Reg_Set_Ctrl3(INT1_DATA_READY_SIGNAL_ENABLE, INT_SIGNAL_ACTIVE_LOW, INT_SIGNAL_PULSE, INT2_ENABLE, INT1_ENABLE, VECTOR_FILT_DISABLE, SOFT_RESET_DISABLE);
 8000d00:	2300      	movs	r3, #0
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	2300      	movs	r3, #0
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2100      	movs	r1, #0
 8000d12:	2001      	movs	r0, #1
 8000d14:	f7ff fc67 	bl	80005e6 <LIS3DSH_Reg_Set_Ctrl3>
  LIS3DSH_Reg_Set_Ctrl4(DATARATE_HZ_3,DATA_CONT_UPDATE , AXIS_X_ENABLE, AXIS_Y_ENABLE, AXIS_Z_ENABLE);
 8000d18:	2301      	movs	r3, #1
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2100      	movs	r1, #0
 8000d22:	2001      	movs	r0, #1
 8000d24:	f7ff fcb7 	bl	8000696 <LIS3DSH_Reg_Set_Ctrl4>
  LIS3DSH_Reg_Set_Ctrl5(ANTIALIASING_FILTER_BANDWIDTH_HZ_800, SCALE_SELECT_4G,NORMAL_MODE , SPI_INTERFACE_4WIRE);
 8000d28:	2300      	movs	r3, #0
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff fcf8 	bl	8000724 <LIS3DSH_Reg_Set_Ctrl5>
  LIS3DSH_Reg_Set_Ctrl6(BOOT_DISABLE, FIFO_DISABLE, FIFO_WATERMARK_LEVEL_DISABLE, REG_ADDR_AUTO_INCREMENT_DISABLE, FIFO_EMPTY_INDICATION_DISABLE, FIFO_WATERMARK_INT_DISABLE, FIFO_OVERRUN_INT_DISABLE, BOOT_INT_DISABLE);
 8000d34:	2300      	movs	r3, #0
 8000d36:	9303      	str	r3, [sp, #12]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	2300      	movs	r3, #0
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2300      	movs	r3, #0
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fd2c 	bl	80007a8 <LIS3DSH_Reg_Set_Ctrl6>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

   if(callback.LIS3DSH_INTERRUPT_STATE == LIS3DSH_DATA_READY){
 8000d50:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <main+0x160>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d106      	bne.n	8000d66 <main+0x9e>
	  LIS3DSH_Read_Accmeter_Data();
 8000d58:	f7ff fdb4 	bl	80008c4 <LIS3DSH_Read_Accmeter_Data>
	  LIS3DSH_Read_Temperature_Data();
 8000d5c:	f7ff fe46 	bl	80009ec <LIS3DSH_Read_Temperature_Data>
	  callback.LIS3DSH_INTERRUPT_STATE = LIS3DSH_DATA_NOT_READY;
 8000d60:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <main+0x160>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
   }

      if(results.axis[AXIS_X].mg >= 350){
 8000d66:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <main+0x164>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000d6e:	d31d      	bcc.n	8000dac <main+0xe4>
	      if(results.axis[AXIS_X].sign == 1){
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <main+0x164>)
 8000d72:	7a1b      	ldrb	r3, [r3, #8]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d10c      	bne.n	8000d92 <main+0xca>
		     HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7e:	482c      	ldr	r0, [pc, #176]	; (8000e30 <main+0x168>)
 8000d80:	f001 f81c 	bl	8001dbc <HAL_GPIO_WritePin>
		     HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d8a:	4829      	ldr	r0, [pc, #164]	; (8000e30 <main+0x168>)
 8000d8c:	f001 f816 	bl	8001dbc <HAL_GPIO_WritePin>
 8000d90:	e018      	b.n	8000dc4 <main+0xfc>
	      }else{
		     HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	4825      	ldr	r0, [pc, #148]	; (8000e30 <main+0x168>)
 8000d9a:	f001 f80f 	bl	8001dbc <HAL_GPIO_WritePin>
		     HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da4:	4822      	ldr	r0, [pc, #136]	; (8000e30 <main+0x168>)
 8000da6:	f001 f809 	bl	8001dbc <HAL_GPIO_WritePin>
 8000daa:	e00b      	b.n	8000dc4 <main+0xfc>
	     }
      }else{
	      HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db2:	481f      	ldr	r0, [pc, #124]	; (8000e30 <main+0x168>)
 8000db4:	f001 f802 	bl	8001dbc <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dbe:	481c      	ldr	r0, [pc, #112]	; (8000e30 <main+0x168>)
 8000dc0:	f000 fffc 	bl	8001dbc <HAL_GPIO_WritePin>
      }

      if(results.axis[AXIS_Y].mg >= 350){
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <main+0x164>)
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000dcc:	d31d      	bcc.n	8000e0a <main+0x142>
   	      if(results.axis[AXIS_Y].sign == 1){
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <main+0x164>)
 8000dd0:	7d1b      	ldrb	r3, [r3, #20]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d10c      	bne.n	8000df0 <main+0x128>
   		      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ddc:	4814      	ldr	r0, [pc, #80]	; (8000e30 <main+0x168>)
 8000dde:	f000 ffed 	bl	8001dbc <HAL_GPIO_WritePin>
   		      HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de8:	4811      	ldr	r0, [pc, #68]	; (8000e30 <main+0x168>)
 8000dea:	f000 ffe7 	bl	8001dbc <HAL_GPIO_WritePin>
 8000dee:	e7af      	b.n	8000d50 <main+0x88>
   	      }else{
   		      HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df6:	480e      	ldr	r0, [pc, #56]	; (8000e30 <main+0x168>)
 8000df8:	f000 ffe0 	bl	8001dbc <HAL_GPIO_WritePin>
   		      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e02:	480b      	ldr	r0, [pc, #44]	; (8000e30 <main+0x168>)
 8000e04:	f000 ffda 	bl	8001dbc <HAL_GPIO_WritePin>
 8000e08:	e7a2      	b.n	8000d50 <main+0x88>
   	      }
      }else{
   	       HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e10:	4807      	ldr	r0, [pc, #28]	; (8000e30 <main+0x168>)
 8000e12:	f000 ffd3 	bl	8001dbc <HAL_GPIO_WritePin>
   	       HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <main+0x168>)
 8000e1e:	f000 ffcd 	bl	8001dbc <HAL_GPIO_WritePin>
   if(callback.LIS3DSH_INTERRUPT_STATE == LIS3DSH_DATA_READY){
 8000e22:	e795      	b.n	8000d50 <main+0x88>
 8000e24:	40021000 	.word	0x40021000
 8000e28:	200004a4 	.word	0x200004a4
 8000e2c:	2000002c 	.word	0x2000002c
 8000e30:	40020c00 	.word	0x40020c00

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b094      	sub	sp, #80	; 0x50
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2230      	movs	r2, #48	; 0x30
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 fb70 	bl	8004528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
 8000e68:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e90:	2301      	movs	r3, #1
 8000e92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ea8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000eac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 fcb2 	bl	8002824 <HAL_RCC_OscConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ec6:	f000 f9db 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eca:	230f      	movs	r3, #15
 8000ecc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ed6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	2105      	movs	r1, #5
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 ff13 	bl	8002d14 <HAL_RCC_ClockConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ef4:	f000 f9c4 	bl	8001280 <Error_Handler>
  }
}
 8000ef8:	bf00      	nop
 8000efa:	3750      	adds	r7, #80	; 0x50
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40007000 	.word	0x40007000

08000f08 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2006      	movs	r0, #6
 8000f12:	f000 fd5e 	bl	80019d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f16:	2006      	movs	r0, #6
 8000f18:	f000 fd77 	bl	8001a0a <HAL_NVIC_EnableIRQ>
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MX_I2S3_Init+0x54>)
 8000f26:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <MX_I2S3_Init+0x58>)
 8000f28:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_I2S3_Init+0x54>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <MX_I2S3_Init+0x54>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_I2S3_Init+0x54>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <MX_I2S3_Init+0x54>)
 8000f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f44:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <MX_I2S3_Init+0x54>)
 8000f48:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <MX_I2S3_Init+0x5c>)
 8000f4a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_I2S3_Init+0x54>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <MX_I2S3_Init+0x54>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_I2S3_Init+0x54>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_I2S3_Init+0x54>)
 8000f60:	f000 ffc0 	bl	8001ee4 <HAL_I2S_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f6a:	f000 f989 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000100 	.word	0x20000100
 8000f78:	40003c00 	.word	0x40003c00
 8000f7c:	00017700 	.word	0x00017700

08000f80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <MX_SPI1_Init+0x64>)
 8000f86:	4a18      	ldr	r2, [pc, #96]	; (8000fe8 <MX_SPI1_Init+0x68>)
 8000f88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_SPI1_Init+0x64>)
 8000f8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_SPI1_Init+0x64>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_SPI1_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_SPI1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_SPI1_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_SPI1_Init+0x64>)
 8000fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_SPI1_Init+0x64>)
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <MX_SPI1_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_SPI1_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_SPI1_Init+0x64>)
 8000fcc:	220a      	movs	r2, #10
 8000fce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fd0:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <MX_SPI1_Init+0x64>)
 8000fd2:	f002 f9cb 	bl	800336c <HAL_SPI_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fdc:	f000 f950 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
//  SPI_Init(&SPI_1, 1, CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin);
  /* USER CODE END SPI1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000148 	.word	0x20000148
 8000fe8:	40013000 	.word	0x40013000

08000fec <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000ff2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ff6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001000:	2201      	movs	r2, #1
 8001002:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_USB_OTG_FS_HCD_Init+0x40>)
 800100c:	2202      	movs	r2, #2
 800100e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001018:	f000 ff02 	bl	8001e20 <HAL_HCD_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8001022:	f000 f92d 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200001a0 	.word	0x200001a0

08001030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	4b7e      	ldr	r3, [pc, #504]	; (8001244 <MX_GPIO_Init+0x214>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a7d      	ldr	r2, [pc, #500]	; (8001244 <MX_GPIO_Init+0x214>)
 8001050:	f043 0310 	orr.w	r3, r3, #16
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <MX_GPIO_Init+0x214>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	4b77      	ldr	r3, [pc, #476]	; (8001244 <MX_GPIO_Init+0x214>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a76      	ldr	r2, [pc, #472]	; (8001244 <MX_GPIO_Init+0x214>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b74      	ldr	r3, [pc, #464]	; (8001244 <MX_GPIO_Init+0x214>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	4b70      	ldr	r3, [pc, #448]	; (8001244 <MX_GPIO_Init+0x214>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a6f      	ldr	r2, [pc, #444]	; (8001244 <MX_GPIO_Init+0x214>)
 8001088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b6d      	ldr	r3, [pc, #436]	; (8001244 <MX_GPIO_Init+0x214>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b69      	ldr	r3, [pc, #420]	; (8001244 <MX_GPIO_Init+0x214>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a68      	ldr	r2, [pc, #416]	; (8001244 <MX_GPIO_Init+0x214>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b66      	ldr	r3, [pc, #408]	; (8001244 <MX_GPIO_Init+0x214>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b62      	ldr	r3, [pc, #392]	; (8001244 <MX_GPIO_Init+0x214>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a61      	ldr	r2, [pc, #388]	; (8001244 <MX_GPIO_Init+0x214>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b5f      	ldr	r3, [pc, #380]	; (8001244 <MX_GPIO_Init+0x214>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b5b      	ldr	r3, [pc, #364]	; (8001244 <MX_GPIO_Init+0x214>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a5a      	ldr	r2, [pc, #360]	; (8001244 <MX_GPIO_Init+0x214>)
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b58      	ldr	r3, [pc, #352]	; (8001244 <MX_GPIO_Init+0x214>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2108      	movs	r1, #8
 80010f2:	4855      	ldr	r0, [pc, #340]	; (8001248 <MX_GPIO_Init+0x218>)
 80010f4:	f000 fe62 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2101      	movs	r1, #1
 80010fc:	4853      	ldr	r0, [pc, #332]	; (800124c <MX_GPIO_Init+0x21c>)
 80010fe:	f000 fe5d 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001102:	2200      	movs	r2, #0
 8001104:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001108:	4851      	ldr	r0, [pc, #324]	; (8001250 <MX_GPIO_Init+0x220>)
 800110a:	f000 fe57 	bl	8001dbc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800110e:	2308      	movs	r3, #8
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	4848      	ldr	r0, [pc, #288]	; (8001248 <MX_GPIO_Init+0x218>)
 8001126:	f000 fcad 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800112a:	2301      	movs	r3, #1
 800112c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	4842      	ldr	r0, [pc, #264]	; (800124c <MX_GPIO_Init+0x21c>)
 8001142:	f000 fc9f 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001146:	2308      	movs	r3, #8
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001156:	2305      	movs	r3, #5
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	483a      	ldr	r0, [pc, #232]	; (800124c <MX_GPIO_Init+0x21c>)
 8001162:	f000 fc8f 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001166:	2304      	movs	r3, #4
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	4836      	ldr	r0, [pc, #216]	; (8001254 <MX_GPIO_Init+0x224>)
 800117a:	f000 fc83 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800117e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001190:	2305      	movs	r3, #5
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	482e      	ldr	r0, [pc, #184]	; (8001254 <MX_GPIO_Init+0x224>)
 800119c:	f000 fc72 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011a0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80011a4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4825      	ldr	r0, [pc, #148]	; (8001250 <MX_GPIO_Init+0x220>)
 80011ba:	f000 fc63 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011be:	2320      	movs	r3, #32
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	481f      	ldr	r0, [pc, #124]	; (8001250 <MX_GPIO_Init+0x220>)
 80011d2:	f000 fc57 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80011d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011dc:	2312      	movs	r3, #18
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e8:	2304      	movs	r3, #4
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4818      	ldr	r0, [pc, #96]	; (8001254 <MX_GPIO_Init+0x224>)
 80011f4:	f000 fc46 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS3DSH_INT1_Pin */
  GPIO_InitStruct.Pin = LIS3DSH_INT1_Pin;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011fc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LIS3DSH_INT1_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <MX_GPIO_Init+0x218>)
 800120e:	f000 fc39 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS3DSH_INT2_Pin */
  GPIO_InitStruct.Pin = LIS3DSH_INT2_Pin;
 8001212:	2302      	movs	r3, #2
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001216:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800121a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LIS3DSH_INT2_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	4808      	ldr	r0, [pc, #32]	; (8001248 <MX_GPIO_Init+0x218>)
 8001228:	f000 fc2c 	bl	8001a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	2007      	movs	r0, #7
 8001232:	f000 fbce 	bl	80019d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001236:	2007      	movs	r0, #7
 8001238:	f000 fbe7 	bl	8001a0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800123c:	bf00      	nop
 800123e:	3730      	adds	r7, #48	; 0x30
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	40021000 	.word	0x40021000
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40020400 	.word	0x40020400

08001258 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  if(GPIO_Pin == GPIO_PIN_0){
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d102      	bne.n	800126e <HAL_GPIO_EXTI_Callback+0x16>
	  callback.LIS3DSH_INTERRUPT_STATE = LIS3DSH_DATA_READY;
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <HAL_GPIO_EXTI_Callback+0x24>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
  }
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	200004a4 	.word	0x200004a4

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	e7fe      	b.n	8001288 <Error_Handler+0x8>
	...

0800128c <SPI_TransmitReceive>:

extern SPI_HandleTypeDef hspi1;
extern SPI_Handle_T SPI_1;


uint8_t SPI_TransmitReceive(uint8_t spiNo,uint8_t *pTxdata, uint8_t *pRxdata, uint8_t Txlenght, uint8_t Rxlenght ){
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	461a      	mov	r2, r3
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	4613      	mov	r3, r2
 800129e:	73bb      	strb	r3, [r7, #14]
	if(spiNo == SPI_NO1){
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d118      	bne.n	80012d8 <SPI_TransmitReceive+0x4c>
		SPI_Com_Active(spiNo);
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f81d 	bl	80012e8 <SPI_Com_Active>
		HAL_SPI_Transmit(&hspi1, pTxdata, Txlenght, 200);
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	23c8      	movs	r3, #200	; 0xc8
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <SPI_TransmitReceive+0x58>)
 80012b8:	f002 f8e1 	bl	800347e <HAL_SPI_Transmit>

		if(Rxlenght != 0){
 80012bc:	7e3b      	ldrb	r3, [r7, #24]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <SPI_TransmitReceive+0x44>
		   HAL_SPI_Receive(&hspi1, pRxdata, Rxlenght, 200);
 80012c2:	7e3b      	ldrb	r3, [r7, #24]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	23c8      	movs	r3, #200	; 0xc8
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <SPI_TransmitReceive+0x58>)
 80012cc:	f002 fa13 	bl	80036f6 <HAL_SPI_Receive>
		}

		SPI_Com_Deactive(spiNo);
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f81a 	bl	800130c <SPI_Com_Deactive>
	}

}
 80012d8:	bf00      	nop
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000148 	.word	0x20000148

080012e8 <SPI_Com_Active>:

uint8_t SPI_Com_Active(uint8_t handle){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2108      	movs	r1, #8
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <SPI_Com_Active+0x20>)
 80012f8:	f000 fd60 	bl	8001dbc <HAL_GPIO_WritePin>
}
 80012fc:	bf00      	nop
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000

0800130c <SPI_Com_Deactive>:

uint8_t SPI_Com_Deactive(uint8_t handle){
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8001316:	2201      	movs	r2, #1
 8001318:	2108      	movs	r1, #8
 800131a:	4804      	ldr	r0, [pc, #16]	; (800132c <SPI_Com_Deactive+0x20>)
 800131c:	f000 fd4e 	bl	8001dbc <HAL_GPIO_WritePin>
}
 8001320:	bf00      	nop
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_MspInit+0x5c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a13      	ldr	r2, [pc, #76]	; (800138c <HAL_MspInit+0x5c>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_MspInit+0x5c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_MspInit+0x5c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a0c      	ldr	r2, [pc, #48]	; (800138c <HAL_MspInit+0x5c>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_MspInit+0x5c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800136e:	2007      	movs	r0, #7
 8001370:	f000 fb24 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2005      	movs	r0, #5
 800137a:	f000 fb2a 	bl	80019d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800137e:	2005      	movs	r0, #5
 8001380:	f000 fb43 	bl	8001a0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800

08001390 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	; 0x38
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a31      	ldr	r2, [pc, #196]	; (8001480 <HAL_I2S_MspInit+0xf0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d15a      	bne.n	8001476 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013c0:	2301      	movs	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80013c4:	23c0      	movs	r3, #192	; 0xc0
 80013c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 fe8b 	bl	80030ec <HAL_RCCEx_PeriphCLKConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80013dc:	f7ff ff50 	bl	8001280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <HAL_I2S_MspInit+0xf4>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a26      	ldr	r2, [pc, #152]	; (8001484 <HAL_I2S_MspInit+0xf4>)
 80013ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_I2S_MspInit+0xf4>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_I2S_MspInit+0xf4>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	4a1f      	ldr	r2, [pc, #124]	; (8001484 <HAL_I2S_MspInit+0xf4>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6313      	str	r3, [r2, #48]	; 0x30
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <HAL_I2S_MspInit+0xf4>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_I2S_MspInit+0xf4>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	4a18      	ldr	r2, [pc, #96]	; (8001484 <HAL_I2S_MspInit+0xf4>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	6313      	str	r3, [r2, #48]	; 0x30
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <HAL_I2S_MspInit+0xf4>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001434:	2310      	movs	r3, #16
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001444:	2306      	movs	r3, #6
 8001446:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	480e      	ldr	r0, [pc, #56]	; (8001488 <HAL_I2S_MspInit+0xf8>)
 8001450:	f000 fb18 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001454:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001466:	2306      	movs	r3, #6
 8001468:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	4806      	ldr	r0, [pc, #24]	; (800148c <HAL_I2S_MspInit+0xfc>)
 8001472:	f000 fb07 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3738      	adds	r7, #56	; 0x38
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40003c00 	.word	0x40003c00
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000
 800148c:	40020800 	.word	0x40020800

08001490 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_SPI_MspInit+0x94>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d133      	bne.n	800151a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_SPI_MspInit+0x98>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_SPI_MspInit+0x98>)
 80014bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_SPI_MspInit+0x98>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_SPI_MspInit+0x98>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <HAL_SPI_MspInit+0x98>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_SPI_MspInit+0x98>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014ea:	23e0      	movs	r3, #224	; 0xe0
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014fa:	2305      	movs	r3, #5
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4809      	ldr	r0, [pc, #36]	; (800152c <HAL_SPI_MspInit+0x9c>)
 8001506:	f000 fabd 	bl	8001a84 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	2023      	movs	r0, #35	; 0x23
 8001510:	f000 fa5f 	bl	80019d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001514:	2023      	movs	r0, #35	; 0x23
 8001516:	f000 fa78 	bl	8001a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40013000 	.word	0x40013000
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000

08001530 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001550:	d13f      	bne.n	80015d2 <HAL_HCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <HAL_HCD_MspInit+0xac>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a20      	ldr	r2, [pc, #128]	; (80015dc <HAL_HCD_MspInit+0xac>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <HAL_HCD_MspInit+0xac>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800156e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	4817      	ldr	r0, [pc, #92]	; (80015e0 <HAL_HCD_MspInit+0xb0>)
 8001584:	f000 fa7e 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001588:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800159a:	230a      	movs	r3, #10
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	480e      	ldr	r0, [pc, #56]	; (80015e0 <HAL_HCD_MspInit+0xb0>)
 80015a6:	f000 fa6d 	bl	8001a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_HCD_MspInit+0xac>)
 80015ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <HAL_HCD_MspInit+0xac>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b4:	6353      	str	r3, [r2, #52]	; 0x34
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_HCD_MspInit+0xac>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_HCD_MspInit+0xac>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_HCD_MspInit+0xac>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020000 	.word	0x40020000

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f000 f8b0 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIS3DSH_INT1_Pin);
 800164a:	2001      	movs	r0, #1
 800164c:	f000 fbd0 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIS3DSH_INT2_Pin);
 8001658:	2002      	movs	r0, #2
 800165a:	f000 fbc9 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <SPI1_IRQHandler+0x10>)
 800166a:	f002 faf7 	bl	8003c5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000148 	.word	0x20000148

08001678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a0:	480d      	ldr	r0, [pc, #52]	; (80016d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016a2:	490e      	ldr	r1, [pc, #56]	; (80016dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a8:	e002      	b.n	80016b0 <LoopCopyDataInit>

080016aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ae:	3304      	adds	r3, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b4:	d3f9      	bcc.n	80016aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016b8:	4c0b      	ldr	r4, [pc, #44]	; (80016e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016bc:	e001      	b.n	80016c2 <LoopFillZerobss>

080016be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c0:	3204      	adds	r2, #4

080016c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c4:	d3fb      	bcc.n	80016be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016c6:	f7ff ffd7 	bl	8001678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ca:	f002 ff35 	bl	8004538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7ff fafb 	bl	8000cc8 <main>
  bx  lr    
 80016d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016e0:	080045b8 	.word	0x080045b8
  ldr r2, =_sbss
 80016e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80016e8:	200004ac 	.word	0x200004ac

080016ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_Init+0x40>)
 80016fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_Init+0x40>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_Init+0x40>)
 8001712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 f94f 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	2000      	movs	r0, #0
 8001720:	f000 f808 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001724:	f7ff fe04 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f967 	bl	8001a26 <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f000 f92f 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000000 	.word	0x20000000
 800178c:	20000008 	.word	0x20000008
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008
 80017b8:	200004a8 	.word	0x200004a8

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	200004a8 	.word	0x200004a8

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff ffee 	bl	80017bc <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_Delay+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffde 	bl	80017bc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4907      	ldr	r1, [pc, #28]	; (80018b8 <__NVIC_EnableIRQ+0x38>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff29 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff3e 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff8e 	bl	8001910 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff31 	bl	8001880 <__NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffa2 	bl	8001978 <SysTick_Config>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d004      	beq.n	8001a5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e00c      	b.n	8001a76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2205      	movs	r2, #5
 8001a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	e16b      	b.n	8001d78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	f040 815a 	bne.w	8001d72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d005      	beq.n	8001ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d130      	bne.n	8001b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 0201 	and.w	r2, r3, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d017      	beq.n	8001b74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d123      	bne.n	8001bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	08da      	lsrs	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3208      	adds	r2, #8
 8001bc2:	69b9      	ldr	r1, [r7, #24]
 8001bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80b4 	beq.w	8001d72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b60      	ldr	r3, [pc, #384]	; (8001d90 <HAL_GPIO_Init+0x30c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a5f      	ldr	r2, [pc, #380]	; (8001d90 <HAL_GPIO_Init+0x30c>)
 8001c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <HAL_GPIO_Init+0x30c>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c26:	4a5b      	ldr	r2, [pc, #364]	; (8001d94 <HAL_GPIO_Init+0x310>)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a52      	ldr	r2, [pc, #328]	; (8001d98 <HAL_GPIO_Init+0x314>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d02b      	beq.n	8001caa <HAL_GPIO_Init+0x226>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a51      	ldr	r2, [pc, #324]	; (8001d9c <HAL_GPIO_Init+0x318>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d025      	beq.n	8001ca6 <HAL_GPIO_Init+0x222>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a50      	ldr	r2, [pc, #320]	; (8001da0 <HAL_GPIO_Init+0x31c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01f      	beq.n	8001ca2 <HAL_GPIO_Init+0x21e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4f      	ldr	r2, [pc, #316]	; (8001da4 <HAL_GPIO_Init+0x320>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d019      	beq.n	8001c9e <HAL_GPIO_Init+0x21a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4e      	ldr	r2, [pc, #312]	; (8001da8 <HAL_GPIO_Init+0x324>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_GPIO_Init+0x216>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4d      	ldr	r2, [pc, #308]	; (8001dac <HAL_GPIO_Init+0x328>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00d      	beq.n	8001c96 <HAL_GPIO_Init+0x212>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4c      	ldr	r2, [pc, #304]	; (8001db0 <HAL_GPIO_Init+0x32c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <HAL_GPIO_Init+0x20e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4b      	ldr	r2, [pc, #300]	; (8001db4 <HAL_GPIO_Init+0x330>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_GPIO_Init+0x20a>
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	e00e      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001c8e:	2308      	movs	r3, #8
 8001c90:	e00c      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001c92:	2306      	movs	r3, #6
 8001c94:	e00a      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001c96:	2305      	movs	r3, #5
 8001c98:	e008      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e004      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001caa:	2300      	movs	r3, #0
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	f002 0203 	and.w	r2, r2, #3
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	4093      	lsls	r3, r2
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cbc:	4935      	ldr	r1, [pc, #212]	; (8001d94 <HAL_GPIO_Init+0x310>)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cca:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cee:	4a32      	ldr	r2, [pc, #200]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf4:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d18:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d1e:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d42:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d6c:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3301      	adds	r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	2b0f      	cmp	r3, #15
 8001d7c:	f67f ae90 	bls.w	8001aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40013800 	.word	0x40013800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020c00 	.word	0x40020c00
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40021400 	.word	0x40021400
 8001db0:	40021800 	.word	0x40021800
 8001db4:	40021c00 	.word	0x40021c00
 8001db8:	40013c00 	.word	0x40013c00

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd8:	e003      	b.n	8001de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d006      	beq.n	8001e14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fa22 	bl	8001258 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40013c00 	.word	0x40013c00

08001e20 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e22:	b08f      	sub	sp, #60	; 0x3c
 8001e24:	af0a      	add	r7, sp, #40	; 0x28
 8001e26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e054      	b.n	8001edc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d106      	bne.n	8001e52 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff fb6f 	bl	8001530 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2203      	movs	r2, #3
 8001e56:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f002 f996 	bl	80041a2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	687e      	ldr	r6, [r7, #4]
 8001e7e:	466d      	mov	r5, sp
 8001e80:	f106 0410 	add.w	r4, r6, #16
 8001e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e90:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e94:	1d33      	adds	r3, r6, #4
 8001e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e98:	6838      	ldr	r0, [r7, #0]
 8001e9a:	f002 f921 	bl	80040e0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f002 f98d 	bl	80041c4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	687e      	ldr	r6, [r7, #4]
 8001eb2:	466d      	mov	r5, sp
 8001eb4:	f106 0410 	add.w	r4, r6, #16
 8001eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ec8:	1d33      	adds	r3, r6, #4
 8001eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ecc:	6838      	ldr	r0, [r7, #0]
 8001ece:	f002 fa6b 	bl	80043a8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ee4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e128      	b.n	8002148 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d109      	bne.n	8001f16 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a90      	ldr	r2, [pc, #576]	; (8002150 <HAL_I2S_Init+0x26c>)
 8001f0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fa3d 	bl	8001390 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f2c:	f023 030f 	bic.w	r3, r3, #15
 8001f30:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2202      	movs	r2, #2
 8001f38:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d060      	beq.n	8002004 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001f4a:	2310      	movs	r3, #16
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e001      	b.n	8001f54 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001f50:	2320      	movs	r3, #32
 8001f52:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d802      	bhi.n	8001f62 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f001 f9a4 	bl	80032b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f68:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f72:	d125      	bne.n	8001fc0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d010      	beq.n	8001f9e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	461a      	mov	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	3305      	adds	r3, #5
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	e01f      	b.n	8001fde <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	3305      	adds	r3, #5
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e00e      	b.n	8001fde <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	3305      	adds	r3, #5
 8001fdc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4a5c      	ldr	r2, [pc, #368]	; (8002154 <HAL_I2S_Init+0x270>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	08db      	lsrs	r3, r3, #3
 8001fe8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	e003      	b.n	800200c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002004:	2302      	movs	r3, #2
 8002006:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d902      	bls.n	8002018 <HAL_I2S_Init+0x134>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	2bff      	cmp	r3, #255	; 0xff
 8002016:	d907      	bls.n	8002028 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201c:	f043 0210 	orr.w	r2, r3, #16
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e08f      	b.n	8002148 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	ea42 0103 	orr.w	r1, r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	430a      	orrs	r2, r1
 800203a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002046:	f023 030f 	bic.w	r3, r3, #15
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6851      	ldr	r1, [r2, #4]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6892      	ldr	r2, [r2, #8]
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68d2      	ldr	r2, [r2, #12]
 8002058:	4311      	orrs	r1, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6992      	ldr	r2, [r2, #24]
 800205e:	430a      	orrs	r2, r1
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800206a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d161      	bne.n	8002138 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a38      	ldr	r2, [pc, #224]	; (8002158 <HAL_I2S_Init+0x274>)
 8002078:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a37      	ldr	r2, [pc, #220]	; (800215c <HAL_I2S_Init+0x278>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d101      	bne.n	8002088 <HAL_I2S_Init+0x1a4>
 8002084:	4b36      	ldr	r3, [pc, #216]	; (8002160 <HAL_I2S_Init+0x27c>)
 8002086:	e001      	b.n	800208c <HAL_I2S_Init+0x1a8>
 8002088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	4932      	ldr	r1, [pc, #200]	; (800215c <HAL_I2S_Init+0x278>)
 8002094:	428a      	cmp	r2, r1
 8002096:	d101      	bne.n	800209c <HAL_I2S_Init+0x1b8>
 8002098:	4a31      	ldr	r2, [pc, #196]	; (8002160 <HAL_I2S_Init+0x27c>)
 800209a:	e001      	b.n	80020a0 <HAL_I2S_Init+0x1bc>
 800209c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80020a0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020a4:	f023 030f 	bic.w	r3, r3, #15
 80020a8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a2b      	ldr	r2, [pc, #172]	; (800215c <HAL_I2S_Init+0x278>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d101      	bne.n	80020b8 <HAL_I2S_Init+0x1d4>
 80020b4:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <HAL_I2S_Init+0x27c>)
 80020b6:	e001      	b.n	80020bc <HAL_I2S_Init+0x1d8>
 80020b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020bc:	2202      	movs	r2, #2
 80020be:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a25      	ldr	r2, [pc, #148]	; (800215c <HAL_I2S_Init+0x278>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <HAL_I2S_Init+0x1ea>
 80020ca:	4b25      	ldr	r3, [pc, #148]	; (8002160 <HAL_I2S_Init+0x27c>)
 80020cc:	e001      	b.n	80020d2 <HAL_I2S_Init+0x1ee>
 80020ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020de:	d003      	beq.n	80020e8 <HAL_I2S_Init+0x204>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d103      	bne.n	80020f0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80020e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e001      	b.n	80020f4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80020fe:	4313      	orrs	r3, r2
 8002100:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002108:	4313      	orrs	r3, r2
 800210a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002112:	4313      	orrs	r3, r2
 8002114:	b29a      	uxth	r2, r3
 8002116:	897b      	ldrh	r3, [r7, #10]
 8002118:	4313      	orrs	r3, r2
 800211a:	b29b      	uxth	r3, r3
 800211c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002120:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a0d      	ldr	r2, [pc, #52]	; (800215c <HAL_I2S_Init+0x278>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_I2S_Init+0x24c>
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_I2S_Init+0x27c>)
 800212e:	e001      	b.n	8002134 <HAL_I2S_Init+0x250>
 8002130:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002134:	897a      	ldrh	r2, [r7, #10]
 8002136:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	0800225b 	.word	0x0800225b
 8002154:	cccccccd 	.word	0xcccccccd
 8002158:	08002371 	.word	0x08002371
 800215c:	40003800 	.word	0x40003800
 8002160:	40003400 	.word	0x40003400

08002164 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	881a      	ldrh	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	1c9a      	adds	r2, r3, #2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10e      	bne.n	80021f4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021e4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ffb8 	bl	8002164 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	b292      	uxth	r2, r2
 8002210:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	1c9a      	adds	r2, r3, #2
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002220:	b29b      	uxth	r3, r3
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10e      	bne.n	8002252 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002242:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff93 	bl	8002178 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b04      	cmp	r3, #4
 8002274:	d13a      	bne.n	80022ec <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d109      	bne.n	8002294 <I2S_IRQHandler+0x3a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228a:	2b40      	cmp	r3, #64	; 0x40
 800228c:	d102      	bne.n	8002294 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffb4 	bl	80021fc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	d126      	bne.n	80022ec <I2S_IRQHandler+0x92>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d11f      	bne.n	80022ec <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f043 0202 	orr.w	r2, r3, #2
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ff50 	bl	800218c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d136      	bne.n	8002366 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d109      	bne.n	8002316 <I2S_IRQHandler+0xbc>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230c:	2b80      	cmp	r3, #128	; 0x80
 800230e:	d102      	bne.n	8002316 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff45 	bl	80021a0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b08      	cmp	r3, #8
 800231e:	d122      	bne.n	8002366 <I2S_IRQHandler+0x10c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b20      	cmp	r3, #32
 800232c:	d11b      	bne.n	8002366 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800233c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	f043 0204 	orr.w	r2, r3, #4
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff13 	bl	800218c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a92      	ldr	r2, [pc, #584]	; (80025d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800238a:	4b92      	ldr	r3, [pc, #584]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800238c:	e001      	b.n	8002392 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800238e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a8b      	ldr	r2, [pc, #556]	; (80025d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80023a8:	4b8a      	ldr	r3, [pc, #552]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023aa:	e001      	b.n	80023b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80023ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023bc:	d004      	beq.n	80023c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 8099 	bne.w	80024fa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d107      	bne.n	80023e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f925 	bl	800262c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d107      	bne.n	80023fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f9c8 	bl	800278c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002402:	2b40      	cmp	r3, #64	; 0x40
 8002404:	d13a      	bne.n	800247c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b00      	cmp	r3, #0
 800240e:	d035      	beq.n	800247c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a6e      	ldr	r2, [pc, #440]	; (80025d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800241a:	4b6e      	ldr	r3, [pc, #440]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800241c:	e001      	b.n	8002422 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800241e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4969      	ldr	r1, [pc, #420]	; (80025d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800242a:	428b      	cmp	r3, r1
 800242c:	d101      	bne.n	8002432 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800242e:	4b69      	ldr	r3, [pc, #420]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002430:	e001      	b.n	8002436 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002432:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002436:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800243a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800244a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f043 0202 	orr.w	r2, r3, #2
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff fe88 	bl	800218c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b08      	cmp	r3, #8
 8002484:	f040 80c3 	bne.w	800260e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80bd 	beq.w	800260e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024a2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a49      	ldr	r2, [pc, #292]	; (80025d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80024ae:	4b49      	ldr	r3, [pc, #292]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024b0:	e001      	b.n	80024b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80024b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4944      	ldr	r1, [pc, #272]	; (80025d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024be:	428b      	cmp	r3, r1
 80024c0:	d101      	bne.n	80024c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80024c2:	4b44      	ldr	r3, [pc, #272]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024c4:	e001      	b.n	80024ca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80024c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024ce:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80024d0:	2300      	movs	r3, #0
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f043 0204 	orr.w	r2, r3, #4
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fe4a 	bl	800218c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024f8:	e089      	b.n	800260e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b02      	cmp	r3, #2
 8002502:	d107      	bne.n	8002514 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f8be 	bl	8002690 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f8fd 	bl	8002728 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d12f      	bne.n	8002598 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b00      	cmp	r3, #0
 8002540:	d02a      	beq.n	8002598 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002550:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800255e:	e001      	b.n	8002564 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4919      	ldr	r1, [pc, #100]	; (80025d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800256c:	428b      	cmp	r3, r1
 800256e:	d101      	bne.n	8002574 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002570:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002572:	e001      	b.n	8002578 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002578:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800257c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f043 0202 	orr.w	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff fdfa 	bl	800218c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d136      	bne.n	8002610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d031      	beq.n	8002610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a07      	ldr	r2, [pc, #28]	; (80025d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d101      	bne.n	80025ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025b8:	e001      	b.n	80025be <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80025ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4902      	ldr	r1, [pc, #8]	; (80025d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025c6:	428b      	cmp	r3, r1
 80025c8:	d106      	bne.n	80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80025ca:	4b02      	ldr	r3, [pc, #8]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025cc:	e006      	b.n	80025dc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80025ce:	bf00      	nop
 80025d0:	40003800 	.word	0x40003800
 80025d4:	40003400 	.word	0x40003400
 80025d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025e0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f043 0204 	orr.w	r2, r3, #4
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fdc0 	bl	800218c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800260c:	e000      	b.n	8002610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800260e:	bf00      	nop
}
 8002610:	bf00      	nop
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	1c99      	adds	r1, r3, #2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6251      	str	r1, [r2, #36]	; 0x24
 800263e:	881a      	ldrh	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d113      	bne.n	8002686 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800266c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ffc9 	bl	8002618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	1c99      	adds	r1, r3, #2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6251      	str	r1, [r2, #36]	; 0x24
 80026a2:	8819      	ldrh	r1, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <I2SEx_TxISR_I2SExt+0x90>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <I2SEx_TxISR_I2SExt+0x22>
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <I2SEx_TxISR_I2SExt+0x94>)
 80026b0:	e001      	b.n	80026b6 <I2SEx_TxISR_I2SExt+0x26>
 80026b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026b6:	460a      	mov	r2, r1
 80026b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d121      	bne.n	8002716 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <I2SEx_TxISR_I2SExt+0x90>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d101      	bne.n	80026e0 <I2SEx_TxISR_I2SExt+0x50>
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <I2SEx_TxISR_I2SExt+0x94>)
 80026de:	e001      	b.n	80026e4 <I2SEx_TxISR_I2SExt+0x54>
 80026e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	490d      	ldr	r1, [pc, #52]	; (8002720 <I2SEx_TxISR_I2SExt+0x90>)
 80026ec:	428b      	cmp	r3, r1
 80026ee:	d101      	bne.n	80026f4 <I2SEx_TxISR_I2SExt+0x64>
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <I2SEx_TxISR_I2SExt+0x94>)
 80026f2:	e001      	b.n	80026f8 <I2SEx_TxISR_I2SExt+0x68>
 80026f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff81 	bl	8002618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40003800 	.word	0x40003800
 8002724:	40003400 	.word	0x40003400

08002728 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68d8      	ldr	r0, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	1c99      	adds	r1, r3, #2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002740:	b282      	uxth	r2, r0
 8002742:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002756:	b29b      	uxth	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d113      	bne.n	8002784 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800276a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ff4a 	bl	8002618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a20      	ldr	r2, [pc, #128]	; (800281c <I2SEx_RxISR_I2SExt+0x90>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <I2SEx_RxISR_I2SExt+0x16>
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <I2SEx_RxISR_I2SExt+0x94>)
 80027a0:	e001      	b.n	80027a6 <I2SEx_RxISR_I2SExt+0x1a>
 80027a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027a6:	68d8      	ldr	r0, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	1c99      	adds	r1, r3, #2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80027b2:	b282      	uxth	r2, r0
 80027b4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d121      	bne.n	8002812 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <I2SEx_RxISR_I2SExt+0x90>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d101      	bne.n	80027dc <I2SEx_RxISR_I2SExt+0x50>
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <I2SEx_RxISR_I2SExt+0x94>)
 80027da:	e001      	b.n	80027e0 <I2SEx_RxISR_I2SExt+0x54>
 80027dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	490d      	ldr	r1, [pc, #52]	; (800281c <I2SEx_RxISR_I2SExt+0x90>)
 80027e8:	428b      	cmp	r3, r1
 80027ea:	d101      	bne.n	80027f0 <I2SEx_RxISR_I2SExt+0x64>
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <I2SEx_RxISR_I2SExt+0x94>)
 80027ee:	e001      	b.n	80027f4 <I2SEx_RxISR_I2SExt+0x68>
 80027f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027f8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d106      	bne.n	8002812 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff03 	bl	8002618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40003800 	.word	0x40003800
 8002820:	40003400 	.word	0x40003400

08002824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e267      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d075      	beq.n	800292e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002842:	4b88      	ldr	r3, [pc, #544]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b04      	cmp	r3, #4
 800284c:	d00c      	beq.n	8002868 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284e:	4b85      	ldr	r3, [pc, #532]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002856:	2b08      	cmp	r3, #8
 8002858:	d112      	bne.n	8002880 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285a:	4b82      	ldr	r3, [pc, #520]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002866:	d10b      	bne.n	8002880 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002868:	4b7e      	ldr	r3, [pc, #504]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d05b      	beq.n	800292c <HAL_RCC_OscConfig+0x108>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d157      	bne.n	800292c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e242      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002888:	d106      	bne.n	8002898 <HAL_RCC_OscConfig+0x74>
 800288a:	4b76      	ldr	r3, [pc, #472]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a75      	ldr	r2, [pc, #468]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e01d      	b.n	80028d4 <HAL_RCC_OscConfig+0xb0>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0x98>
 80028a2:	4b70      	ldr	r3, [pc, #448]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6f      	ldr	r2, [pc, #444]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b6d      	ldr	r3, [pc, #436]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a6c      	ldr	r2, [pc, #432]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e00b      	b.n	80028d4 <HAL_RCC_OscConfig+0xb0>
 80028bc:	4b69      	ldr	r3, [pc, #420]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a68      	ldr	r2, [pc, #416]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b66      	ldr	r3, [pc, #408]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a65      	ldr	r2, [pc, #404]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7fe ff6e 	bl	80017bc <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e4:	f7fe ff6a 	bl	80017bc <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e207      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	4b5b      	ldr	r3, [pc, #364]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0xc0>
 8002902:	e014      	b.n	800292e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe ff5a 	bl	80017bc <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe ff56 	bl	80017bc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e1f3      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291e:	4b51      	ldr	r3, [pc, #324]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0xe8>
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d063      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800293a:	4b4a      	ldr	r3, [pc, #296]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002946:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800294e:	2b08      	cmp	r3, #8
 8002950:	d11c      	bne.n	800298c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002952:	4b44      	ldr	r3, [pc, #272]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d116      	bne.n	800298c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_RCC_OscConfig+0x152>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e1c7      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002976:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4937      	ldr	r1, [pc, #220]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298a:	e03a      	b.n	8002a02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d020      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002994:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <HAL_RCC_OscConfig+0x244>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe ff0f 	bl	80017bc <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a2:	f7fe ff0b 	bl	80017bc <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e1a8      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b4:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4925      	ldr	r1, [pc, #148]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
 80029d4:	e015      	b.n	8002a02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d6:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <HAL_RCC_OscConfig+0x244>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe feee 	bl	80017bc <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e4:	f7fe feea 	bl	80017bc <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e187      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f6:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d036      	beq.n	8002a7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d016      	beq.n	8002a44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_RCC_OscConfig+0x248>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fece 	bl	80017bc <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a24:	f7fe feca 	bl	80017bc <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e167      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x200>
 8002a42:	e01b      	b.n	8002a7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_RCC_OscConfig+0x248>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe feb7 	bl	80017bc <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a50:	e00e      	b.n	8002a70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a52:	f7fe feb3 	bl	80017bc <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d907      	bls.n	8002a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e150      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
 8002a64:	40023800 	.word	0x40023800
 8002a68:	42470000 	.word	0x42470000
 8002a6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	4b88      	ldr	r3, [pc, #544]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ea      	bne.n	8002a52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8097 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8e:	4b81      	ldr	r3, [pc, #516]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10f      	bne.n	8002aba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a7c      	ldr	r2, [pc, #496]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b7a      	ldr	r3, [pc, #488]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aba:	4b77      	ldr	r3, [pc, #476]	; (8002c98 <HAL_RCC_OscConfig+0x474>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d118      	bne.n	8002af8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac6:	4b74      	ldr	r3, [pc, #464]	; (8002c98 <HAL_RCC_OscConfig+0x474>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a73      	ldr	r2, [pc, #460]	; (8002c98 <HAL_RCC_OscConfig+0x474>)
 8002acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad2:	f7fe fe73 	bl	80017bc <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ada:	f7fe fe6f 	bl	80017bc <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e10c      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aec:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <HAL_RCC_OscConfig+0x474>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_OscConfig+0x2ea>
 8002b00:	4b64      	ldr	r3, [pc, #400]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	4a63      	ldr	r2, [pc, #396]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0c:	e01c      	b.n	8002b48 <HAL_RCC_OscConfig+0x324>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x30c>
 8002b16:	4b5f      	ldr	r3, [pc, #380]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	4a5e      	ldr	r2, [pc, #376]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	6713      	str	r3, [r2, #112]	; 0x70
 8002b22:	4b5c      	ldr	r3, [pc, #368]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b26:	4a5b      	ldr	r2, [pc, #364]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0x324>
 8002b30:	4b58      	ldr	r3, [pc, #352]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	4a57      	ldr	r2, [pc, #348]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3c:	4b55      	ldr	r3, [pc, #340]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	4a54      	ldr	r2, [pc, #336]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b42:	f023 0304 	bic.w	r3, r3, #4
 8002b46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d015      	beq.n	8002b7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe fe34 	bl	80017bc <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fe fe30 	bl	80017bc <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e0cb      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6e:	4b49      	ldr	r3, [pc, #292]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0ee      	beq.n	8002b58 <HAL_RCC_OscConfig+0x334>
 8002b7a:	e014      	b.n	8002ba6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fe1e 	bl	80017bc <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b84:	f7fe fe1a 	bl	80017bc <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e0b5      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9a:	4b3e      	ldr	r3, [pc, #248]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1ee      	bne.n	8002b84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bac:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	4a38      	ldr	r2, [pc, #224]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80a1 	beq.w	8002d04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bc2:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d05c      	beq.n	8002c88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d141      	bne.n	8002c5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <HAL_RCC_OscConfig+0x478>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fdee 	bl	80017bc <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe fdea 	bl	80017bc <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e087      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf6:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	019b      	lsls	r3, r3, #6
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	061b      	lsls	r3, r3, #24
 8002c26:	491b      	ldr	r1, [pc, #108]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c2c:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <HAL_RCC_OscConfig+0x478>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7fe fdc3 	bl	80017bc <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fe fdbf 	bl	80017bc <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e05c      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x416>
 8002c58:	e054      	b.n	8002d04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <HAL_RCC_OscConfig+0x478>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe fdac 	bl	80017bc <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe fda8 	bl	80017bc <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e045      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x444>
 8002c86:	e03d      	b.n	8002d04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e038      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40007000 	.word	0x40007000
 8002c9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_RCC_OscConfig+0x4ec>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d028      	beq.n	8002d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d121      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d11a      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d111      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d107      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800

08002d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0cc      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d28:	4b68      	ldr	r3, [pc, #416]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d90c      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b65      	ldr	r3, [pc, #404]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0b8      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d68:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d80:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a52      	ldr	r2, [pc, #328]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d8c:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	494d      	ldr	r1, [pc, #308]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d044      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d119      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e07f      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d107      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd2:	4b3f      	ldr	r3, [pc, #252]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e06f      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de2:	4b3b      	ldr	r3, [pc, #236]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e067      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df2:	4b37      	ldr	r3, [pc, #220]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f023 0203 	bic.w	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4934      	ldr	r1, [pc, #208]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e04:	f7fe fcda 	bl	80017bc <HAL_GetTick>
 8002e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e0c:	f7fe fcd6 	bl	80017bc <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e04f      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 020c 	and.w	r2, r3, #12
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d1eb      	bne.n	8002e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e34:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d20c      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e032      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4916      	ldr	r1, [pc, #88]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e9a:	f000 f821 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	490a      	ldr	r1, [pc, #40]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb2:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_RCC_ClockConfig+0x1c8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fc3a 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023c00 	.word	0x40023c00
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	08004598 	.word	0x08004598
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	20000004 	.word	0x20000004

08002ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee4:	b094      	sub	sp, #80	; 0x50
 8002ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	647b      	str	r3, [r7, #68]	; 0x44
 8002eec:	2300      	movs	r3, #0
 8002eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef8:	4b79      	ldr	r3, [pc, #484]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d00d      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x40>
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	f200 80e1 	bhi.w	80030cc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x34>
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d003      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f12:	e0db      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4b73      	ldr	r3, [pc, #460]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f18:	e0db      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1a:	4b73      	ldr	r3, [pc, #460]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f1e:	e0d8      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f20:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2a:	4b6d      	ldr	r3, [pc, #436]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d063      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f36:	4b6a      	ldr	r3, [pc, #424]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	099b      	lsrs	r3, r3, #6
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f48:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f52:	4622      	mov	r2, r4
 8002f54:	462b      	mov	r3, r5
 8002f56:	f04f 0000 	mov.w	r0, #0
 8002f5a:	f04f 0100 	mov.w	r1, #0
 8002f5e:	0159      	lsls	r1, r3, #5
 8002f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f64:	0150      	lsls	r0, r2, #5
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	1a51      	subs	r1, r2, r1
 8002f6e:	6139      	str	r1, [r7, #16]
 8002f70:	4629      	mov	r1, r5
 8002f72:	eb63 0301 	sbc.w	r3, r3, r1
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f84:	4659      	mov	r1, fp
 8002f86:	018b      	lsls	r3, r1, #6
 8002f88:	4651      	mov	r1, sl
 8002f8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f8e:	4651      	mov	r1, sl
 8002f90:	018a      	lsls	r2, r1, #6
 8002f92:	4651      	mov	r1, sl
 8002f94:	ebb2 0801 	subs.w	r8, r2, r1
 8002f98:	4659      	mov	r1, fp
 8002f9a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb2:	4690      	mov	r8, r2
 8002fb4:	4699      	mov	r9, r3
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	eb18 0303 	adds.w	r3, r8, r3
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	462b      	mov	r3, r5
 8002fc0:	eb49 0303 	adc.w	r3, r9, r3
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	024b      	lsls	r3, r1, #9
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fdc:	4621      	mov	r1, r4
 8002fde:	024a      	lsls	r2, r1, #9
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ff0:	f7fd f8ea 	bl	80001c8 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ffc:	e058      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffe:	4b38      	ldr	r3, [pc, #224]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	099b      	lsrs	r3, r3, #6
 8003004:	2200      	movs	r2, #0
 8003006:	4618      	mov	r0, r3
 8003008:	4611      	mov	r1, r2
 800300a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800300e:	623b      	str	r3, [r7, #32]
 8003010:	2300      	movs	r3, #0
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
 8003014:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003018:	4642      	mov	r2, r8
 800301a:	464b      	mov	r3, r9
 800301c:	f04f 0000 	mov.w	r0, #0
 8003020:	f04f 0100 	mov.w	r1, #0
 8003024:	0159      	lsls	r1, r3, #5
 8003026:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800302a:	0150      	lsls	r0, r2, #5
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4641      	mov	r1, r8
 8003032:	ebb2 0a01 	subs.w	sl, r2, r1
 8003036:	4649      	mov	r1, r9
 8003038:	eb63 0b01 	sbc.w	fp, r3, r1
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003048:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800304c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003050:	ebb2 040a 	subs.w	r4, r2, sl
 8003054:	eb63 050b 	sbc.w	r5, r3, fp
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	00eb      	lsls	r3, r5, #3
 8003062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003066:	00e2      	lsls	r2, r4, #3
 8003068:	4614      	mov	r4, r2
 800306a:	461d      	mov	r5, r3
 800306c:	4643      	mov	r3, r8
 800306e:	18e3      	adds	r3, r4, r3
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	464b      	mov	r3, r9
 8003074:	eb45 0303 	adc.w	r3, r5, r3
 8003078:	607b      	str	r3, [r7, #4]
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003086:	4629      	mov	r1, r5
 8003088:	028b      	lsls	r3, r1, #10
 800308a:	4621      	mov	r1, r4
 800308c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003090:	4621      	mov	r1, r4
 8003092:	028a      	lsls	r2, r1, #10
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309a:	2200      	movs	r2, #0
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	61fa      	str	r2, [r7, #28]
 80030a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a4:	f7fd f890 	bl	80001c8 <__aeabi_uldivmod>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4613      	mov	r3, r2
 80030ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	3301      	adds	r3, #1
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ca:	e002      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3750      	adds	r7, #80	; 0x50
 80030d8:	46bd      	mov	sp, r7
 80030da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	00f42400 	.word	0x00f42400
 80030e8:	007a1200 	.word	0x007a1200

080030ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d105      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003110:	2b00      	cmp	r3, #0
 8003112:	d035      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003114:	4b62      	ldr	r3, [pc, #392]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800311a:	f7fe fb4f 	bl	80017bc <HAL_GetTick>
 800311e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003122:	f7fe fb4b 	bl	80017bc <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e0b0      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003134:	4b5b      	ldr	r3, [pc, #364]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f0      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	019a      	lsls	r2, r3, #6
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	071b      	lsls	r3, r3, #28
 800314c:	4955      	ldr	r1, [pc, #340]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003154:	4b52      	ldr	r3, [pc, #328]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800315a:	f7fe fb2f 	bl	80017bc <HAL_GetTick>
 800315e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003162:	f7fe fb2b 	bl	80017bc <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e090      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003174:	4b4b      	ldr	r3, [pc, #300]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8083 	beq.w	8003294 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b44      	ldr	r3, [pc, #272]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a43      	ldr	r2, [pc, #268]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80031aa:	4b3f      	ldr	r3, [pc, #252]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a3e      	ldr	r2, [pc, #248]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031b6:	f7fe fb01 	bl	80017bc <HAL_GetTick>
 80031ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031be:	f7fe fafd 	bl	80017bc <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e062      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031d0:	4b35      	ldr	r3, [pc, #212]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031dc:	4b31      	ldr	r3, [pc, #196]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d02f      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d028      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031fa:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003202:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003204:	4b29      	ldr	r3, [pc, #164]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003206:	2201      	movs	r2, #1
 8003208:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800320a:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003210:	4a24      	ldr	r2, [pc, #144]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003216:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d114      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003222:	f7fe facb 	bl	80017bc <HAL_GetTick>
 8003226:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003228:	e00a      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fe fac7 	bl	80017bc <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	; 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e02a      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ee      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003258:	d10d      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800326a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326e:	490d      	ldr	r1, [pc, #52]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003270:	4313      	orrs	r3, r2
 8003272:	608b      	str	r3, [r1, #8]
 8003274:	e005      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800327c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003280:	6093      	str	r3, [r2, #8]
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003284:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328e:	4905      	ldr	r1, [pc, #20]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003290:	4313      	orrs	r3, r2
 8003292:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	42470068 	.word	0x42470068
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40007000 	.word	0x40007000
 80032ac:	42470e40 	.word	0x42470e40

080032b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d13e      	bne.n	800334c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80032ce:	4b23      	ldr	r3, [pc, #140]	; (800335c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d12f      	bne.n	8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80032e4:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80032e6:	617b      	str	r3, [r7, #20]
          break;
 80032e8:	e02f      	b.n	800334a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032ea:	4b1c      	ldr	r3, [pc, #112]	; (800335c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f6:	d108      	bne.n	800330a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80032f8:	4b18      	ldr	r3, [pc, #96]	; (800335c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003300:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003302:	fbb2 f3f3 	udiv	r3, r2, r3
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	e007      	b.n	800331a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800330a:	4b14      	ldr	r3, [pc, #80]	; (800335c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003312:	4a15      	ldr	r2, [pc, #84]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800331c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003320:	099b      	lsrs	r3, r3, #6
 8003322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800332e:	4b0b      	ldr	r3, [pc, #44]	; (800335c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003334:	0f1b      	lsrs	r3, r3, #28
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	617b      	str	r3, [r7, #20]
          break;
 8003342:	e002      	b.n	800334a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
          break;
 8003348:	bf00      	nop
        }
      }
      break;
 800334a:	bf00      	nop
    }
  }
  return frequency;
 800334c:	697b      	ldr	r3, [r7, #20]
}
 800334e:	4618      	mov	r0, r3
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800
 8003360:	00bb8000 	.word	0x00bb8000
 8003364:	007a1200 	.word	0x007a1200
 8003368:	00f42400 	.word	0x00f42400

0800336c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e07b      	b.n	8003476 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b00      	cmp	r3, #0
 8003384:	d108      	bne.n	8003398 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800338e:	d009      	beq.n	80033a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	61da      	str	r2, [r3, #28]
 8003396:	e005      	b.n	80033a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fe f866 	bl	8001490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003428:	ea42 0103 	orr.w	r1, r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	f003 0104 	and.w	r1, r3, #4
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f003 0210 	and.w	r2, r3, #16
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003464:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b088      	sub	sp, #32
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_SPI_Transmit+0x22>
 800349c:	2302      	movs	r3, #2
 800349e:	e126      	b.n	80036ee <HAL_SPI_Transmit+0x270>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034a8:	f7fe f988 	bl	80017bc <HAL_GetTick>
 80034ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d002      	beq.n	80034c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034be:	2302      	movs	r3, #2
 80034c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034c2:	e10b      	b.n	80036dc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_SPI_Transmit+0x52>
 80034ca:	88fb      	ldrh	r3, [r7, #6]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d102      	bne.n	80034d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034d4:	e102      	b.n	80036dc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2203      	movs	r2, #3
 80034da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	88fa      	ldrh	r2, [r7, #6]
 80034f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351c:	d10f      	bne.n	800353e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800352c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800353c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d007      	beq.n	800355c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800355a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003564:	d14b      	bne.n	80035fe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_SPI_Transmit+0xf6>
 800356e:	8afb      	ldrh	r3, [r7, #22]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d13e      	bne.n	80035f2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	881a      	ldrh	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	1c9a      	adds	r2, r3, #2
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003598:	e02b      	b.n	80035f2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d112      	bne.n	80035ce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	881a      	ldrh	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	1c9a      	adds	r2, r3, #2
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80035cc:	e011      	b.n	80035f2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ce:	f7fe f8f5 	bl	80017bc <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d803      	bhi.n	80035e6 <HAL_SPI_Transmit+0x168>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e4:	d102      	bne.n	80035ec <HAL_SPI_Transmit+0x16e>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035f0:	e074      	b.n	80036dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1ce      	bne.n	800359a <HAL_SPI_Transmit+0x11c>
 80035fc:	e04c      	b.n	8003698 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_SPI_Transmit+0x18e>
 8003606:	8afb      	ldrh	r3, [r7, #22]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d140      	bne.n	800368e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	7812      	ldrb	r2, [r2, #0]
 8003618:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003632:	e02c      	b.n	800368e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b02      	cmp	r3, #2
 8003640:	d113      	bne.n	800366a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	330c      	adds	r3, #12
 800364c:	7812      	ldrb	r2, [r2, #0]
 800364e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	86da      	strh	r2, [r3, #54]	; 0x36
 8003668:	e011      	b.n	800368e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800366a:	f7fe f8a7 	bl	80017bc <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d803      	bhi.n	8003682 <HAL_SPI_Transmit+0x204>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d102      	bne.n	8003688 <HAL_SPI_Transmit+0x20a>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800368c:	e026      	b.n	80036dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1cd      	bne.n	8003634 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	6839      	ldr	r1, [r7, #0]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fcdd 	bl	800405c <SPI_EndRxTxTransaction>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10a      	bne.n	80036cc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	77fb      	strb	r3, [r7, #31]
 80036d8:	e000      	b.n	80036dc <HAL_SPI_Transmit+0x25e>
  }

error:
 80036da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b088      	sub	sp, #32
 80036fa:	af02      	add	r7, sp, #8
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003712:	d112      	bne.n	800373a <HAL_SPI_Receive+0x44>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10e      	bne.n	800373a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2204      	movs	r2, #4
 8003720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003724:	88fa      	ldrh	r2, [r7, #6]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	4613      	mov	r3, r2
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f8f1 	bl	8003918 <HAL_SPI_TransmitReceive>
 8003736:	4603      	mov	r3, r0
 8003738:	e0ea      	b.n	8003910 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_SPI_Receive+0x52>
 8003744:	2302      	movs	r3, #2
 8003746:	e0e3      	b.n	8003910 <HAL_SPI_Receive+0x21a>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003750:	f7fe f834 	bl	80017bc <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d002      	beq.n	8003768 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003762:	2302      	movs	r3, #2
 8003764:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003766:	e0ca      	b.n	80038fe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_SPI_Receive+0x7e>
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003778:	e0c1      	b.n	80038fe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2204      	movs	r2, #4
 800377e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	88fa      	ldrh	r2, [r7, #6]
 8003792:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c0:	d10f      	bne.n	80037e2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	d007      	beq.n	8003800 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d162      	bne.n	80038ce <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003808:	e02e      	b.n	8003868 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b01      	cmp	r3, #1
 8003816:	d115      	bne.n	8003844 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f103 020c 	add.w	r2, r3, #12
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	7812      	ldrb	r2, [r2, #0]
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003842:	e011      	b.n	8003868 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003844:	f7fd ffba 	bl	80017bc <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d803      	bhi.n	800385c <HAL_SPI_Receive+0x166>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d102      	bne.n	8003862 <HAL_SPI_Receive+0x16c>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003866:	e04a      	b.n	80038fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1cb      	bne.n	800380a <HAL_SPI_Receive+0x114>
 8003872:	e031      	b.n	80038d8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d113      	bne.n	80038aa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	b292      	uxth	r2, r2
 800388e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	1c9a      	adds	r2, r3, #2
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038a8:	e011      	b.n	80038ce <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038aa:	f7fd ff87 	bl	80017bc <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d803      	bhi.n	80038c2 <HAL_SPI_Receive+0x1cc>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d102      	bne.n	80038c8 <HAL_SPI_Receive+0x1d2>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038cc:	e017      	b.n	80038fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1cd      	bne.n	8003874 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	6839      	ldr	r1, [r7, #0]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fb57 	bl	8003f90 <SPI_EndRxTransaction>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75fb      	strb	r3, [r7, #23]
 80038fa:	e000      	b.n	80038fe <HAL_SPI_Receive+0x208>
  }

error :
 80038fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800390e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08c      	sub	sp, #48	; 0x30
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003926:	2301      	movs	r3, #1
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_SPI_TransmitReceive+0x26>
 800393a:	2302      	movs	r3, #2
 800393c:	e18a      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x33c>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003946:	f7fd ff39 	bl	80017bc <HAL_GetTick>
 800394a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800395c:	887b      	ldrh	r3, [r7, #2]
 800395e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003960:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003964:	2b01      	cmp	r3, #1
 8003966:	d00f      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x70>
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800396e:	d107      	bne.n	8003980 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <HAL_SPI_TransmitReceive+0x68>
 8003978:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800397c:	2b04      	cmp	r3, #4
 800397e:	d003      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003980:	2302      	movs	r3, #2
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003986:	e15b      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_SPI_TransmitReceive+0x82>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <HAL_SPI_TransmitReceive+0x82>
 8003994:	887b      	ldrh	r3, [r7, #2]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039a0:	e14e      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d003      	beq.n	80039b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2205      	movs	r2, #5
 80039b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	887a      	ldrh	r2, [r7, #2]
 80039c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	887a      	ldrh	r2, [r7, #2]
 80039cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	887a      	ldrh	r2, [r7, #2]
 80039d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	887a      	ldrh	r2, [r7, #2]
 80039de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	d007      	beq.n	8003a0a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a12:	d178      	bne.n	8003b06 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_SPI_TransmitReceive+0x10a>
 8003a1c:	8b7b      	ldrh	r3, [r7, #26]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d166      	bne.n	8003af0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	1c9a      	adds	r2, r3, #2
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a46:	e053      	b.n	8003af0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d11b      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x176>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d016      	beq.n	8003a8e <HAL_SPI_TransmitReceive+0x176>
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d113      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d119      	bne.n	8003ad0 <HAL_SPI_TransmitReceive+0x1b8>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d014      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	b292      	uxth	r2, r2
 8003ab2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	1c9a      	adds	r2, r3, #2
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003acc:	2301      	movs	r3, #1
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ad0:	f7fd fe74 	bl	80017bc <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d807      	bhi.n	8003af0 <HAL_SPI_TransmitReceive+0x1d8>
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d003      	beq.n	8003af0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003aee:	e0a7      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1a6      	bne.n	8003a48 <HAL_SPI_TransmitReceive+0x130>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1a1      	bne.n	8003a48 <HAL_SPI_TransmitReceive+0x130>
 8003b04:	e07c      	b.n	8003c00 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_SPI_TransmitReceive+0x1fc>
 8003b0e:	8b7b      	ldrh	r3, [r7, #26]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d16b      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	7812      	ldrb	r2, [r2, #0]
 8003b20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b3a:	e057      	b.n	8003bec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d11c      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x26c>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d017      	beq.n	8003b84 <HAL_SPI_TransmitReceive+0x26c>
 8003b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d114      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	330c      	adds	r3, #12
 8003b64:	7812      	ldrb	r2, [r2, #0]
 8003b66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d119      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x2ae>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d014      	beq.n	8003bc6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bc6:	f7fd fdf9 	bl	80017bc <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d803      	bhi.n	8003bde <HAL_SPI_TransmitReceive+0x2c6>
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d102      	bne.n	8003be4 <HAL_SPI_TransmitReceive+0x2cc>
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d103      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bea:	e029      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1a2      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x224>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d19d      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fa29 	bl	800405c <SPI_EndRxTxTransaction>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d006      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c1c:	e010      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10b      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	e000      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3730      	adds	r7, #48	; 0x30
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10e      	bne.n	8003c9c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	4798      	blx	r3
    return;
 8003c9a:	e0ce      	b.n	8003e3a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_SPI_IRQHandler+0x5e>
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d004      	beq.n	8003cba <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4798      	blx	r3
    return;
 8003cb8:	e0bf      	b.n	8003e3a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10a      	bne.n	8003cda <HAL_SPI_IRQHandler+0x7e>
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d105      	bne.n	8003cda <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80b0 	beq.w	8003e3a <HAL_SPI_IRQHandler+0x1de>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80aa 	beq.w	8003e3a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d023      	beq.n	8003d38 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d011      	beq.n	8003d20 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d00:	f043 0204 	orr.w	r2, r3, #4
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d08:	2300      	movs	r3, #0
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	e00b      	b.n	8003d38 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	693b      	ldr	r3, [r7, #16]
        return;
 8003d36:	e080      	b.n	8003e3a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d014      	beq.n	8003d6c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	f043 0201 	orr.w	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00c      	beq.n	8003d90 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7a:	f043 0208 	orr.w	r2, r3, #8
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d04f      	beq.n	8003e38 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003da6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d104      	bne.n	8003dc4 <HAL_SPI_IRQHandler+0x168>
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d034      	beq.n	8003e2e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0203 	bic.w	r2, r2, #3
 8003dd2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d011      	beq.n	8003e00 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de0:	4a17      	ldr	r2, [pc, #92]	; (8003e40 <HAL_SPI_IRQHandler+0x1e4>)
 8003de2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fd fe28 	bl	8001a3e <HAL_DMA_Abort_IT>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d016      	beq.n	8003e36 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0c:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <HAL_SPI_IRQHandler+0x1e4>)
 8003e0e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fd fe12 	bl	8001a3e <HAL_DMA_Abort_IT>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003e2c:	e003      	b.n	8003e36 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f808 	bl	8003e44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e34:	e000      	b.n	8003e38 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003e36:	bf00      	nop
    return;
 8003e38:	bf00      	nop
  }
}
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	08003e59 	.word	0x08003e59

08003e44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f7ff ffe6 	bl	8003e44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e90:	f7fd fc94 	bl	80017bc <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ea0:	f7fd fc8c 	bl	80017bc <HAL_GetTick>
 8003ea4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ea6:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	015b      	lsls	r3, r3, #5
 8003eac:	0d1b      	lsrs	r3, r3, #20
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	fb02 f303 	mul.w	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eb6:	e054      	b.n	8003f62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d050      	beq.n	8003f62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ec0:	f7fd fc7c 	bl	80017bc <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d902      	bls.n	8003ed6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d13d      	bne.n	8003f52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ee4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eee:	d111      	bne.n	8003f14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef8:	d004      	beq.n	8003f04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f02:	d107      	bne.n	8003f14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1c:	d10f      	bne.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e017      	b.n	8003f82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	bf0c      	ite	eq
 8003f72:	2301      	moveq	r3, #1
 8003f74:	2300      	movne	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d19b      	bne.n	8003eb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000000 	.word	0x20000000

08003f90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fa4:	d111      	bne.n	8003fca <SPI_EndRxTransaction+0x3a>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fae:	d004      	beq.n	8003fba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb8:	d107      	bne.n	8003fca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fd2:	d12a      	bne.n	800402a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fdc:	d012      	beq.n	8004004 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2180      	movs	r1, #128	; 0x80
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f7ff ff49 	bl	8003e80 <SPI_WaitFlagStateUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d02d      	beq.n	8004050 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	f043 0220 	orr.w	r2, r3, #32
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e026      	b.n	8004052 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2200      	movs	r2, #0
 800400c:	2101      	movs	r1, #1
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7ff ff36 	bl	8003e80 <SPI_WaitFlagStateUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01a      	beq.n	8004050 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	f043 0220 	orr.w	r2, r3, #32
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e013      	b.n	8004052 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2200      	movs	r2, #0
 8004032:	2101      	movs	r1, #1
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f7ff ff23 	bl	8003e80 <SPI_WaitFlagStateUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e000      	b.n	8004052 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004068:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <SPI_EndRxTxTransaction+0x7c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <SPI_EndRxTxTransaction+0x80>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	0d5b      	lsrs	r3, r3, #21
 8004074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004078:	fb02 f303 	mul.w	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004086:	d112      	bne.n	80040ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2200      	movs	r2, #0
 8004090:	2180      	movs	r1, #128	; 0x80
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f7ff fef4 	bl	8003e80 <SPI_WaitFlagStateUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d016      	beq.n	80040cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	f043 0220 	orr.w	r2, r3, #32
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e00f      	b.n	80040ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c4:	2b80      	cmp	r3, #128	; 0x80
 80040c6:	d0f2      	beq.n	80040ae <SPI_EndRxTxTransaction+0x52>
 80040c8:	e000      	b.n	80040cc <SPI_EndRxTxTransaction+0x70>
        break;
 80040ca:	bf00      	nop
  }

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000000 	.word	0x20000000
 80040dc:	165e9f81 	.word	0x165e9f81

080040e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040e0:	b084      	sub	sp, #16
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	f107 001c 	add.w	r0, r7, #28
 80040ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d122      	bne.n	800413e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800410c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004122:	2b01      	cmp	r3, #1
 8004124:	d105      	bne.n	8004132 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f904 	bl	8004340 <USB_CoreReset>
 8004138:	4603      	mov	r3, r0
 800413a:	73fb      	strb	r3, [r7, #15]
 800413c:	e01a      	b.n	8004174 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8f8 	bl	8004340 <USB_CoreReset>
 8004150:	4603      	mov	r3, r0
 8004152:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	639a      	str	r2, [r3, #56]	; 0x38
 8004166:	e005      	b.n	8004174 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	2b01      	cmp	r3, #1
 8004178:	d10b      	bne.n	8004192 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f043 0206 	orr.w	r2, r3, #6
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004192:	7bfb      	ldrb	r3, [r7, #15]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800419e:	b004      	add	sp, #16
 80041a0:	4770      	bx	lr

080041a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f023 0201 	bic.w	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d115      	bne.n	8004212 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041f2:	2001      	movs	r0, #1
 80041f4:	f7fd faee 	bl	80017d4 <HAL_Delay>
      ms++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3301      	adds	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f890 	bl	8004324 <USB_GetMode>
 8004204:	4603      	mov	r3, r0
 8004206:	2b01      	cmp	r3, #1
 8004208:	d01e      	beq.n	8004248 <USB_SetCurrentMode+0x84>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b31      	cmp	r3, #49	; 0x31
 800420e:	d9f0      	bls.n	80041f2 <USB_SetCurrentMode+0x2e>
 8004210:	e01a      	b.n	8004248 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d115      	bne.n	8004244 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004224:	2001      	movs	r0, #1
 8004226:	f7fd fad5 	bl	80017d4 <HAL_Delay>
      ms++;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3301      	adds	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f877 	bl	8004324 <USB_GetMode>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <USB_SetCurrentMode+0x84>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b31      	cmp	r3, #49	; 0x31
 8004240:	d9f0      	bls.n	8004224 <USB_SetCurrentMode+0x60>
 8004242:	e001      	b.n	8004248 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e005      	b.n	8004254 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b32      	cmp	r3, #50	; 0x32
 800424c:	d101      	bne.n	8004252 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3301      	adds	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <USB_FlushTxFifo+0x64>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d901      	bls.n	800427c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e01b      	b.n	80042b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	daf2      	bge.n	800426a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	019b      	lsls	r3, r3, #6
 800428c:	f043 0220 	orr.w	r2, r3, #32
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3301      	adds	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <USB_FlushTxFifo+0x64>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e006      	b.n	80042b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d0f0      	beq.n	8004294 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	00030d40 	.word	0x00030d40

080042c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3301      	adds	r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a11      	ldr	r2, [pc, #68]	; (8004320 <USB_FlushRxFifo+0x5c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e018      	b.n	8004314 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	daf2      	bge.n	80042d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2210      	movs	r2, #16
 80042f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	3301      	adds	r3, #1
 80042f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a08      	ldr	r2, [pc, #32]	; (8004320 <USB_FlushRxFifo+0x5c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e006      	b.n	8004314 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b10      	cmp	r3, #16
 8004310:	d0f0      	beq.n	80042f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	00030d40 	.word	0x00030d40

08004324 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f003 0301 	and.w	r3, r3, #1
}
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3301      	adds	r3, #1
 8004350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a13      	ldr	r2, [pc, #76]	; (80043a4 <USB_CoreReset+0x64>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e01b      	b.n	8004396 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	daf2      	bge.n	800434c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f043 0201 	orr.w	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3301      	adds	r3, #1
 800437a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <USB_CoreReset+0x64>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e006      	b.n	8004396 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b01      	cmp	r3, #1
 8004392:	d0f0      	beq.n	8004376 <USB_CoreReset+0x36>

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	00030d40 	.word	0x00030d40

080043a8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043a8:	b084      	sub	sp, #16
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b086      	sub	sp, #24
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043c8:	461a      	mov	r2, r3
 80043ca:	2300      	movs	r3, #0
 80043cc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d018      	beq.n	8004430 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80043fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004400:	2b01      	cmp	r3, #1
 8004402:	d10a      	bne.n	800441a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004412:	f043 0304 	orr.w	r3, r3, #4
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	e014      	b.n	8004444 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004428:	f023 0304 	bic.w	r3, r3, #4
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	e009      	b.n	8004444 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800443e:	f023 0304 	bic.w	r3, r3, #4
 8004442:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004444:	2110      	movs	r1, #16
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff ff08 	bl	800425c <USB_FlushTxFifo>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff ff34 	bl	80042c4 <USB_FlushRxFifo>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	e015      	b.n	8004498 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4413      	add	r3, r2
 8004474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004478:	461a      	mov	r2, r3
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
 800447e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448c:	461a      	mov	r2, r3
 800448e:	2300      	movs	r3, #0
 8004490:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	3301      	adds	r3, #1
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	429a      	cmp	r2, r3
 800449e:	d3e5      	bcc.n	800446c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f04f 32ff 	mov.w	r2, #4294967295
 80044ac:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a13      	ldr	r2, [pc, #76]	; (8004514 <USB_HostInit+0x16c>)
 80044c6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a13      	ldr	r2, [pc, #76]	; (8004518 <USB_HostInit+0x170>)
 80044cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80044d0:	e009      	b.n	80044e6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2280      	movs	r2, #128	; 0x80
 80044d6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a10      	ldr	r2, [pc, #64]	; (800451c <USB_HostInit+0x174>)
 80044dc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a0f      	ldr	r2, [pc, #60]	; (8004520 <USB_HostInit+0x178>)
 80044e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d105      	bne.n	80044f8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f043 0210 	orr.w	r2, r3, #16
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	4b09      	ldr	r3, [pc, #36]	; (8004524 <USB_HostInit+0x17c>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004504:	7dfb      	ldrb	r3, [r7, #23]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004510:	b004      	add	sp, #16
 8004512:	4770      	bx	lr
 8004514:	01000200 	.word	0x01000200
 8004518:	00e00300 	.word	0x00e00300
 800451c:	00600080 	.word	0x00600080
 8004520:	004000e0 	.word	0x004000e0
 8004524:	a3200008 	.word	0xa3200008

08004528 <memset>:
 8004528:	4402      	add	r2, r0
 800452a:	4603      	mov	r3, r0
 800452c:	4293      	cmp	r3, r2
 800452e:	d100      	bne.n	8004532 <memset+0xa>
 8004530:	4770      	bx	lr
 8004532:	f803 1b01 	strb.w	r1, [r3], #1
 8004536:	e7f9      	b.n	800452c <memset+0x4>

08004538 <__libc_init_array>:
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	4d0d      	ldr	r5, [pc, #52]	; (8004570 <__libc_init_array+0x38>)
 800453c:	4c0d      	ldr	r4, [pc, #52]	; (8004574 <__libc_init_array+0x3c>)
 800453e:	1b64      	subs	r4, r4, r5
 8004540:	10a4      	asrs	r4, r4, #2
 8004542:	2600      	movs	r6, #0
 8004544:	42a6      	cmp	r6, r4
 8004546:	d109      	bne.n	800455c <__libc_init_array+0x24>
 8004548:	4d0b      	ldr	r5, [pc, #44]	; (8004578 <__libc_init_array+0x40>)
 800454a:	4c0c      	ldr	r4, [pc, #48]	; (800457c <__libc_init_array+0x44>)
 800454c:	f000 f818 	bl	8004580 <_init>
 8004550:	1b64      	subs	r4, r4, r5
 8004552:	10a4      	asrs	r4, r4, #2
 8004554:	2600      	movs	r6, #0
 8004556:	42a6      	cmp	r6, r4
 8004558:	d105      	bne.n	8004566 <__libc_init_array+0x2e>
 800455a:	bd70      	pop	{r4, r5, r6, pc}
 800455c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004560:	4798      	blx	r3
 8004562:	3601      	adds	r6, #1
 8004564:	e7ee      	b.n	8004544 <__libc_init_array+0xc>
 8004566:	f855 3b04 	ldr.w	r3, [r5], #4
 800456a:	4798      	blx	r3
 800456c:	3601      	adds	r6, #1
 800456e:	e7f2      	b.n	8004556 <__libc_init_array+0x1e>
 8004570:	080045b0 	.word	0x080045b0
 8004574:	080045b0 	.word	0x080045b0
 8004578:	080045b0 	.word	0x080045b0
 800457c:	080045b4 	.word	0x080045b4

08004580 <_init>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	bf00      	nop
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr

0800458c <_fini>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	bf00      	nop
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr
